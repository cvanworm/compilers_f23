token(K_PROGRAM, program)
token(IDENTIFIER, tiny_example_2)
token(LCURLY, {)
token(K_FUNCTION, function)
token(K_INTEGER, integer)
token(IDENTIFIER, main)
token(LPAREN, ()
token(RPAREN, ))
token(LCURLY, {)
token(K_INTEGER, integer)
token(IDENTIFIER, i)
token(SEMI, ;)
token(IDENTIFIER, i)
token(ASSIGN, :=)
token(ICONSTANT, 5)
token(SEMI, ;)
token(COMMENT, // Loop variable)
token(K_INTEGER, integer)
token(IDENTIFIER, end)
token(SEMI, ;)
token(IDENTIFIER, end)
token(ASSIGN, :=)
token(ICONSTANT, 5)
token(SEMI, ;)
token(COMMENT, // Loop end variable)
token(K_WHILE, while)
token(LPAREN, ()
token(IDENTIFIER, i)
token(LEQ, <=)
token(IDENTIFIER, end)
token(RPAREN, ))
token(LCURLY, {)
token(K_IF, if)
token(LPAREN, ()
token(IDENTIFIER, i)
token(LT, <)
token(ICONSTANT, 0)
token(RPAREN, ))
token(K_THEN, then)
token(K_PRINT_STRING, print_string)
token(LPAREN, ()
token(SCONSTANT, "i is negative")
token(RPAREN, ))
token(SEMI, ;)
token(K_ELSE, else)
token(K_PRINT_STRING, print_string)
token(LPAREN, ()
token(SCONSTANT, "i is positive")
token(RPAREN, ))
token(SEMI, ;)
token(K_IF, if)
token(LPAREN, ()
token(IDENTIFIER, i)
token(DEQ, ==)
token(ICONSTANT, 0)
token(RPAREN, ))
token(K_THEN, then)
token(LCURLY, {)
token(K_PRINT_STRING, print_string)
token(LPAREN, ()
token(SCONSTANT, "i is zero")
token(RPAREN, ))
token(SEMI, ;)
token(RCURLY, })
token(IDENTIFIER, i)
token(INCREMENT, ++)
token(SEMI, ;)
token(RCURLY, })
token(RCURLY, })
token(K_FUNCTION, function)
token(K_STRING, string)
token(IDENTIFIER, main2)
token(LPAREN, ()
token(RPAREN, ))
token(LCURLY, {)
token(K_PRINT_STRING, print_string)
token(LPAREN, ()
token(SCONSTANT, "hey hey hey")
token(RPAREN, ))
token(SEMI, ;)
token(K_RETURN, return)
token(IDENTIFIER, name)
token(ASSIGN, :=)
token(ICONSTANT, 6)
token(SEMI, ;)
token(RCURLY, })
token(K_PROCEDURE, procedure)
token(IDENTIFIER, name)
token(LPAREN, ()
token(K_INTEGER, integer)
token(IDENTIFIER, i)
token(COMMA, ,)
token(K_INTEGER, integer)
token(IDENTIFIER, k)
token(RPAREN, ))
token(LCURLY, {)
token(K_PRINT_INTEGER, print_integer)
token(LPAREN, ()
token(IDENTIFIER, i)
token(RPAREN, ))
token(SEMI, ;)
token(RCURLY, })
token(RCURLY, })
valid program
