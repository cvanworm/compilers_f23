
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN ASSIGN_DIVIDE ASSIGN_MINUS ASSIGN_MOD ASSIGN_MULTIPLY ASSIGN_PLUS COMMA COMMENT DAND DCONSTANT DECREMENT DEQ DIVIDE DOR GEQ GT ICONSTANT ID INCREMENT KEYWORD K_DO K_DOUBLE K_ELSE K_EXIT K_FUNCTION K_IF K_INTEGER K_PRINT_DOUBLE K_PRINT_INTEGER K_PRINT_STRING K_PROCEDURE K_PROGRAM K_READ_DOUBLE K_READ_INTEGER K_READ_STRING K_RETURN K_STRING K_THEN K_WHILE LBRACKET LCURLY LEQ LPAREN LT MINUS MOD NE NOT PERIOD PLUS RBRACKET RCURLY RPAREN SCONSTANT SEMI TIMESprogram : K_PROGRAM ID LCURLY program_body RCURLYprogram_body : program_body program_bodyprogram_body : function\n                    | procedureprogram_body : epsilontype : K_INTEGER\n            | K_DOUBLE\n            | K_STRINGfunction_statements : function_statements function_statementsfunction_statements : statements\n                           | procedure scope : epsilonfunction : K_FUNCTION scope type ID LPAREN parameter_list RPAREN LCURLY function_statements RCURLYprocedure : K_PROCEDURE scope ID LPAREN parameter_list RPAREN LCURLY statements RCURLYparameter : type ID\n                 | type ID LBRACKET RBRACKETparameter_list : parameter_list COMMA parameter_list\n                      | parametervalue : ICONSTANT\n            | DCONSTANT\n            | SCONSTANT\n            | ID\n            | ID LBRACKET value RBRACKETparameter : epsilonstatements : statements statementsstatements : declare SEMI\n                  | declare_assign SEMI\n                  | assign SEMI\n                  | print \n                  | while\n                  | do\n                  | if\n                  | read\n                  | function_call SEMI\n                  | return SEMIstatement : declare SEMI\n                 | declare_assign SEMI\n                 | assign SEMI\n                 | print \n                 | function_call SEMI\n                 | read\n                 | return SEMIstatements : epsilondeclare : type ID\n               | type ID LBRACKET ID RBRACKETdeclare : type ID LBRACKET ICONSTANT RBRACKETdeclare : type factor COMMA factor COMMA factor\n             | type factor COMMA factor declare : declare COMMA IDdeclare : declare COMMA assignassign : ID ASSIGN value\n            | ID inc_dec\n            | ID ASSIGN math\n            | ID LBRACKET math RBRACKET ASSIGN mathassign : ID LBRACKET math RBRACKET ASSIGN SCONSTANTassign : ID ASSIGN function_callassign : ID ASSIGN_PLUS math\n              | ID ASSIGN_MINUS math\n              | ID ASSIGN_MULTIPLY math\n              | ID ASSIGN_DIVIDE math\n              | ID ASSIGN_MOD mathassign : assign ASSIGN valuedeclare_assign : type ID ASSIGN valuedeclare_assign : declare_assign COMMA IDprint : K_PRINT_INTEGER LPAREN value RPAREN SEMI\n             | K_PRINT_STRING LPAREN value RPAREN SEMI\n             | K_PRINT_DOUBLE LPAREN value RPAREN SEMIread : K_READ_INTEGER LPAREN ID RPAREN SEMIarguments : arguments COMMA argumentsarguments : valuearguments : epsilonfunction_call : ID LPAREN arguments RPARENreturn : K_RETURN valuereturn : epsilonreturn : K_RETURN function_callreturn : K_RETURN assigninc_dec : INCREMENT\n               | DECREMENTmath : expression\n          | factor inc_decexpression : expression PLUS term\n                | expression MINUS termexpression : termterm : term TIMES factor\n            | term DIVIDE factor\n            | term MOD factorterm : factor\n            | MINUS factorfactor : LPAREN expression RPAREN\n              | MINUS LPAREN expression RPARENfactor : ICONSTANT\n            | DCONSTANTfactor : IDfactor : ID LBRACKET value RBRACKETfactor : ID LBRACKET ID ICONSTANT RBRACKETbool_op : DAND\n               | DOR\n               | DEQ\n               | GEQ\n               | GT\n               | LEQ\n               | LT\n               | NE\n               | NOT condition : math bool_op math condition : function_call bool_op math bool : condition bool_op condition\n            | conditionwhile : K_WHILE LPAREN bool RPAREN statementwhile : K_WHILE LPAREN bool RPAREN LCURLY statements RCURLYdo_assign : ID ASSIGN ICONSTANTdo : K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN LCURLY statements RCURLYdo : K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN statementif : K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else_ifif : K_IF LPAREN bool RPAREN K_THEN statement else_ifelse_if : K_ELSE K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY elseelse_if : K_ELSE K_IF LPAREN bool RPAREN K_THEN statement elseelse_if : elseelse : K_ELSE LCURLY statements RCURLYelse : K_ELSE statementelse : epsilonepsilon :'
    
_lr_action_items = {'K_PROGRAM':([0,],[2,]),'$end':([1,12,],[0,-1,]),'ID':([2,10,14,15,16,17,18,19,26,33,36,38,42,43,44,45,46,49,50,58,60,61,62,63,65,66,67,68,69,70,71,74,75,76,77,78,79,80,81,82,83,87,90,91,92,93,94,95,96,104,115,131,132,133,135,137,150,151,152,153,155,156,157,158,160,162,164,175,176,177,178,179,180,181,182,183,184,185,186,187,188,202,208,210,211,212,213,214,218,220,228,229,237,238,239,240,241,242,243,244,245,246,248,249,250,251,252,254,256,257,258,259,260,261,262,263,265,266,268,269,270,271,272,273,274,275,276,],[3,-122,-12,20,21,-6,-7,-8,31,37,37,37,-29,-30,-31,-32,-33,-43,84,103,37,37,-11,106,116,116,116,116,116,116,123,37,-14,-26,127,-27,129,-28,123,-34,-35,116,123,123,123,145,147,145,149,37,116,165,123,116,116,116,192,194,116,116,116,116,116,116,194,123,123,37,145,-96,-97,-98,-99,-100,-101,-102,-103,-104,116,116,145,116,116,-65,-66,-67,-109,37,-39,-41,37,-68,37,-36,-37,-38,-40,-42,247,37,-122,-110,37,-115,37,-118,-121,-122,37,-120,37,-114,145,37,37,-113,-119,37,-112,37,37,-122,37,37,-117,-122,-116,]),'LCURLY':([3,29,32,175,228,250,258,269,273,],[4,33,36,214,244,256,262,270,256,]),'K_FUNCTION':([4,5,6,7,8,11,75,105,],[9,9,-3,-4,-5,9,-14,-13,]),'K_PROCEDURE':([4,5,6,7,8,11,36,42,43,44,45,46,49,60,61,62,74,75,76,78,80,82,83,104,105,210,211,212,213,218,220,229,238,239,240,241,242,245,246,249,251,252,254,257,259,263,265,268,271,274,275,276,],[10,10,-3,-4,-5,10,10,-29,-30,-31,-32,-33,-43,10,-10,-11,-25,-14,-26,-27,-28,-34,-35,10,-13,-65,-66,-67,-109,-39,-41,-68,-36,-37,-38,-40,-42,-122,-110,-115,-118,-121,-122,-120,-114,-113,-119,-112,-122,-117,-122,-116,]),'RCURLY':([4,5,6,7,8,11,33,36,38,42,43,44,45,46,49,60,61,62,74,75,76,78,80,82,83,104,105,210,211,212,213,214,218,220,229,237,238,239,240,241,242,244,245,246,248,249,251,252,254,256,257,259,261,262,263,265,266,268,270,271,272,274,275,276,],[-122,12,-3,-4,-5,-2,-122,-122,75,-29,-30,-31,-32,-33,-43,105,-10,-11,-25,-14,-26,-27,-28,-34,-35,-9,-13,-65,-66,-67,-109,-122,-39,-41,-68,246,-36,-37,-38,-40,-42,-122,-122,-110,254,-115,-118,-121,-122,-122,-120,-114,265,-122,-113,-119,268,-112,-122,-122,275,-117,-122,-116,]),'K_INTEGER':([9,13,14,22,23,30,33,36,38,42,43,44,45,46,49,60,61,62,74,75,76,78,80,82,83,104,175,210,211,212,213,214,218,220,228,229,237,238,239,240,241,242,244,245,246,248,249,250,251,252,254,256,257,258,259,261,262,263,265,266,268,269,270,271,272,273,274,275,276,],[-122,17,-12,17,17,17,17,17,17,-29,-30,-31,-32,-33,-43,17,17,-11,17,-14,-26,-27,-28,-34,-35,17,17,-65,-66,-67,-109,17,-39,-41,17,-68,17,-36,-37,-38,-40,-42,17,-122,-110,17,-115,17,-118,-121,-122,17,-120,17,-114,17,17,-113,-119,17,-112,17,17,-122,17,17,-117,-122,-116,]),'K_DOUBLE':([9,13,14,22,23,30,33,36,38,42,43,44,45,46,49,60,61,62,74,75,76,78,80,82,83,104,175,210,211,212,213,214,218,220,228,229,237,238,239,240,241,242,244,245,246,248,249,250,251,252,254,256,257,258,259,261,262,263,265,266,268,269,270,271,272,273,274,275,276,],[-122,18,-12,18,18,18,18,18,18,-29,-30,-31,-32,-33,-43,18,18,-11,18,-14,-26,-27,-28,-34,-35,18,18,-65,-66,-67,-109,18,-39,-41,18,-68,18,-36,-37,-38,-40,-42,18,-122,-110,18,-115,18,-118,-121,-122,18,-120,18,-114,18,18,-113,-119,18,-112,18,18,-122,18,18,-117,-122,-116,]),'K_STRING':([9,13,14,22,23,30,33,36,38,42,43,44,45,46,49,60,61,62,74,75,76,78,80,82,83,104,175,210,211,212,213,214,218,220,228,229,237,238,239,240,241,242,244,245,246,248,249,250,251,252,254,256,257,258,259,261,262,263,265,266,268,269,270,271,272,273,274,275,276,],[-122,19,-12,19,19,19,19,19,19,-29,-30,-31,-32,-33,-43,19,19,-11,19,-14,-26,-27,-28,-34,-35,19,19,-65,-66,-67,-109,19,-39,-41,19,-68,19,-36,-37,-38,-40,-42,19,-122,-110,19,-115,19,-118,-121,-122,19,-120,19,-114,19,19,-113,-119,19,-112,19,19,-122,19,19,-117,-122,-116,]),'LPAREN':([17,18,19,20,21,37,50,51,52,53,54,55,56,57,63,65,66,67,68,69,70,87,88,93,95,103,106,115,133,135,137,145,150,152,153,155,156,157,158,176,177,178,179,180,181,182,183,184,185,186,187,188,202,208,255,260,],[-6,-7,-8,22,23,71,87,90,91,92,93,94,95,96,87,87,87,87,87,87,87,87,137,87,87,71,71,158,87,158,87,71,87,87,87,87,87,87,87,87,-96,-97,-98,-99,-100,-101,-102,-103,-104,87,87,87,87,87,260,87,]),'MINUS':([17,18,19,50,63,65,66,67,68,69,70,85,87,89,93,95,106,110,111,112,113,114,115,116,133,134,135,136,137,145,150,152,153,155,156,157,158,159,170,171,176,177,178,179,180,181,182,183,184,185,186,187,188,192,196,197,198,199,200,201,202,207,208,209,231,232,235,260,],[-6,-7,-8,88,115,115,115,115,115,115,115,-91,135,-92,115,115,-93,-91,-92,153,-87,-83,88,-93,88,153,88,-87,135,-93,115,135,135,88,88,88,135,-88,-89,153,115,-96,-97,-98,-99,-100,-101,-102,-103,-104,115,115,115,-93,-81,-82,-84,-85,-86,153,115,-94,88,-90,-94,-89,-95,115,]),'ICONSTANT':([17,18,19,50,58,63,65,66,67,68,69,70,71,81,87,90,91,92,93,95,115,131,132,133,135,137,150,151,152,153,155,156,157,158,160,162,164,165,176,177,178,179,180,181,182,183,184,185,186,187,188,189,194,202,208,260,],[-6,-7,-8,85,100,110,85,85,85,85,85,85,100,100,85,100,100,100,85,85,85,166,100,85,85,85,110,100,85,85,85,85,85,85,100,100,100,205,85,-96,-97,-98,-99,-100,-101,-102,-103,-104,85,85,85,227,205,85,85,85,]),'DCONSTANT':([17,18,19,50,58,63,65,66,67,68,69,70,71,81,87,90,91,92,93,95,115,131,132,133,135,137,150,151,152,153,155,156,157,158,160,162,164,176,177,178,179,180,181,182,183,184,185,186,187,188,202,208,260,],[-6,-7,-8,89,101,111,89,89,89,89,89,89,101,101,89,101,101,101,89,89,89,101,101,89,89,89,111,101,89,89,89,89,89,89,101,101,101,89,-96,-97,-98,-99,-100,-101,-102,-103,-104,89,89,89,89,89,89,]),'RPAREN':([22,23,24,25,27,28,30,31,34,59,71,72,73,85,89,100,101,102,112,113,114,116,123,124,125,126,134,136,138,139,140,141,142,148,149,154,159,164,170,171,196,197,198,199,200,201,203,207,209,223,224,225,230,232,235,253,264,],[-122,-122,29,-18,-24,32,-122,-15,-17,-16,-122,-77,-78,-91,-92,-19,-20,-21,-79,-87,-83,-93,-22,163,-70,-71,170,-87,172,173,174,175,-108,190,191,-80,-88,-122,-89,209,-81,-82,-84,-85,-86,232,-69,-94,-90,-107,-105,-106,-23,-89,-95,258,267,]),'COMMA':([22,23,24,25,27,28,30,31,34,39,40,59,64,71,72,73,84,85,86,89,100,101,102,106,107,108,109,110,111,112,113,114,116,118,119,120,121,122,123,124,125,126,127,128,129,130,136,154,159,163,164,168,169,170,196,197,198,199,200,203,204,206,207,209,215,216,230,231,232,233,234,235,236,],[-122,-122,30,-18,-24,30,-122,-15,30,77,79,-16,-52,-122,-77,-78,-44,-91,133,-92,-19,-20,-21,-22,-51,-53,-56,-19,-20,-79,-87,-83,-93,-57,-58,-59,-60,-61,-22,164,-70,-71,-49,-50,-64,-62,-87,-80,-88,-72,-122,-63,208,-89,-81,-82,-84,-85,-86,164,-45,-46,-94,-90,77,79,-23,-23,-89,-54,-55,-95,-47,]),'LBRACKET':([31,37,84,103,106,116,123,127,145,165,192,194,],[35,65,131,150,151,160,162,65,160,162,151,162,]),'K_PRINT_INTEGER':([33,36,38,42,43,44,45,46,49,60,61,62,74,75,76,78,80,82,83,104,175,210,211,212,213,214,218,220,228,229,237,238,239,240,241,242,244,245,246,248,249,250,251,252,254,256,257,258,259,261,262,263,265,266,268,269,270,271,272,273,274,275,276,],[51,51,51,-29,-30,-31,-32,-33,-43,51,51,-11,51,-14,-26,-27,-28,-34,-35,51,51,-65,-66,-67,-109,51,-39,-41,51,-68,51,-36,-37,-38,-40,-42,51,-122,-110,51,-115,51,-118,-121,-122,51,-120,51,-114,51,51,-113,-119,51,-112,51,51,-122,51,51,-117,-122,-116,]),'K_PRINT_STRING':([33,36,38,42,43,44,45,46,49,60,61,62,74,75,76,78,80,82,83,104,175,210,211,212,213,214,218,220,228,229,237,238,239,240,241,242,244,245,246,248,249,250,251,252,254,256,257,258,259,261,262,263,265,266,268,269,270,271,272,273,274,275,276,],[52,52,52,-29,-30,-31,-32,-33,-43,52,52,-11,52,-14,-26,-27,-28,-34,-35,52,52,-65,-66,-67,-109,52,-39,-41,52,-68,52,-36,-37,-38,-40,-42,52,-122,-110,52,-115,52,-118,-121,-122,52,-120,52,-114,52,52,-113,-119,52,-112,52,52,-122,52,52,-117,-122,-116,]),'K_PRINT_DOUBLE':([33,36,38,42,43,44,45,46,49,60,61,62,74,75,76,78,80,82,83,104,175,210,211,212,213,214,218,220,228,229,237,238,239,240,241,242,244,245,246,248,249,250,251,252,254,256,257,258,259,261,262,263,265,266,268,269,270,271,272,273,274,275,276,],[53,53,53,-29,-30,-31,-32,-33,-43,53,53,-11,53,-14,-26,-27,-28,-34,-35,53,53,-65,-66,-67,-109,53,-39,-41,53,-68,53,-36,-37,-38,-40,-42,53,-122,-110,53,-115,53,-118,-121,-122,53,-120,53,-114,53,53,-113,-119,53,-112,53,53,-122,53,53,-117,-122,-116,]),'K_WHILE':([33,36,38,42,43,44,45,46,49,60,61,62,74,75,76,78,80,82,83,104,210,211,212,213,214,218,220,229,237,238,239,240,241,242,244,245,246,248,249,251,252,254,256,257,259,261,262,263,265,266,268,270,271,272,274,275,276,],[54,54,54,-29,-30,-31,-32,-33,-43,54,54,-11,54,-14,-26,-27,-28,-34,-35,54,-65,-66,-67,-109,54,-39,-41,-68,54,-36,-37,-38,-40,-42,54,-122,-110,54,-115,-118,-121,-122,54,-120,-114,54,54,-113,-119,54,-112,54,-122,54,-117,-122,-116,]),'K_DO':([33,36,38,42,43,44,45,46,49,60,61,62,74,75,76,78,80,82,83,104,210,211,212,213,214,218,220,229,237,238,239,240,241,242,244,245,246,248,249,251,252,254,256,257,259,261,262,263,265,266,268,270,271,272,274,275,276,],[55,55,55,-29,-30,-31,-32,-33,-43,55,55,-11,55,-14,-26,-27,-28,-34,-35,55,-65,-66,-67,-109,55,-39,-41,-68,55,-36,-37,-38,-40,-42,55,-122,-110,55,-115,-118,-121,-122,55,-120,-114,55,55,-113,-119,55,-112,55,-122,55,-117,-122,-116,]),'K_IF':([33,36,38,42,43,44,45,46,49,60,61,62,74,75,76,78,80,82,83,104,210,211,212,213,214,218,220,229,237,238,239,240,241,242,244,245,246,248,249,250,251,252,254,256,257,259,261,262,263,265,266,268,270,271,272,274,275,276,],[56,56,56,-29,-30,-31,-32,-33,-43,56,56,-11,56,-14,-26,-27,-28,-34,-35,56,-65,-66,-67,-109,56,-39,-41,-68,56,-36,-37,-38,-40,-42,56,-122,-110,56,-115,255,-118,-121,-122,56,-120,-114,56,56,-113,-119,56,-112,56,-122,56,-117,-122,-116,]),'K_READ_INTEGER':([33,36,38,42,43,44,45,46,49,60,61,62,74,75,76,78,80,82,83,104,175,210,211,212,213,214,218,220,228,229,237,238,239,240,241,242,244,245,246,248,249,250,251,252,254,256,257,258,259,261,262,263,265,266,268,269,270,271,272,273,274,275,276,],[57,57,57,-29,-30,-31,-32,-33,-43,57,57,-11,57,-14,-26,-27,-28,-34,-35,57,57,-65,-66,-67,-109,57,-39,-41,57,-68,57,-36,-37,-38,-40,-42,57,-122,-110,57,-115,57,-118,-121,-122,57,-120,57,-114,57,57,-113,-119,57,-112,57,57,-122,57,57,-117,-122,-116,]),'K_RETURN':([33,36,38,42,43,44,45,46,49,60,61,62,74,75,76,78,80,82,83,104,175,210,211,212,213,214,218,220,228,229,237,238,239,240,241,242,244,245,246,248,249,250,251,252,254,256,257,258,259,261,262,263,265,266,268,269,270,271,272,273,274,275,276,],[58,58,58,-29,-30,-31,-32,-33,-43,58,58,-11,58,-14,-26,-27,-28,-34,-35,58,58,-65,-66,-67,-109,58,-39,-41,58,-68,58,-36,-37,-38,-40,-42,58,-122,-110,58,-115,58,-118,-121,-122,58,-120,58,-114,58,58,-113,-119,58,-112,58,58,-122,58,58,-117,-122,-116,]),'SEMI':([33,36,38,39,40,41,42,43,44,45,46,47,48,49,60,61,62,64,72,73,74,75,76,78,80,82,83,84,85,89,97,98,99,100,101,102,103,104,106,107,108,109,110,111,112,113,114,116,118,119,120,121,122,123,127,128,129,130,136,146,154,159,163,168,169,170,172,173,174,175,191,196,197,198,199,200,204,206,207,209,210,211,212,213,214,215,216,217,218,219,220,221,222,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,244,245,246,248,249,250,251,252,254,256,257,258,259,261,262,263,265,266,268,269,270,271,272,273,274,275,276,],[-122,-122,-122,76,78,80,-29,-30,-31,-32,-33,82,83,-43,-122,-10,-11,-52,-77,-78,-25,-14,-26,-27,-28,-34,-35,-44,-91,-92,-73,-75,-76,-19,-20,-21,-22,-9,-22,-51,-53,-56,-19,-20,-79,-87,-83,-93,-57,-58,-59,-60,-61,-22,-49,-50,-64,-62,-87,188,-80,-88,-72,-63,-48,-89,210,211,212,-122,229,-81,-82,-84,-85,-86,-45,-46,-94,-90,-65,-66,-67,-109,-122,238,239,240,-39,241,-41,242,-74,-105,-106,243,-111,-122,-68,-23,-23,-89,-54,-55,-95,-47,-122,-36,-37,-38,-40,-42,-122,-122,-110,-122,-115,-122,-118,-121,-122,-122,-120,-122,-114,-122,-122,-113,-119,-122,-112,-122,-122,-122,-122,-122,-117,-122,-116,]),'RBRACKET':([35,72,73,85,89,100,101,102,110,111,112,113,114,116,117,123,136,154,159,165,166,167,170,192,193,194,195,196,197,198,199,200,205,207,209,230,231,232,235,],[59,-77,-78,-91,-92,-19,-20,-21,-19,-20,-79,-87,-83,-93,161,-22,-87,-80,-88,204,206,207,-89,-22,230,-22,231,-81,-82,-84,-85,-86,235,-94,-90,-23,-23,-89,-95,]),'ASSIGN':([37,41,64,72,73,84,85,89,99,100,101,102,103,106,107,108,109,110,111,112,113,114,116,118,119,120,121,122,123,127,128,130,136,147,154,159,161,163,170,196,197,198,199,200,207,209,217,230,231,232,233,234,235,],[63,81,-52,-77,-78,132,-91,-92,81,-19,-20,-21,63,-22,-51,-53,-56,-19,-20,-79,-87,-83,-93,-57,-58,-59,-60,-61,-22,63,81,-62,-87,189,-80,-88,202,-72,-89,-81,-82,-84,-85,-86,-94,-90,81,-23,-23,-89,-54,-55,-95,]),'ASSIGN_PLUS':([37,103,127,],[66,66,66,]),'ASSIGN_MINUS':([37,103,127,],[67,67,67,]),'ASSIGN_MULTIPLY':([37,103,127,],[68,68,68,]),'ASSIGN_DIVIDE':([37,103,127,],[69,69,69,]),'ASSIGN_MOD':([37,103,127,],[70,70,70,]),'INCREMENT':([37,85,89,103,106,110,111,113,116,127,145,170,192,207,231,232,235,247,],[72,-91,-92,72,-93,-91,-92,72,-93,72,-93,-89,-93,-94,-94,-90,-95,72,]),'DECREMENT':([37,85,89,103,106,110,111,113,116,127,145,170,192,207,231,232,235,247,],[73,-91,-92,73,-93,-91,-92,73,-93,73,-93,-89,-93,-94,-94,-90,-95,73,]),'SCONSTANT':([58,63,71,81,90,91,92,131,132,150,151,160,162,164,202,],[102,102,102,102,102,102,102,102,102,102,102,102,102,102,234,]),'DAND':([72,73,85,89,112,113,114,116,136,142,143,144,145,154,159,163,170,196,197,198,199,200,207,209,224,225,232,235,],[-77,-78,-91,-92,-79,-87,-83,-93,-87,177,177,177,-93,-80,-88,-72,-89,-81,-82,-84,-85,-86,-94,-90,-105,-106,-89,-95,]),'DOR':([72,73,85,89,112,113,114,116,136,142,143,144,145,154,159,163,170,196,197,198,199,200,207,209,224,225,232,235,],[-77,-78,-91,-92,-79,-87,-83,-93,-87,178,178,178,-93,-80,-88,-72,-89,-81,-82,-84,-85,-86,-94,-90,-105,-106,-89,-95,]),'DEQ':([72,73,85,89,112,113,114,116,136,142,143,144,145,154,159,163,170,196,197,198,199,200,207,209,224,225,232,235,],[-77,-78,-91,-92,-79,-87,-83,-93,-87,179,179,179,-93,-80,-88,-72,-89,-81,-82,-84,-85,-86,-94,-90,-105,-106,-89,-95,]),'GEQ':([72,73,85,89,112,113,114,116,136,142,143,144,145,154,159,163,170,196,197,198,199,200,207,209,224,225,232,235,],[-77,-78,-91,-92,-79,-87,-83,-93,-87,180,180,180,-93,-80,-88,-72,-89,-81,-82,-84,-85,-86,-94,-90,-105,-106,-89,-95,]),'GT':([72,73,85,89,112,113,114,116,136,142,143,144,145,154,159,163,170,196,197,198,199,200,207,209,224,225,232,235,],[-77,-78,-91,-92,-79,-87,-83,-93,-87,181,181,181,-93,-80,-88,-72,-89,-81,-82,-84,-85,-86,-94,-90,-105,-106,-89,-95,]),'LEQ':([72,73,85,89,112,113,114,116,136,142,143,144,145,154,159,163,170,196,197,198,199,200,207,209,224,225,232,235,],[-77,-78,-91,-92,-79,-87,-83,-93,-87,182,182,182,-93,-80,-88,-72,-89,-81,-82,-84,-85,-86,-94,-90,-105,-106,-89,-95,]),'LT':([72,73,85,89,112,113,114,116,136,142,143,144,145,154,159,163,170,196,197,198,199,200,207,209,224,225,232,235,],[-77,-78,-91,-92,-79,-87,-83,-93,-87,183,183,183,-93,-80,-88,-72,-89,-81,-82,-84,-85,-86,-94,-90,-105,-106,-89,-95,]),'NE':([72,73,85,89,112,113,114,116,136,142,143,144,145,154,159,163,170,196,197,198,199,200,207,209,224,225,232,235,],[-77,-78,-91,-92,-79,-87,-83,-93,-87,184,184,184,-93,-80,-88,-72,-89,-81,-82,-84,-85,-86,-94,-90,-105,-106,-89,-95,]),'NOT':([72,73,85,89,112,113,114,116,136,142,143,144,145,154,159,163,170,196,197,198,199,200,207,209,224,225,232,235,],[-77,-78,-91,-92,-79,-87,-83,-93,-87,185,185,185,-93,-80,-88,-72,-89,-81,-82,-84,-85,-86,-94,-90,-105,-106,-89,-95,]),'TIMES':([85,89,106,110,111,113,114,116,136,145,159,170,192,196,197,198,199,200,207,209,231,232,235,],[-91,-92,-93,-91,-92,-87,155,-93,-87,-93,-88,-89,-93,155,155,-84,-85,-86,-94,-90,-94,-89,-95,]),'DIVIDE':([85,89,106,110,111,113,114,116,136,145,159,170,192,196,197,198,199,200,207,209,231,232,235,],[-91,-92,-93,-91,-92,-87,156,-93,-87,-93,-88,-89,-93,156,156,-84,-85,-86,-94,-90,-94,-89,-95,]),'MOD':([85,89,106,110,111,113,114,116,136,145,159,170,192,196,197,198,199,200,207,209,231,232,235,],[-91,-92,-93,-91,-92,-87,157,-93,-87,-93,-88,-89,-93,157,157,-84,-85,-86,-94,-90,-94,-89,-95,]),'PLUS':([85,89,106,110,111,112,113,114,116,134,136,145,159,170,171,192,196,197,198,199,200,201,207,209,231,232,235,],[-91,-92,-93,-91,-92,152,-87,-83,-93,152,-87,-93,-88,-89,152,-93,-81,-82,-84,-85,-86,152,-94,-90,-94,-89,-95,]),'K_THEN':([190,267,],[228,269,]),'K_ELSE':([210,211,212,218,220,229,238,239,240,241,242,245,254,271,275,],[-65,-66,-67,-39,-41,-68,-36,-37,-38,-40,-42,250,250,273,273,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'program_body':([4,5,11,],[5,11,11,]),'function':([4,5,11,],[6,6,6,]),'procedure':([4,5,11,36,60,104,],[7,7,7,62,62,62,]),'epsilon':([4,5,9,10,11,22,23,30,33,36,38,60,61,71,74,104,164,175,214,228,237,244,245,248,250,254,256,258,261,262,266,269,270,271,272,273,275,],[8,8,14,14,8,27,27,27,49,49,49,49,49,126,49,49,126,222,49,222,49,49,252,49,222,252,49,222,49,49,49,222,49,252,49,222,252,]),'scope':([9,10,],[13,15,]),'type':([13,22,23,30,33,36,38,60,61,74,104,175,214,228,237,244,248,250,256,258,261,262,266,269,270,272,273,],[16,26,26,26,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'parameter_list':([22,23,30,],[24,28,34,]),'parameter':([22,23,30,],[25,25,25,]),'statements':([33,36,38,60,61,74,104,214,237,244,248,256,261,262,266,270,272,],[38,61,74,61,74,74,61,237,74,248,74,261,74,266,74,272,74,]),'declare':([33,36,38,60,61,74,104,175,214,228,237,244,248,250,256,258,261,262,266,269,270,272,273,],[39,39,39,39,39,39,39,215,39,215,39,39,39,215,39,215,39,39,39,215,39,39,215,]),'declare_assign':([33,36,38,60,61,74,104,175,214,228,237,244,248,250,256,258,261,262,266,269,270,272,273,],[40,40,40,40,40,40,40,216,40,216,40,40,40,216,40,216,40,40,40,216,40,40,216,]),'assign':([33,36,38,58,60,61,74,77,104,175,214,228,237,244,248,250,256,258,261,262,266,269,270,272,273,],[41,41,41,99,41,41,41,128,41,217,41,217,41,41,41,217,41,217,41,41,41,217,41,41,217,]),'print':([33,36,38,60,61,74,104,175,214,228,237,244,248,250,256,258,261,262,266,269,270,272,273,],[42,42,42,42,42,42,42,218,42,218,42,42,42,218,42,218,42,42,42,218,42,42,218,]),'while':([33,36,38,60,61,74,104,214,237,244,248,256,261,262,266,270,272,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'do':([33,36,38,60,61,74,104,214,237,244,248,256,261,262,266,270,272,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'if':([33,36,38,60,61,74,104,214,237,244,248,256,261,262,266,270,272,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'read':([33,36,38,60,61,74,104,175,214,228,237,244,248,250,256,258,261,262,266,269,270,272,273,],[46,46,46,46,46,46,46,220,46,220,46,46,46,220,46,220,46,46,46,220,46,46,220,]),'function_call':([33,36,38,58,60,61,63,74,93,95,104,175,176,188,214,228,237,244,248,250,256,258,260,261,262,266,269,270,272,273,],[47,47,47,98,47,47,109,47,144,144,47,219,144,144,47,219,47,47,47,219,47,219,144,47,47,47,219,47,47,219,]),'return':([33,36,38,60,61,74,104,175,214,228,237,244,248,250,256,258,261,262,266,269,270,272,273,],[48,48,48,48,48,48,48,221,48,221,48,48,48,221,48,221,48,48,48,221,48,48,221,]),'function_statements':([36,60,104,],[60,104,104,]),'inc_dec':([37,103,113,127,247,],[64,64,154,64,253,]),'factor':([50,63,65,66,67,68,69,70,87,93,95,115,133,135,137,150,152,153,155,156,157,158,176,186,187,188,202,208,260,],[86,113,113,113,113,113,113,113,136,113,113,159,169,159,136,113,136,136,198,199,200,136,113,113,113,113,113,236,113,]),'value':([58,63,71,81,90,91,92,131,132,150,151,160,162,164,],[97,107,125,130,138,139,140,167,168,193,195,167,193,125,]),'math':([63,65,66,67,68,69,70,93,95,150,176,186,187,188,202,260,],[108,117,118,119,120,121,122,143,143,117,143,224,225,143,233,143,]),'expression':([63,65,66,67,68,69,70,87,93,95,137,150,158,176,186,187,188,202,260,],[112,112,112,112,112,112,112,134,112,112,171,112,201,112,112,112,112,112,112,]),'term':([63,65,66,67,68,69,70,87,93,95,137,150,152,153,158,176,186,187,188,202,260,],[114,114,114,114,114,114,114,114,114,114,114,114,196,197,114,114,114,114,114,114,114,]),'arguments':([71,164,],[124,203,]),'bool':([93,95,260,],[141,148,264,]),'condition':([93,95,176,188,260,],[142,142,223,226,142,]),'do_assign':([94,],[146,]),'bool_op':([142,143,144,],[176,186,187,]),'statement':([175,228,250,258,269,273,],[213,245,257,263,271,257,]),'else_if':([245,254,],[249,259,]),'else':([245,254,271,275,],[251,251,274,276,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> K_PROGRAM ID LCURLY program_body RCURLY','program',5,'p_program','yaccf23.py',19),
  ('program_body -> program_body program_body','program_body',2,'p_program_body','yaccf23.py',26),
  ('program_body -> function','program_body',1,'p_program_body_fp','yaccf23.py',30),
  ('program_body -> procedure','program_body',1,'p_program_body_fp','yaccf23.py',31),
  ('program_body -> epsilon','program_body',1,'p_program_body_empty','yaccf23.py',35),
  ('type -> K_INTEGER','type',1,'p_type','yaccf23.py',39),
  ('type -> K_DOUBLE','type',1,'p_type','yaccf23.py',40),
  ('type -> K_STRING','type',1,'p_type','yaccf23.py',41),
  ('function_statements -> function_statements function_statements','function_statements',2,'p_function_statements','yaccf23.py',45),
  ('function_statements -> statements','function_statements',1,'p_function_statements_fp','yaccf23.py',49),
  ('function_statements -> procedure','function_statements',1,'p_function_statements_fp','yaccf23.py',50),
  ('scope -> epsilon','scope',1,'p_scope','yaccf23.py',54),
  ('function -> K_FUNCTION scope type ID LPAREN parameter_list RPAREN LCURLY function_statements RCURLY','function',10,'p_function','yaccf23.py',58),
  ('procedure -> K_PROCEDURE scope ID LPAREN parameter_list RPAREN LCURLY statements RCURLY','procedure',9,'p_procedure','yaccf23.py',64),
  ('parameter -> type ID','parameter',2,'p_parameter','yaccf23.py',72),
  ('parameter -> type ID LBRACKET RBRACKET','parameter',4,'p_parameter','yaccf23.py',73),
  ('parameter_list -> parameter_list COMMA parameter_list','parameter_list',3,'p_parameter_list','yaccf23.py',83),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','yaccf23.py',84),
  ('value -> ICONSTANT','value',1,'p_value','yaccf23.py',91),
  ('value -> DCONSTANT','value',1,'p_value','yaccf23.py',92),
  ('value -> SCONSTANT','value',1,'p_value','yaccf23.py',93),
  ('value -> ID','value',1,'p_value','yaccf23.py',94),
  ('value -> ID LBRACKET value RBRACKET','value',4,'p_value','yaccf23.py',95),
  ('parameter -> epsilon','parameter',1,'p_parameter_empty','yaccf23.py',102),
  ('statements -> statements statements','statements',2,'p_statements','yaccf23.py',106),
  ('statements -> declare SEMI','statements',2,'p_statements_dapf','yaccf23.py',110),
  ('statements -> declare_assign SEMI','statements',2,'p_statements_dapf','yaccf23.py',111),
  ('statements -> assign SEMI','statements',2,'p_statements_dapf','yaccf23.py',112),
  ('statements -> print','statements',1,'p_statements_dapf','yaccf23.py',113),
  ('statements -> while','statements',1,'p_statements_dapf','yaccf23.py',114),
  ('statements -> do','statements',1,'p_statements_dapf','yaccf23.py',115),
  ('statements -> if','statements',1,'p_statements_dapf','yaccf23.py',116),
  ('statements -> read','statements',1,'p_statements_dapf','yaccf23.py',117),
  ('statements -> function_call SEMI','statements',2,'p_statements_dapf','yaccf23.py',118),
  ('statements -> return SEMI','statements',2,'p_statements_dapf','yaccf23.py',119),
  ('statement -> declare SEMI','statement',2,'p_statement_dapf','yaccf23.py',123),
  ('statement -> declare_assign SEMI','statement',2,'p_statement_dapf','yaccf23.py',124),
  ('statement -> assign SEMI','statement',2,'p_statement_dapf','yaccf23.py',125),
  ('statement -> print','statement',1,'p_statement_dapf','yaccf23.py',126),
  ('statement -> function_call SEMI','statement',2,'p_statement_dapf','yaccf23.py',127),
  ('statement -> read','statement',1,'p_statement_dapf','yaccf23.py',128),
  ('statement -> return SEMI','statement',2,'p_statement_dapf','yaccf23.py',129),
  ('statements -> epsilon','statements',1,'p_statements_empty','yaccf23.py',133),
  ('declare -> type ID','declare',2,'p_declare','yaccf23.py',138),
  ('declare -> type ID LBRACKET ID RBRACKET','declare',5,'p_declare','yaccf23.py',139),
  ('declare -> type ID LBRACKET ICONSTANT RBRACKET','declare',5,'p_declare_array_iconstant','yaccf23.py',148),
  ('declare -> type factor COMMA factor COMMA factor','declare',6,'p_declare_comma_array','yaccf23.py',153),
  ('declare -> type factor COMMA factor','declare',4,'p_declare_comma_array','yaccf23.py',154),
  ('declare -> declare COMMA ID','declare',3,'p_declare_comma_id','yaccf23.py',168),
  ('declare -> declare COMMA assign','declare',3,'p_declare_comma_assign','yaccf23.py',173),
  ('assign -> ID ASSIGN value','assign',3,'p_assign','yaccf23.py',178),
  ('assign -> ID inc_dec','assign',2,'p_assign','yaccf23.py',179),
  ('assign -> ID ASSIGN math','assign',3,'p_assign','yaccf23.py',180),
  ('assign -> ID LBRACKET math RBRACKET ASSIGN math','assign',6,'p_assign','yaccf23.py',181),
  ('assign -> ID LBRACKET math RBRACKET ASSIGN SCONSTANT','assign',6,'p_assign_array_string','yaccf23.py',202),
  ('assign -> ID ASSIGN function_call','assign',3,'p_assign_func_call','yaccf23.py',207),
  ('assign -> ID ASSIGN_PLUS math','assign',3,'p_assign_math','yaccf23.py',212),
  ('assign -> ID ASSIGN_MINUS math','assign',3,'p_assign_math','yaccf23.py',213),
  ('assign -> ID ASSIGN_MULTIPLY math','assign',3,'p_assign_math','yaccf23.py',214),
  ('assign -> ID ASSIGN_DIVIDE math','assign',3,'p_assign_math','yaccf23.py',215),
  ('assign -> ID ASSIGN_MOD math','assign',3,'p_assign_math','yaccf23.py',216),
  ('assign -> assign ASSIGN value','assign',3,'p_multiple_assign','yaccf23.py',224),
  ('declare_assign -> type ID ASSIGN value','declare_assign',4,'p_declare_assign','yaccf23.py',232),
  ('declare_assign -> declare_assign COMMA ID','declare_assign',3,'p_declare_assign_array_dec','yaccf23.py',238),
  ('print -> K_PRINT_INTEGER LPAREN value RPAREN SEMI','print',5,'p_print','yaccf23.py',245),
  ('print -> K_PRINT_STRING LPAREN value RPAREN SEMI','print',5,'p_print','yaccf23.py',246),
  ('print -> K_PRINT_DOUBLE LPAREN value RPAREN SEMI','print',5,'p_print','yaccf23.py',247),
  ('read -> K_READ_INTEGER LPAREN ID RPAREN SEMI','read',5,'p_read','yaccf23.py',251),
  ('arguments -> arguments COMMA arguments','arguments',3,'p_arguments','yaccf23.py',255),
  ('arguments -> value','arguments',1,'p_argument','yaccf23.py',259),
  ('arguments -> epsilon','arguments',1,'p_arguments_empty','yaccf23.py',263),
  ('function_call -> ID LPAREN arguments RPAREN','function_call',4,'p_function_call','yaccf23.py',267),
  ('return -> K_RETURN value','return',2,'p_return','yaccf23.py',272),
  ('return -> epsilon','return',1,'p_return_empty','yaccf23.py',276),
  ('return -> K_RETURN function_call','return',2,'p_return_func_call','yaccf23.py',280),
  ('return -> K_RETURN assign','return',2,'p_return_assign','yaccf23.py',284),
  ('inc_dec -> INCREMENT','inc_dec',1,'p_inc_dec','yaccf23.py',289),
  ('inc_dec -> DECREMENT','inc_dec',1,'p_inc_dec','yaccf23.py',290),
  ('math -> expression','math',1,'p_math','yaccf23.py',294),
  ('math -> factor inc_dec','math',2,'p_math','yaccf23.py',295),
  ('expression -> expression PLUS term','expression',3,'p_expression','yaccf23.py',306),
  ('expression -> expression MINUS term','expression',3,'p_expression','yaccf23.py',307),
  ('expression -> term','expression',1,'p_expression_term','yaccf23.py',316),
  ('term -> term TIMES factor','term',3,'p_term','yaccf23.py',320),
  ('term -> term DIVIDE factor','term',3,'p_term','yaccf23.py',321),
  ('term -> term MOD factor','term',3,'p_term','yaccf23.py',322),
  ('term -> factor','term',1,'p_term_factor','yaccf23.py',330),
  ('term -> MINUS factor','term',2,'p_term_factor','yaccf23.py',331),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_expr','yaccf23.py',338),
  ('factor -> MINUS LPAREN expression RPAREN','factor',4,'p_factor_expr','yaccf23.py',339),
  ('factor -> ICONSTANT','factor',1,'p_factor_num','yaccf23.py',350),
  ('factor -> DCONSTANT','factor',1,'p_factor_num','yaccf23.py',351),
  ('factor -> ID','factor',1,'p_factor_id','yaccf23.py',355),
  ('factor -> ID LBRACKET value RBRACKET','factor',4,'p_factor_array','yaccf23.py',363),
  ('factor -> ID LBRACKET ID ICONSTANT RBRACKET','factor',5,'p_factor_array_math','yaccf23.py',368),
  ('bool_op -> DAND','bool_op',1,'p_bool_op','yaccf23.py',373),
  ('bool_op -> DOR','bool_op',1,'p_bool_op','yaccf23.py',374),
  ('bool_op -> DEQ','bool_op',1,'p_bool_op','yaccf23.py',375),
  ('bool_op -> GEQ','bool_op',1,'p_bool_op','yaccf23.py',376),
  ('bool_op -> GT','bool_op',1,'p_bool_op','yaccf23.py',377),
  ('bool_op -> LEQ','bool_op',1,'p_bool_op','yaccf23.py',378),
  ('bool_op -> LT','bool_op',1,'p_bool_op','yaccf23.py',379),
  ('bool_op -> NE','bool_op',1,'p_bool_op','yaccf23.py',380),
  ('bool_op -> NOT','bool_op',1,'p_bool_op','yaccf23.py',381),
  ('condition -> math bool_op math','condition',3,'p_condition','yaccf23.py',385),
  ('condition -> function_call bool_op math','condition',3,'p_condition_func','yaccf23.py',389),
  ('bool -> condition bool_op condition','bool',3,'p_bool','yaccf23.py',395),
  ('bool -> condition','bool',1,'p_bool','yaccf23.py',396),
  ('while -> K_WHILE LPAREN bool RPAREN statement','while',5,'p_while_statement','yaccf23.py',405),
  ('while -> K_WHILE LPAREN bool RPAREN LCURLY statements RCURLY','while',7,'p_while_statements','yaccf23.py',411),
  ('do_assign -> ID ASSIGN ICONSTANT','do_assign',3,'p_do_assign','yaccf23.py',416),
  ('do -> K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN LCURLY statements RCURLY','do',12,'p_do_statements','yaccf23.py',421),
  ('do -> K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN statement','do',10,'p_do_statement','yaccf23.py',428),
  ('if -> K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else_if','if',9,'p_if_statements','yaccf23.py',435),
  ('if -> K_IF LPAREN bool RPAREN K_THEN statement else_if','if',7,'p_if_statement','yaccf23.py',443),
  ('else_if -> K_ELSE K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else','else_if',10,'p_else_if_statements','yaccf23.py',449),
  ('else_if -> K_ELSE K_IF LPAREN bool RPAREN K_THEN statement else','else_if',8,'p_else_if_statement','yaccf23.py',454),
  ('else_if -> else','else_if',1,'p_else_if','yaccf23.py',459),
  ('else -> K_ELSE LCURLY statements RCURLY','else',4,'p_else_statements','yaccf23.py',463),
  ('else -> K_ELSE statement','else',2,'p_else_statement','yaccf23.py',467),
  ('else -> epsilon','else',1,'p_else_empty','yaccf23.py',471),
  ('epsilon -> <empty>','epsilon',0,'p_epsilon','yaccf23.py',475),
]
