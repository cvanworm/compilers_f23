Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    KEYWORD
    K_EXIT
    K_READ_DOUBLE
    K_READ_STRING
    PERIOD

Grammar

Rule 0     S' -> program
Rule 1     program -> K_PROGRAM ID LCURLY program_body RCURLY
Rule 2     program_body -> program_body program_body
Rule 3     program_body -> function
Rule 4     program_body -> procedure
Rule 5     program_body -> epsilon
Rule 6     type -> K_INTEGER
Rule 7     type -> K_DOUBLE
Rule 8     type -> K_STRING
Rule 9     function_statements -> function_statements function_statements
Rule 10    function_statements -> statements
Rule 11    function_statements -> procedure
Rule 12    scope -> epsilon
Rule 13    function -> K_FUNCTION scope type ID LPAREN parameter_list RPAREN LCURLY function_statements RCURLY
Rule 14    procedure -> K_PROCEDURE scope ID LPAREN parameter_list RPAREN LCURLY statements RCURLY
Rule 15    parameter -> type ID
Rule 16    parameter -> type ID LBRACKET RBRACKET
Rule 17    parameter_list -> parameter_list COMMA parameter_list
Rule 18    parameter_list -> parameter
Rule 19    value -> ICONSTANT
Rule 20    value -> DCONSTANT
Rule 21    value -> SCONSTANT
Rule 22    value -> ID
Rule 23    value -> ID LBRACKET value RBRACKET
Rule 24    parameter -> epsilon
Rule 25    statements -> statements statements
Rule 26    statements -> declare SEMI
Rule 27    statements -> declare_assign SEMI
Rule 28    statements -> assign SEMI
Rule 29    statements -> print
Rule 30    statements -> while
Rule 31    statements -> do
Rule 32    statements -> if
Rule 33    statements -> read
Rule 34    statements -> function_call SEMI
Rule 35    statements -> return SEMI
Rule 36    statement -> declare SEMI
Rule 37    statement -> declare_assign SEMI
Rule 38    statement -> assign SEMI
Rule 39    statement -> print
Rule 40    statement -> function_call SEMI
Rule 41    statement -> read
Rule 42    statement -> return SEMI
Rule 43    statements -> epsilon
Rule 44    declare -> type ID
Rule 45    declare -> type ID LBRACKET ID RBRACKET
Rule 46    declare -> type ID LBRACKET ICONSTANT RBRACKET
Rule 47    declare -> type factor COMMA factor COMMA factor
Rule 48    declare -> type factor COMMA factor
Rule 49    declare -> declare COMMA ID
Rule 50    declare -> declare COMMA assign
Rule 51    assign -> ID ASSIGN value
Rule 52    assign -> ID inc_dec
Rule 53    assign -> ID ASSIGN math
Rule 54    assign -> ID LBRACKET math RBRACKET ASSIGN math
Rule 55    assign -> ID LBRACKET math RBRACKET ASSIGN SCONSTANT
Rule 56    assign -> ID ASSIGN function_call
Rule 57    assign -> ID ASSIGN_PLUS math
Rule 58    assign -> ID ASSIGN_MINUS math
Rule 59    assign -> ID ASSIGN_MULTIPLY math
Rule 60    assign -> ID ASSIGN_DIVIDE math
Rule 61    assign -> ID ASSIGN_MOD math
Rule 62    assign -> assign ASSIGN value
Rule 63    declare_assign -> type ID ASSIGN value
Rule 64    declare_assign -> declare_assign COMMA ID
Rule 65    print -> K_PRINT_INTEGER LPAREN value RPAREN SEMI
Rule 66    print -> K_PRINT_STRING LPAREN value RPAREN SEMI
Rule 67    print -> K_PRINT_DOUBLE LPAREN value RPAREN SEMI
Rule 68    read -> K_READ_INTEGER LPAREN ID RPAREN SEMI
Rule 69    arguments -> arguments COMMA arguments
Rule 70    arguments -> value
Rule 71    arguments -> epsilon
Rule 72    function_call -> ID LPAREN arguments RPAREN
Rule 73    return -> K_RETURN value
Rule 74    return -> epsilon
Rule 75    return -> K_RETURN function_call
Rule 76    return -> K_RETURN assign
Rule 77    inc_dec -> INCREMENT
Rule 78    inc_dec -> DECREMENT
Rule 79    math -> expression
Rule 80    math -> factor inc_dec
Rule 81    expression -> expression PLUS term
Rule 82    expression -> expression MINUS term
Rule 83    expression -> term
Rule 84    term -> term TIMES factor
Rule 85    term -> term DIVIDE factor
Rule 86    term -> term MOD factor
Rule 87    term -> factor
Rule 88    term -> MINUS factor
Rule 89    factor -> LPAREN expression RPAREN
Rule 90    factor -> MINUS LPAREN expression RPAREN
Rule 91    factor -> ICONSTANT
Rule 92    factor -> DCONSTANT
Rule 93    factor -> ID
Rule 94    factor -> ID LBRACKET value RBRACKET
Rule 95    factor -> ID LBRACKET ID ICONSTANT RBRACKET
Rule 96    bool_op -> DAND
Rule 97    bool_op -> DOR
Rule 98    bool_op -> DEQ
Rule 99    bool_op -> GEQ
Rule 100   bool_op -> GT
Rule 101   bool_op -> LEQ
Rule 102   bool_op -> LT
Rule 103   bool_op -> NE
Rule 104   bool_op -> NOT
Rule 105   condition -> math bool_op math
Rule 106   condition -> function_call bool_op math
Rule 107   bool -> condition bool_op condition
Rule 108   bool -> condition
Rule 109   while -> K_WHILE LPAREN bool RPAREN statement
Rule 110   while -> K_WHILE LPAREN bool RPAREN LCURLY statements RCURLY
Rule 111   do_assign -> ID ASSIGN ICONSTANT
Rule 112   do -> K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN LCURLY statements RCURLY
Rule 113   do -> K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN statement
Rule 114   if -> K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else_if
Rule 115   if -> K_IF LPAREN bool RPAREN K_THEN statement else_if
Rule 116   else_if -> K_ELSE K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else
Rule 117   else_if -> K_ELSE K_IF LPAREN bool RPAREN K_THEN statement else
Rule 118   else_if -> else
Rule 119   else -> K_ELSE LCURLY statements RCURLY
Rule 120   else -> K_ELSE statement
Rule 121   else -> epsilon
Rule 122   epsilon -> <empty>

Terminals, with rules where they appear

ASSIGN               : 51 53 54 55 56 62 63 111
ASSIGN_DIVIDE        : 60
ASSIGN_MINUS         : 58
ASSIGN_MOD           : 61
ASSIGN_MULTIPLY      : 59
ASSIGN_PLUS          : 57
COMMA                : 17 47 47 48 49 50 64 69
COMMENT              : 
DAND                 : 96
DCONSTANT            : 20 92
DECREMENT            : 78
DEQ                  : 98
DIVIDE               : 85
DOR                  : 97
GEQ                  : 99
GT                   : 100
ICONSTANT            : 19 46 91 95 111
ID                   : 1 13 14 15 16 22 23 44 45 45 46 49 51 52 53 54 55 56 57 58 59 60 61 63 64 68 72 93 94 95 95 111 112 113
INCREMENT            : 77
KEYWORD              : 
K_DO                 : 112 113
K_DOUBLE             : 7
K_ELSE               : 116 117 119 120
K_EXIT               : 
K_FUNCTION           : 13
K_IF                 : 114 115 116 117
K_INTEGER            : 6
K_PRINT_DOUBLE       : 67
K_PRINT_INTEGER      : 65
K_PRINT_STRING       : 66
K_PROCEDURE          : 14
K_PROGRAM            : 1
K_READ_DOUBLE        : 
K_READ_INTEGER       : 68
K_READ_STRING        : 
K_RETURN             : 73 75 76
K_STRING             : 8
K_THEN               : 114 115 116 117
K_WHILE              : 109 110
LBRACKET             : 16 23 45 46 54 55 94 95
LCURLY               : 1 13 14 110 112 114 116 119
LEQ                  : 101
LPAREN               : 13 14 65 66 67 68 72 89 90 109 110 112 113 114 115 116 117
LT                   : 102
MINUS                : 82 88 90
MOD                  : 86
NE                   : 103
NOT                  : 104
PERIOD               : 
PLUS                 : 81
RBRACKET             : 16 23 45 46 54 55 94 95
RCURLY               : 1 13 14 110 112 114 116 119
RPAREN               : 13 14 65 66 67 68 72 89 90 109 110 112 113 114 115 116 117
SCONSTANT            : 21 55
SEMI                 : 26 27 28 34 35 36 37 38 40 42 65 66 67 68 112 112 113 113
TIMES                : 84
error                : 

Nonterminals, with rules where they appear

arguments            : 69 69 72
assign               : 28 38 50 62 76
bool                 : 109 110 114 115 116 117
bool_op              : 105 106 107
condition            : 107 107 108 112 113
declare              : 26 36 49 50
declare_assign       : 27 37 64
do                   : 31
do_assign            : 112 113
else                 : 116 117 118
else_if              : 114 115
epsilon              : 5 12 24 43 71 74 121
expression           : 79 81 82 89 90
factor               : 47 47 47 48 48 80 84 85 86 87 88
function             : 3
function_call        : 34 40 56 75 106
function_statements  : 9 9 13
if                   : 32
inc_dec              : 52 80 112 113
math                 : 53 54 54 55 57 58 59 60 61 105 105 106
parameter            : 18
parameter_list       : 13 14 17 17
print                : 29 39
procedure            : 4 11
program              : 0
program_body         : 1 2 2
read                 : 33 41
return               : 35 42
scope                : 13 14
statement            : 109 113 115 117 120
statements           : 10 14 25 25 110 112 114 116 119
term                 : 81 82 83 84 85 86
type                 : 13 15 16 44 45 46 47 48 63
value                : 23 51 62 63 65 66 67 70 73 94
while                : 30

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . K_PROGRAM ID LCURLY program_body RCURLY

    K_PROGRAM       shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> K_PROGRAM . ID LCURLY program_body RCURLY

    ID              shift and go to state 3


state 3

    (1) program -> K_PROGRAM ID . LCURLY program_body RCURLY

    LCURLY          shift and go to state 4


state 4

    (1) program -> K_PROGRAM ID LCURLY . program_body RCURLY
    (2) program_body -> . program_body program_body
    (3) program_body -> . function
    (4) program_body -> . procedure
    (5) program_body -> . epsilon
    (13) function -> . K_FUNCTION scope type ID LPAREN parameter_list RPAREN LCURLY function_statements RCURLY
    (14) procedure -> . K_PROCEDURE scope ID LPAREN parameter_list RPAREN LCURLY statements RCURLY
    (122) epsilon -> .

  ! shift/reduce conflict for K_FUNCTION resolved as shift
  ! shift/reduce conflict for K_PROCEDURE resolved as shift
    K_FUNCTION      shift and go to state 9
    K_PROCEDURE     shift and go to state 10
    RCURLY          reduce using rule 122 (epsilon -> .)

  ! K_FUNCTION      [ reduce using rule 122 (epsilon -> .) ]
  ! K_PROCEDURE     [ reduce using rule 122 (epsilon -> .) ]

    program_body                   shift and go to state 5
    function                       shift and go to state 6
    procedure                      shift and go to state 7
    epsilon                        shift and go to state 8

state 5

    (1) program -> K_PROGRAM ID LCURLY program_body . RCURLY
    (2) program_body -> program_body . program_body
    (2) program_body -> . program_body program_body
    (3) program_body -> . function
    (4) program_body -> . procedure
    (5) program_body -> . epsilon
    (13) function -> . K_FUNCTION scope type ID LPAREN parameter_list RPAREN LCURLY function_statements RCURLY
    (14) procedure -> . K_PROCEDURE scope ID LPAREN parameter_list RPAREN LCURLY statements RCURLY
    (122) epsilon -> .

  ! shift/reduce conflict for K_FUNCTION resolved as shift
  ! shift/reduce conflict for K_PROCEDURE resolved as shift
  ! shift/reduce conflict for RCURLY resolved as shift
    RCURLY          shift and go to state 12
    K_FUNCTION      shift and go to state 9
    K_PROCEDURE     shift and go to state 10

  ! K_FUNCTION      [ reduce using rule 122 (epsilon -> .) ]
  ! K_PROCEDURE     [ reduce using rule 122 (epsilon -> .) ]
  ! RCURLY          [ reduce using rule 122 (epsilon -> .) ]

    program_body                   shift and go to state 11
    function                       shift and go to state 6
    procedure                      shift and go to state 7
    epsilon                        shift and go to state 8

state 6

    (3) program_body -> function .

    RCURLY          reduce using rule 3 (program_body -> function .)
    K_FUNCTION      reduce using rule 3 (program_body -> function .)
    K_PROCEDURE     reduce using rule 3 (program_body -> function .)


state 7

    (4) program_body -> procedure .

    RCURLY          reduce using rule 4 (program_body -> procedure .)
    K_FUNCTION      reduce using rule 4 (program_body -> procedure .)
    K_PROCEDURE     reduce using rule 4 (program_body -> procedure .)


state 8

    (5) program_body -> epsilon .

    RCURLY          reduce using rule 5 (program_body -> epsilon .)
    K_FUNCTION      reduce using rule 5 (program_body -> epsilon .)
    K_PROCEDURE     reduce using rule 5 (program_body -> epsilon .)


state 9

    (13) function -> K_FUNCTION . scope type ID LPAREN parameter_list RPAREN LCURLY function_statements RCURLY
    (12) scope -> . epsilon
    (122) epsilon -> .

    K_INTEGER       reduce using rule 122 (epsilon -> .)
    K_DOUBLE        reduce using rule 122 (epsilon -> .)
    K_STRING        reduce using rule 122 (epsilon -> .)

    scope                          shift and go to state 13
    epsilon                        shift and go to state 14

state 10

    (14) procedure -> K_PROCEDURE . scope ID LPAREN parameter_list RPAREN LCURLY statements RCURLY
    (12) scope -> . epsilon
    (122) epsilon -> .

    ID              reduce using rule 122 (epsilon -> .)

    scope                          shift and go to state 15
    epsilon                        shift and go to state 14

state 11

    (2) program_body -> program_body program_body .
    (2) program_body -> program_body . program_body
    (2) program_body -> . program_body program_body
    (3) program_body -> . function
    (4) program_body -> . procedure
    (5) program_body -> . epsilon
    (13) function -> . K_FUNCTION scope type ID LPAREN parameter_list RPAREN LCURLY function_statements RCURLY
    (14) procedure -> . K_PROCEDURE scope ID LPAREN parameter_list RPAREN LCURLY statements RCURLY
    (122) epsilon -> .

  ! shift/reduce conflict for K_FUNCTION resolved as shift
  ! shift/reduce conflict for K_PROCEDURE resolved as shift
  ! shift/reduce conflict for K_FUNCTION resolved as shift
  ! shift/reduce conflict for K_PROCEDURE resolved as shift
  ! reduce/reduce conflict for RCURLY resolved using rule 2 (program_body -> program_body program_body .)
    RCURLY          reduce using rule 2 (program_body -> program_body program_body .)
    K_FUNCTION      shift and go to state 9
    K_PROCEDURE     shift and go to state 10

  ! K_FUNCTION      [ reduce using rule 2 (program_body -> program_body program_body .) ]
  ! K_PROCEDURE     [ reduce using rule 2 (program_body -> program_body program_body .) ]
  ! K_FUNCTION      [ reduce using rule 122 (epsilon -> .) ]
  ! K_PROCEDURE     [ reduce using rule 122 (epsilon -> .) ]
  ! RCURLY          [ reduce using rule 122 (epsilon -> .) ]

    program_body                   shift and go to state 11
    function                       shift and go to state 6
    procedure                      shift and go to state 7
    epsilon                        shift and go to state 8

state 12

    (1) program -> K_PROGRAM ID LCURLY program_body RCURLY .

    $end            reduce using rule 1 (program -> K_PROGRAM ID LCURLY program_body RCURLY .)


state 13

    (13) function -> K_FUNCTION scope . type ID LPAREN parameter_list RPAREN LCURLY function_statements RCURLY
    (6) type -> . K_INTEGER
    (7) type -> . K_DOUBLE
    (8) type -> . K_STRING

    K_INTEGER       shift and go to state 17
    K_DOUBLE        shift and go to state 18
    K_STRING        shift and go to state 19

    type                           shift and go to state 16

state 14

    (12) scope -> epsilon .

    K_INTEGER       reduce using rule 12 (scope -> epsilon .)
    K_DOUBLE        reduce using rule 12 (scope -> epsilon .)
    K_STRING        reduce using rule 12 (scope -> epsilon .)
    ID              reduce using rule 12 (scope -> epsilon .)


state 15

    (14) procedure -> K_PROCEDURE scope . ID LPAREN parameter_list RPAREN LCURLY statements RCURLY

    ID              shift and go to state 20


state 16

    (13) function -> K_FUNCTION scope type . ID LPAREN parameter_list RPAREN LCURLY function_statements RCURLY

    ID              shift and go to state 21


state 17

    (6) type -> K_INTEGER .

    ID              reduce using rule 6 (type -> K_INTEGER .)
    LPAREN          reduce using rule 6 (type -> K_INTEGER .)
    MINUS           reduce using rule 6 (type -> K_INTEGER .)
    ICONSTANT       reduce using rule 6 (type -> K_INTEGER .)
    DCONSTANT       reduce using rule 6 (type -> K_INTEGER .)


state 18

    (7) type -> K_DOUBLE .

    ID              reduce using rule 7 (type -> K_DOUBLE .)
    LPAREN          reduce using rule 7 (type -> K_DOUBLE .)
    MINUS           reduce using rule 7 (type -> K_DOUBLE .)
    ICONSTANT       reduce using rule 7 (type -> K_DOUBLE .)
    DCONSTANT       reduce using rule 7 (type -> K_DOUBLE .)


state 19

    (8) type -> K_STRING .

    ID              reduce using rule 8 (type -> K_STRING .)
    LPAREN          reduce using rule 8 (type -> K_STRING .)
    MINUS           reduce using rule 8 (type -> K_STRING .)
    ICONSTANT       reduce using rule 8 (type -> K_STRING .)
    DCONSTANT       reduce using rule 8 (type -> K_STRING .)


state 20

    (14) procedure -> K_PROCEDURE scope ID . LPAREN parameter_list RPAREN LCURLY statements RCURLY

    LPAREN          shift and go to state 22


state 21

    (13) function -> K_FUNCTION scope type ID . LPAREN parameter_list RPAREN LCURLY function_statements RCURLY

    LPAREN          shift and go to state 23


state 22

    (14) procedure -> K_PROCEDURE scope ID LPAREN . parameter_list RPAREN LCURLY statements RCURLY
    (17) parameter_list -> . parameter_list COMMA parameter_list
    (18) parameter_list -> . parameter
    (15) parameter -> . type ID
    (16) parameter -> . type ID LBRACKET RBRACKET
    (24) parameter -> . epsilon
    (6) type -> . K_INTEGER
    (7) type -> . K_DOUBLE
    (8) type -> . K_STRING
    (122) epsilon -> .

    K_INTEGER       shift and go to state 17
    K_DOUBLE        shift and go to state 18
    K_STRING        shift and go to state 19
    RPAREN          reduce using rule 122 (epsilon -> .)
    COMMA           reduce using rule 122 (epsilon -> .)

    parameter_list                 shift and go to state 24
    parameter                      shift and go to state 25
    type                           shift and go to state 26
    epsilon                        shift and go to state 27

state 23

    (13) function -> K_FUNCTION scope type ID LPAREN . parameter_list RPAREN LCURLY function_statements RCURLY
    (17) parameter_list -> . parameter_list COMMA parameter_list
    (18) parameter_list -> . parameter
    (15) parameter -> . type ID
    (16) parameter -> . type ID LBRACKET RBRACKET
    (24) parameter -> . epsilon
    (6) type -> . K_INTEGER
    (7) type -> . K_DOUBLE
    (8) type -> . K_STRING
    (122) epsilon -> .

    K_INTEGER       shift and go to state 17
    K_DOUBLE        shift and go to state 18
    K_STRING        shift and go to state 19
    RPAREN          reduce using rule 122 (epsilon -> .)
    COMMA           reduce using rule 122 (epsilon -> .)

    type                           shift and go to state 26
    parameter_list                 shift and go to state 28
    parameter                      shift and go to state 25
    epsilon                        shift and go to state 27

state 24

    (14) procedure -> K_PROCEDURE scope ID LPAREN parameter_list . RPAREN LCURLY statements RCURLY
    (17) parameter_list -> parameter_list . COMMA parameter_list

    RPAREN          shift and go to state 29
    COMMA           shift and go to state 30


state 25

    (18) parameter_list -> parameter .

    RPAREN          reduce using rule 18 (parameter_list -> parameter .)
    COMMA           reduce using rule 18 (parameter_list -> parameter .)


state 26

    (15) parameter -> type . ID
    (16) parameter -> type . ID LBRACKET RBRACKET

    ID              shift and go to state 31


state 27

    (24) parameter -> epsilon .

    RPAREN          reduce using rule 24 (parameter -> epsilon .)
    COMMA           reduce using rule 24 (parameter -> epsilon .)


state 28

    (13) function -> K_FUNCTION scope type ID LPAREN parameter_list . RPAREN LCURLY function_statements RCURLY
    (17) parameter_list -> parameter_list . COMMA parameter_list

    RPAREN          shift and go to state 32
    COMMA           shift and go to state 30


state 29

    (14) procedure -> K_PROCEDURE scope ID LPAREN parameter_list RPAREN . LCURLY statements RCURLY

    LCURLY          shift and go to state 33


state 30

    (17) parameter_list -> parameter_list COMMA . parameter_list
    (17) parameter_list -> . parameter_list COMMA parameter_list
    (18) parameter_list -> . parameter
    (15) parameter -> . type ID
    (16) parameter -> . type ID LBRACKET RBRACKET
    (24) parameter -> . epsilon
    (6) type -> . K_INTEGER
    (7) type -> . K_DOUBLE
    (8) type -> . K_STRING
    (122) epsilon -> .

    K_INTEGER       shift and go to state 17
    K_DOUBLE        shift and go to state 18
    K_STRING        shift and go to state 19
    COMMA           reduce using rule 122 (epsilon -> .)
    RPAREN          reduce using rule 122 (epsilon -> .)

    parameter_list                 shift and go to state 34
    parameter                      shift and go to state 25
    type                           shift and go to state 26
    epsilon                        shift and go to state 27

state 31

    (15) parameter -> type ID .
    (16) parameter -> type ID . LBRACKET RBRACKET

    RPAREN          reduce using rule 15 (parameter -> type ID .)
    COMMA           reduce using rule 15 (parameter -> type ID .)
    LBRACKET        shift and go to state 35


state 32

    (13) function -> K_FUNCTION scope type ID LPAREN parameter_list RPAREN . LCURLY function_statements RCURLY

    LCURLY          shift and go to state 36


state 33

    (14) procedure -> K_PROCEDURE scope ID LPAREN parameter_list RPAREN LCURLY . statements RCURLY
    (25) statements -> . statements statements
    (26) statements -> . declare SEMI
    (27) statements -> . declare_assign SEMI
    (28) statements -> . assign SEMI
    (29) statements -> . print
    (30) statements -> . while
    (31) statements -> . do
    (32) statements -> . if
    (33) statements -> . read
    (34) statements -> . function_call SEMI
    (35) statements -> . return SEMI
    (43) statements -> . epsilon
    (44) declare -> . type ID
    (45) declare -> . type ID LBRACKET ID RBRACKET
    (46) declare -> . type ID LBRACKET ICONSTANT RBRACKET
    (47) declare -> . type factor COMMA factor COMMA factor
    (48) declare -> . type factor COMMA factor
    (49) declare -> . declare COMMA ID
    (50) declare -> . declare COMMA assign
    (63) declare_assign -> . type ID ASSIGN value
    (64) declare_assign -> . declare_assign COMMA ID
    (51) assign -> . ID ASSIGN value
    (52) assign -> . ID inc_dec
    (53) assign -> . ID ASSIGN math
    (54) assign -> . ID LBRACKET math RBRACKET ASSIGN math
    (55) assign -> . ID LBRACKET math RBRACKET ASSIGN SCONSTANT
    (56) assign -> . ID ASSIGN function_call
    (57) assign -> . ID ASSIGN_PLUS math
    (58) assign -> . ID ASSIGN_MINUS math
    (59) assign -> . ID ASSIGN_MULTIPLY math
    (60) assign -> . ID ASSIGN_DIVIDE math
    (61) assign -> . ID ASSIGN_MOD math
    (62) assign -> . assign ASSIGN value
    (65) print -> . K_PRINT_INTEGER LPAREN value RPAREN SEMI
    (66) print -> . K_PRINT_STRING LPAREN value RPAREN SEMI
    (67) print -> . K_PRINT_DOUBLE LPAREN value RPAREN SEMI
    (109) while -> . K_WHILE LPAREN bool RPAREN statement
    (110) while -> . K_WHILE LPAREN bool RPAREN LCURLY statements RCURLY
    (112) do -> . K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN LCURLY statements RCURLY
    (113) do -> . K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN statement
    (114) if -> . K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else_if
    (115) if -> . K_IF LPAREN bool RPAREN K_THEN statement else_if
    (68) read -> . K_READ_INTEGER LPAREN ID RPAREN SEMI
    (72) function_call -> . ID LPAREN arguments RPAREN
    (73) return -> . K_RETURN value
    (74) return -> . epsilon
    (75) return -> . K_RETURN function_call
    (76) return -> . K_RETURN assign
    (122) epsilon -> .
    (6) type -> . K_INTEGER
    (7) type -> . K_DOUBLE
    (8) type -> . K_STRING

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for K_PRINT_INTEGER resolved as shift
  ! shift/reduce conflict for K_PRINT_STRING resolved as shift
  ! shift/reduce conflict for K_PRINT_DOUBLE resolved as shift
  ! shift/reduce conflict for K_WHILE resolved as shift
  ! shift/reduce conflict for K_DO resolved as shift
  ! shift/reduce conflict for K_IF resolved as shift
  ! shift/reduce conflict for K_READ_INTEGER resolved as shift
  ! shift/reduce conflict for K_RETURN resolved as shift
  ! shift/reduce conflict for K_INTEGER resolved as shift
  ! shift/reduce conflict for K_DOUBLE resolved as shift
  ! shift/reduce conflict for K_STRING resolved as shift
    ID              shift and go to state 37
    K_PRINT_INTEGER shift and go to state 51
    K_PRINT_STRING  shift and go to state 52
    K_PRINT_DOUBLE  shift and go to state 53
    K_WHILE         shift and go to state 54
    K_DO            shift and go to state 55
    K_IF            shift and go to state 56
    K_READ_INTEGER  shift and go to state 57
    K_RETURN        shift and go to state 58
    RCURLY          reduce using rule 122 (epsilon -> .)
    SEMI            reduce using rule 122 (epsilon -> .)
    K_INTEGER       shift and go to state 17
    K_DOUBLE        shift and go to state 18
    K_STRING        shift and go to state 19

  ! ID              [ reduce using rule 122 (epsilon -> .) ]
  ! K_PRINT_INTEGER [ reduce using rule 122 (epsilon -> .) ]
  ! K_PRINT_STRING  [ reduce using rule 122 (epsilon -> .) ]
  ! K_PRINT_DOUBLE  [ reduce using rule 122 (epsilon -> .) ]
  ! K_WHILE         [ reduce using rule 122 (epsilon -> .) ]
  ! K_DO            [ reduce using rule 122 (epsilon -> .) ]
  ! K_IF            [ reduce using rule 122 (epsilon -> .) ]
  ! K_READ_INTEGER  [ reduce using rule 122 (epsilon -> .) ]
  ! K_RETURN        [ reduce using rule 122 (epsilon -> .) ]
  ! K_INTEGER       [ reduce using rule 122 (epsilon -> .) ]
  ! K_DOUBLE        [ reduce using rule 122 (epsilon -> .) ]
  ! K_STRING        [ reduce using rule 122 (epsilon -> .) ]

    statements                     shift and go to state 38
    declare                        shift and go to state 39
    declare_assign                 shift and go to state 40
    assign                         shift and go to state 41
    print                          shift and go to state 42
    while                          shift and go to state 43
    do                             shift and go to state 44
    if                             shift and go to state 45
    read                           shift and go to state 46
    function_call                  shift and go to state 47
    return                         shift and go to state 48
    epsilon                        shift and go to state 49
    type                           shift and go to state 50

state 34

    (17) parameter_list -> parameter_list COMMA parameter_list .
    (17) parameter_list -> parameter_list . COMMA parameter_list

  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 17 (parameter_list -> parameter_list COMMA parameter_list .)
    COMMA           shift and go to state 30

  ! COMMA           [ reduce using rule 17 (parameter_list -> parameter_list COMMA parameter_list .) ]


state 35

    (16) parameter -> type ID LBRACKET . RBRACKET

    RBRACKET        shift and go to state 59


state 36

    (13) function -> K_FUNCTION scope type ID LPAREN parameter_list RPAREN LCURLY . function_statements RCURLY
    (9) function_statements -> . function_statements function_statements
    (10) function_statements -> . statements
    (11) function_statements -> . procedure
    (25) statements -> . statements statements
    (26) statements -> . declare SEMI
    (27) statements -> . declare_assign SEMI
    (28) statements -> . assign SEMI
    (29) statements -> . print
    (30) statements -> . while
    (31) statements -> . do
    (32) statements -> . if
    (33) statements -> . read
    (34) statements -> . function_call SEMI
    (35) statements -> . return SEMI
    (43) statements -> . epsilon
    (14) procedure -> . K_PROCEDURE scope ID LPAREN parameter_list RPAREN LCURLY statements RCURLY
    (44) declare -> . type ID
    (45) declare -> . type ID LBRACKET ID RBRACKET
    (46) declare -> . type ID LBRACKET ICONSTANT RBRACKET
    (47) declare -> . type factor COMMA factor COMMA factor
    (48) declare -> . type factor COMMA factor
    (49) declare -> . declare COMMA ID
    (50) declare -> . declare COMMA assign
    (63) declare_assign -> . type ID ASSIGN value
    (64) declare_assign -> . declare_assign COMMA ID
    (51) assign -> . ID ASSIGN value
    (52) assign -> . ID inc_dec
    (53) assign -> . ID ASSIGN math
    (54) assign -> . ID LBRACKET math RBRACKET ASSIGN math
    (55) assign -> . ID LBRACKET math RBRACKET ASSIGN SCONSTANT
    (56) assign -> . ID ASSIGN function_call
    (57) assign -> . ID ASSIGN_PLUS math
    (58) assign -> . ID ASSIGN_MINUS math
    (59) assign -> . ID ASSIGN_MULTIPLY math
    (60) assign -> . ID ASSIGN_DIVIDE math
    (61) assign -> . ID ASSIGN_MOD math
    (62) assign -> . assign ASSIGN value
    (65) print -> . K_PRINT_INTEGER LPAREN value RPAREN SEMI
    (66) print -> . K_PRINT_STRING LPAREN value RPAREN SEMI
    (67) print -> . K_PRINT_DOUBLE LPAREN value RPAREN SEMI
    (109) while -> . K_WHILE LPAREN bool RPAREN statement
    (110) while -> . K_WHILE LPAREN bool RPAREN LCURLY statements RCURLY
    (112) do -> . K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN LCURLY statements RCURLY
    (113) do -> . K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN statement
    (114) if -> . K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else_if
    (115) if -> . K_IF LPAREN bool RPAREN K_THEN statement else_if
    (68) read -> . K_READ_INTEGER LPAREN ID RPAREN SEMI
    (72) function_call -> . ID LPAREN arguments RPAREN
    (73) return -> . K_RETURN value
    (74) return -> . epsilon
    (75) return -> . K_RETURN function_call
    (76) return -> . K_RETURN assign
    (122) epsilon -> .
    (6) type -> . K_INTEGER
    (7) type -> . K_DOUBLE
    (8) type -> . K_STRING

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for K_PRINT_INTEGER resolved as shift
  ! shift/reduce conflict for K_PRINT_STRING resolved as shift
  ! shift/reduce conflict for K_PRINT_DOUBLE resolved as shift
  ! shift/reduce conflict for K_WHILE resolved as shift
  ! shift/reduce conflict for K_DO resolved as shift
  ! shift/reduce conflict for K_IF resolved as shift
  ! shift/reduce conflict for K_READ_INTEGER resolved as shift
  ! shift/reduce conflict for K_RETURN resolved as shift
  ! shift/reduce conflict for K_PROCEDURE resolved as shift
  ! shift/reduce conflict for K_INTEGER resolved as shift
  ! shift/reduce conflict for K_DOUBLE resolved as shift
  ! shift/reduce conflict for K_STRING resolved as shift
    K_PROCEDURE     shift and go to state 10
    ID              shift and go to state 37
    K_PRINT_INTEGER shift and go to state 51
    K_PRINT_STRING  shift and go to state 52
    K_PRINT_DOUBLE  shift and go to state 53
    K_WHILE         shift and go to state 54
    K_DO            shift and go to state 55
    K_IF            shift and go to state 56
    K_READ_INTEGER  shift and go to state 57
    K_RETURN        shift and go to state 58
    SEMI            reduce using rule 122 (epsilon -> .)
    RCURLY          reduce using rule 122 (epsilon -> .)
    K_INTEGER       shift and go to state 17
    K_DOUBLE        shift and go to state 18
    K_STRING        shift and go to state 19

  ! ID              [ reduce using rule 122 (epsilon -> .) ]
  ! K_PRINT_INTEGER [ reduce using rule 122 (epsilon -> .) ]
  ! K_PRINT_STRING  [ reduce using rule 122 (epsilon -> .) ]
  ! K_PRINT_DOUBLE  [ reduce using rule 122 (epsilon -> .) ]
  ! K_WHILE         [ reduce using rule 122 (epsilon -> .) ]
  ! K_DO            [ reduce using rule 122 (epsilon -> .) ]
  ! K_IF            [ reduce using rule 122 (epsilon -> .) ]
  ! K_READ_INTEGER  [ reduce using rule 122 (epsilon -> .) ]
  ! K_RETURN        [ reduce using rule 122 (epsilon -> .) ]
  ! K_INTEGER       [ reduce using rule 122 (epsilon -> .) ]
  ! K_DOUBLE        [ reduce using rule 122 (epsilon -> .) ]
  ! K_STRING        [ reduce using rule 122 (epsilon -> .) ]
  ! K_PROCEDURE     [ reduce using rule 122 (epsilon -> .) ]

    type                           shift and go to state 50
    function_statements            shift and go to state 60
    statements                     shift and go to state 61
    procedure                      shift and go to state 62
    declare                        shift and go to state 39
    declare_assign                 shift and go to state 40
    assign                         shift and go to state 41
    print                          shift and go to state 42
    while                          shift and go to state 43
    do                             shift and go to state 44
    if                             shift and go to state 45
    read                           shift and go to state 46
    function_call                  shift and go to state 47
    return                         shift and go to state 48
    epsilon                        shift and go to state 49

state 37

    (51) assign -> ID . ASSIGN value
    (52) assign -> ID . inc_dec
    (53) assign -> ID . ASSIGN math
    (54) assign -> ID . LBRACKET math RBRACKET ASSIGN math
    (55) assign -> ID . LBRACKET math RBRACKET ASSIGN SCONSTANT
    (56) assign -> ID . ASSIGN function_call
    (57) assign -> ID . ASSIGN_PLUS math
    (58) assign -> ID . ASSIGN_MINUS math
    (59) assign -> ID . ASSIGN_MULTIPLY math
    (60) assign -> ID . ASSIGN_DIVIDE math
    (61) assign -> ID . ASSIGN_MOD math
    (72) function_call -> ID . LPAREN arguments RPAREN
    (77) inc_dec -> . INCREMENT
    (78) inc_dec -> . DECREMENT

    ASSIGN          shift and go to state 63
    LBRACKET        shift and go to state 65
    ASSIGN_PLUS     shift and go to state 66
    ASSIGN_MINUS    shift and go to state 67
    ASSIGN_MULTIPLY shift and go to state 68
    ASSIGN_DIVIDE   shift and go to state 69
    ASSIGN_MOD      shift and go to state 70
    LPAREN          shift and go to state 71
    INCREMENT       shift and go to state 72
    DECREMENT       shift and go to state 73

    inc_dec                        shift and go to state 64

state 38

    (14) procedure -> K_PROCEDURE scope ID LPAREN parameter_list RPAREN LCURLY statements . RCURLY
    (25) statements -> statements . statements
    (25) statements -> . statements statements
    (26) statements -> . declare SEMI
    (27) statements -> . declare_assign SEMI
    (28) statements -> . assign SEMI
    (29) statements -> . print
    (30) statements -> . while
    (31) statements -> . do
    (32) statements -> . if
    (33) statements -> . read
    (34) statements -> . function_call SEMI
    (35) statements -> . return SEMI
    (43) statements -> . epsilon
    (44) declare -> . type ID
    (45) declare -> . type ID LBRACKET ID RBRACKET
    (46) declare -> . type ID LBRACKET ICONSTANT RBRACKET
    (47) declare -> . type factor COMMA factor COMMA factor
    (48) declare -> . type factor COMMA factor
    (49) declare -> . declare COMMA ID
    (50) declare -> . declare COMMA assign
    (63) declare_assign -> . type ID ASSIGN value
    (64) declare_assign -> . declare_assign COMMA ID
    (51) assign -> . ID ASSIGN value
    (52) assign -> . ID inc_dec
    (53) assign -> . ID ASSIGN math
    (54) assign -> . ID LBRACKET math RBRACKET ASSIGN math
    (55) assign -> . ID LBRACKET math RBRACKET ASSIGN SCONSTANT
    (56) assign -> . ID ASSIGN function_call
    (57) assign -> . ID ASSIGN_PLUS math
    (58) assign -> . ID ASSIGN_MINUS math
    (59) assign -> . ID ASSIGN_MULTIPLY math
    (60) assign -> . ID ASSIGN_DIVIDE math
    (61) assign -> . ID ASSIGN_MOD math
    (62) assign -> . assign ASSIGN value
    (65) print -> . K_PRINT_INTEGER LPAREN value RPAREN SEMI
    (66) print -> . K_PRINT_STRING LPAREN value RPAREN SEMI
    (67) print -> . K_PRINT_DOUBLE LPAREN value RPAREN SEMI
    (109) while -> . K_WHILE LPAREN bool RPAREN statement
    (110) while -> . K_WHILE LPAREN bool RPAREN LCURLY statements RCURLY
    (112) do -> . K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN LCURLY statements RCURLY
    (113) do -> . K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN statement
    (114) if -> . K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else_if
    (115) if -> . K_IF LPAREN bool RPAREN K_THEN statement else_if
    (68) read -> . K_READ_INTEGER LPAREN ID RPAREN SEMI
    (72) function_call -> . ID LPAREN arguments RPAREN
    (73) return -> . K_RETURN value
    (74) return -> . epsilon
    (75) return -> . K_RETURN function_call
    (76) return -> . K_RETURN assign
    (122) epsilon -> .
    (6) type -> . K_INTEGER
    (7) type -> . K_DOUBLE
    (8) type -> . K_STRING

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for K_PRINT_INTEGER resolved as shift
  ! shift/reduce conflict for K_PRINT_STRING resolved as shift
  ! shift/reduce conflict for K_PRINT_DOUBLE resolved as shift
  ! shift/reduce conflict for K_WHILE resolved as shift
  ! shift/reduce conflict for K_DO resolved as shift
  ! shift/reduce conflict for K_IF resolved as shift
  ! shift/reduce conflict for K_READ_INTEGER resolved as shift
  ! shift/reduce conflict for K_RETURN resolved as shift
  ! shift/reduce conflict for RCURLY resolved as shift
  ! shift/reduce conflict for K_INTEGER resolved as shift
  ! shift/reduce conflict for K_DOUBLE resolved as shift
  ! shift/reduce conflict for K_STRING resolved as shift
    RCURLY          shift and go to state 75
    ID              shift and go to state 37
    K_PRINT_INTEGER shift and go to state 51
    K_PRINT_STRING  shift and go to state 52
    K_PRINT_DOUBLE  shift and go to state 53
    K_WHILE         shift and go to state 54
    K_DO            shift and go to state 55
    K_IF            shift and go to state 56
    K_READ_INTEGER  shift and go to state 57
    K_RETURN        shift and go to state 58
    SEMI            reduce using rule 122 (epsilon -> .)
    K_INTEGER       shift and go to state 17
    K_DOUBLE        shift and go to state 18
    K_STRING        shift and go to state 19

  ! ID              [ reduce using rule 122 (epsilon -> .) ]
  ! K_PRINT_INTEGER [ reduce using rule 122 (epsilon -> .) ]
  ! K_PRINT_STRING  [ reduce using rule 122 (epsilon -> .) ]
  ! K_PRINT_DOUBLE  [ reduce using rule 122 (epsilon -> .) ]
  ! K_WHILE         [ reduce using rule 122 (epsilon -> .) ]
  ! K_DO            [ reduce using rule 122 (epsilon -> .) ]
  ! K_IF            [ reduce using rule 122 (epsilon -> .) ]
  ! K_READ_INTEGER  [ reduce using rule 122 (epsilon -> .) ]
  ! K_RETURN        [ reduce using rule 122 (epsilon -> .) ]
  ! K_INTEGER       [ reduce using rule 122 (epsilon -> .) ]
  ! K_DOUBLE        [ reduce using rule 122 (epsilon -> .) ]
  ! K_STRING        [ reduce using rule 122 (epsilon -> .) ]
  ! RCURLY          [ reduce using rule 122 (epsilon -> .) ]

    statements                     shift and go to state 74
    declare                        shift and go to state 39
    declare_assign                 shift and go to state 40
    assign                         shift and go to state 41
    print                          shift and go to state 42
    while                          shift and go to state 43
    do                             shift and go to state 44
    if                             shift and go to state 45
    read                           shift and go to state 46
    function_call                  shift and go to state 47
    return                         shift and go to state 48
    epsilon                        shift and go to state 49
    type                           shift and go to state 50

state 39

    (26) statements -> declare . SEMI
    (49) declare -> declare . COMMA ID
    (50) declare -> declare . COMMA assign

    SEMI            shift and go to state 76
    COMMA           shift and go to state 77


state 40

    (27) statements -> declare_assign . SEMI
    (64) declare_assign -> declare_assign . COMMA ID

    SEMI            shift and go to state 78
    COMMA           shift and go to state 79


state 41

    (28) statements -> assign . SEMI
    (62) assign -> assign . ASSIGN value

    SEMI            shift and go to state 80
    ASSIGN          shift and go to state 81


state 42

    (29) statements -> print .

    RCURLY          reduce using rule 29 (statements -> print .)
    ID              reduce using rule 29 (statements -> print .)
    K_PRINT_INTEGER reduce using rule 29 (statements -> print .)
    K_PRINT_STRING  reduce using rule 29 (statements -> print .)
    K_PRINT_DOUBLE  reduce using rule 29 (statements -> print .)
    K_WHILE         reduce using rule 29 (statements -> print .)
    K_DO            reduce using rule 29 (statements -> print .)
    K_IF            reduce using rule 29 (statements -> print .)
    K_READ_INTEGER  reduce using rule 29 (statements -> print .)
    K_RETURN        reduce using rule 29 (statements -> print .)
    K_INTEGER       reduce using rule 29 (statements -> print .)
    K_DOUBLE        reduce using rule 29 (statements -> print .)
    K_STRING        reduce using rule 29 (statements -> print .)
    SEMI            reduce using rule 29 (statements -> print .)
    K_PROCEDURE     reduce using rule 29 (statements -> print .)


state 43

    (30) statements -> while .

    RCURLY          reduce using rule 30 (statements -> while .)
    ID              reduce using rule 30 (statements -> while .)
    K_PRINT_INTEGER reduce using rule 30 (statements -> while .)
    K_PRINT_STRING  reduce using rule 30 (statements -> while .)
    K_PRINT_DOUBLE  reduce using rule 30 (statements -> while .)
    K_WHILE         reduce using rule 30 (statements -> while .)
    K_DO            reduce using rule 30 (statements -> while .)
    K_IF            reduce using rule 30 (statements -> while .)
    K_READ_INTEGER  reduce using rule 30 (statements -> while .)
    K_RETURN        reduce using rule 30 (statements -> while .)
    K_INTEGER       reduce using rule 30 (statements -> while .)
    K_DOUBLE        reduce using rule 30 (statements -> while .)
    K_STRING        reduce using rule 30 (statements -> while .)
    SEMI            reduce using rule 30 (statements -> while .)
    K_PROCEDURE     reduce using rule 30 (statements -> while .)


state 44

    (31) statements -> do .

    RCURLY          reduce using rule 31 (statements -> do .)
    ID              reduce using rule 31 (statements -> do .)
    K_PRINT_INTEGER reduce using rule 31 (statements -> do .)
    K_PRINT_STRING  reduce using rule 31 (statements -> do .)
    K_PRINT_DOUBLE  reduce using rule 31 (statements -> do .)
    K_WHILE         reduce using rule 31 (statements -> do .)
    K_DO            reduce using rule 31 (statements -> do .)
    K_IF            reduce using rule 31 (statements -> do .)
    K_READ_INTEGER  reduce using rule 31 (statements -> do .)
    K_RETURN        reduce using rule 31 (statements -> do .)
    K_INTEGER       reduce using rule 31 (statements -> do .)
    K_DOUBLE        reduce using rule 31 (statements -> do .)
    K_STRING        reduce using rule 31 (statements -> do .)
    SEMI            reduce using rule 31 (statements -> do .)
    K_PROCEDURE     reduce using rule 31 (statements -> do .)


state 45

    (32) statements -> if .

    RCURLY          reduce using rule 32 (statements -> if .)
    ID              reduce using rule 32 (statements -> if .)
    K_PRINT_INTEGER reduce using rule 32 (statements -> if .)
    K_PRINT_STRING  reduce using rule 32 (statements -> if .)
    K_PRINT_DOUBLE  reduce using rule 32 (statements -> if .)
    K_WHILE         reduce using rule 32 (statements -> if .)
    K_DO            reduce using rule 32 (statements -> if .)
    K_IF            reduce using rule 32 (statements -> if .)
    K_READ_INTEGER  reduce using rule 32 (statements -> if .)
    K_RETURN        reduce using rule 32 (statements -> if .)
    K_INTEGER       reduce using rule 32 (statements -> if .)
    K_DOUBLE        reduce using rule 32 (statements -> if .)
    K_STRING        reduce using rule 32 (statements -> if .)
    SEMI            reduce using rule 32 (statements -> if .)
    K_PROCEDURE     reduce using rule 32 (statements -> if .)


state 46

    (33) statements -> read .

    RCURLY          reduce using rule 33 (statements -> read .)
    ID              reduce using rule 33 (statements -> read .)
    K_PRINT_INTEGER reduce using rule 33 (statements -> read .)
    K_PRINT_STRING  reduce using rule 33 (statements -> read .)
    K_PRINT_DOUBLE  reduce using rule 33 (statements -> read .)
    K_WHILE         reduce using rule 33 (statements -> read .)
    K_DO            reduce using rule 33 (statements -> read .)
    K_IF            reduce using rule 33 (statements -> read .)
    K_READ_INTEGER  reduce using rule 33 (statements -> read .)
    K_RETURN        reduce using rule 33 (statements -> read .)
    K_INTEGER       reduce using rule 33 (statements -> read .)
    K_DOUBLE        reduce using rule 33 (statements -> read .)
    K_STRING        reduce using rule 33 (statements -> read .)
    SEMI            reduce using rule 33 (statements -> read .)
    K_PROCEDURE     reduce using rule 33 (statements -> read .)


state 47

    (34) statements -> function_call . SEMI

    SEMI            shift and go to state 82


state 48

    (35) statements -> return . SEMI

    SEMI            shift and go to state 83


state 49

    (43) statements -> epsilon .
    (74) return -> epsilon .

  ! reduce/reduce conflict for SEMI resolved using rule 43 (statements -> epsilon .)
    RCURLY          reduce using rule 43 (statements -> epsilon .)
    ID              reduce using rule 43 (statements -> epsilon .)
    K_PRINT_INTEGER reduce using rule 43 (statements -> epsilon .)
    K_PRINT_STRING  reduce using rule 43 (statements -> epsilon .)
    K_PRINT_DOUBLE  reduce using rule 43 (statements -> epsilon .)
    K_WHILE         reduce using rule 43 (statements -> epsilon .)
    K_DO            reduce using rule 43 (statements -> epsilon .)
    K_IF            reduce using rule 43 (statements -> epsilon .)
    K_READ_INTEGER  reduce using rule 43 (statements -> epsilon .)
    K_RETURN        reduce using rule 43 (statements -> epsilon .)
    K_INTEGER       reduce using rule 43 (statements -> epsilon .)
    K_DOUBLE        reduce using rule 43 (statements -> epsilon .)
    K_STRING        reduce using rule 43 (statements -> epsilon .)
    SEMI            reduce using rule 43 (statements -> epsilon .)
    K_PROCEDURE     reduce using rule 43 (statements -> epsilon .)

  ! SEMI            [ reduce using rule 74 (return -> epsilon .) ]


state 50

    (44) declare -> type . ID
    (45) declare -> type . ID LBRACKET ID RBRACKET
    (46) declare -> type . ID LBRACKET ICONSTANT RBRACKET
    (47) declare -> type . factor COMMA factor COMMA factor
    (48) declare -> type . factor COMMA factor
    (63) declare_assign -> type . ID ASSIGN value
    (89) factor -> . LPAREN expression RPAREN
    (90) factor -> . MINUS LPAREN expression RPAREN
    (91) factor -> . ICONSTANT
    (92) factor -> . DCONSTANT
    (93) factor -> . ID
    (94) factor -> . ID LBRACKET value RBRACKET
    (95) factor -> . ID LBRACKET ID ICONSTANT RBRACKET

    ID              shift and go to state 84
    LPAREN          shift and go to state 87
    MINUS           shift and go to state 88
    ICONSTANT       shift and go to state 85
    DCONSTANT       shift and go to state 89

    factor                         shift and go to state 86

state 51

    (65) print -> K_PRINT_INTEGER . LPAREN value RPAREN SEMI

    LPAREN          shift and go to state 90


state 52

    (66) print -> K_PRINT_STRING . LPAREN value RPAREN SEMI

    LPAREN          shift and go to state 91


state 53

    (67) print -> K_PRINT_DOUBLE . LPAREN value RPAREN SEMI

    LPAREN          shift and go to state 92


state 54

    (109) while -> K_WHILE . LPAREN bool RPAREN statement
    (110) while -> K_WHILE . LPAREN bool RPAREN LCURLY statements RCURLY

    LPAREN          shift and go to state 93


state 55

    (112) do -> K_DO . LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN LCURLY statements RCURLY
    (113) do -> K_DO . LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN statement

    LPAREN          shift and go to state 94


state 56

    (114) if -> K_IF . LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else_if
    (115) if -> K_IF . LPAREN bool RPAREN K_THEN statement else_if

    LPAREN          shift and go to state 95


state 57

    (68) read -> K_READ_INTEGER . LPAREN ID RPAREN SEMI

    LPAREN          shift and go to state 96


state 58

    (73) return -> K_RETURN . value
    (75) return -> K_RETURN . function_call
    (76) return -> K_RETURN . assign
    (19) value -> . ICONSTANT
    (20) value -> . DCONSTANT
    (21) value -> . SCONSTANT
    (22) value -> . ID
    (23) value -> . ID LBRACKET value RBRACKET
    (72) function_call -> . ID LPAREN arguments RPAREN
    (51) assign -> . ID ASSIGN value
    (52) assign -> . ID inc_dec
    (53) assign -> . ID ASSIGN math
    (54) assign -> . ID LBRACKET math RBRACKET ASSIGN math
    (55) assign -> . ID LBRACKET math RBRACKET ASSIGN SCONSTANT
    (56) assign -> . ID ASSIGN function_call
    (57) assign -> . ID ASSIGN_PLUS math
    (58) assign -> . ID ASSIGN_MINUS math
    (59) assign -> . ID ASSIGN_MULTIPLY math
    (60) assign -> . ID ASSIGN_DIVIDE math
    (61) assign -> . ID ASSIGN_MOD math
    (62) assign -> . assign ASSIGN value

    ICONSTANT       shift and go to state 100
    DCONSTANT       shift and go to state 101
    SCONSTANT       shift and go to state 102
    ID              shift and go to state 103

    value                          shift and go to state 97
    function_call                  shift and go to state 98
    assign                         shift and go to state 99

state 59

    (16) parameter -> type ID LBRACKET RBRACKET .

    RPAREN          reduce using rule 16 (parameter -> type ID LBRACKET RBRACKET .)
    COMMA           reduce using rule 16 (parameter -> type ID LBRACKET RBRACKET .)


state 60

    (13) function -> K_FUNCTION scope type ID LPAREN parameter_list RPAREN LCURLY function_statements . RCURLY
    (9) function_statements -> function_statements . function_statements
    (9) function_statements -> . function_statements function_statements
    (10) function_statements -> . statements
    (11) function_statements -> . procedure
    (25) statements -> . statements statements
    (26) statements -> . declare SEMI
    (27) statements -> . declare_assign SEMI
    (28) statements -> . assign SEMI
    (29) statements -> . print
    (30) statements -> . while
    (31) statements -> . do
    (32) statements -> . if
    (33) statements -> . read
    (34) statements -> . function_call SEMI
    (35) statements -> . return SEMI
    (43) statements -> . epsilon
    (14) procedure -> . K_PROCEDURE scope ID LPAREN parameter_list RPAREN LCURLY statements RCURLY
    (44) declare -> . type ID
    (45) declare -> . type ID LBRACKET ID RBRACKET
    (46) declare -> . type ID LBRACKET ICONSTANT RBRACKET
    (47) declare -> . type factor COMMA factor COMMA factor
    (48) declare -> . type factor COMMA factor
    (49) declare -> . declare COMMA ID
    (50) declare -> . declare COMMA assign
    (63) declare_assign -> . type ID ASSIGN value
    (64) declare_assign -> . declare_assign COMMA ID
    (51) assign -> . ID ASSIGN value
    (52) assign -> . ID inc_dec
    (53) assign -> . ID ASSIGN math
    (54) assign -> . ID LBRACKET math RBRACKET ASSIGN math
    (55) assign -> . ID LBRACKET math RBRACKET ASSIGN SCONSTANT
    (56) assign -> . ID ASSIGN function_call
    (57) assign -> . ID ASSIGN_PLUS math
    (58) assign -> . ID ASSIGN_MINUS math
    (59) assign -> . ID ASSIGN_MULTIPLY math
    (60) assign -> . ID ASSIGN_DIVIDE math
    (61) assign -> . ID ASSIGN_MOD math
    (62) assign -> . assign ASSIGN value
    (65) print -> . K_PRINT_INTEGER LPAREN value RPAREN SEMI
    (66) print -> . K_PRINT_STRING LPAREN value RPAREN SEMI
    (67) print -> . K_PRINT_DOUBLE LPAREN value RPAREN SEMI
    (109) while -> . K_WHILE LPAREN bool RPAREN statement
    (110) while -> . K_WHILE LPAREN bool RPAREN LCURLY statements RCURLY
    (112) do -> . K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN LCURLY statements RCURLY
    (113) do -> . K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN statement
    (114) if -> . K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else_if
    (115) if -> . K_IF LPAREN bool RPAREN K_THEN statement else_if
    (68) read -> . K_READ_INTEGER LPAREN ID RPAREN SEMI
    (72) function_call -> . ID LPAREN arguments RPAREN
    (73) return -> . K_RETURN value
    (74) return -> . epsilon
    (75) return -> . K_RETURN function_call
    (76) return -> . K_RETURN assign
    (122) epsilon -> .
    (6) type -> . K_INTEGER
    (7) type -> . K_DOUBLE
    (8) type -> . K_STRING

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for K_PRINT_INTEGER resolved as shift
  ! shift/reduce conflict for K_PRINT_STRING resolved as shift
  ! shift/reduce conflict for K_PRINT_DOUBLE resolved as shift
  ! shift/reduce conflict for K_WHILE resolved as shift
  ! shift/reduce conflict for K_DO resolved as shift
  ! shift/reduce conflict for K_IF resolved as shift
  ! shift/reduce conflict for K_READ_INTEGER resolved as shift
  ! shift/reduce conflict for K_RETURN resolved as shift
  ! shift/reduce conflict for K_PROCEDURE resolved as shift
  ! shift/reduce conflict for RCURLY resolved as shift
  ! shift/reduce conflict for K_INTEGER resolved as shift
  ! shift/reduce conflict for K_DOUBLE resolved as shift
  ! shift/reduce conflict for K_STRING resolved as shift
    RCURLY          shift and go to state 105
    K_PROCEDURE     shift and go to state 10
    ID              shift and go to state 37
    K_PRINT_INTEGER shift and go to state 51
    K_PRINT_STRING  shift and go to state 52
    K_PRINT_DOUBLE  shift and go to state 53
    K_WHILE         shift and go to state 54
    K_DO            shift and go to state 55
    K_IF            shift and go to state 56
    K_READ_INTEGER  shift and go to state 57
    K_RETURN        shift and go to state 58
    SEMI            reduce using rule 122 (epsilon -> .)
    K_INTEGER       shift and go to state 17
    K_DOUBLE        shift and go to state 18
    K_STRING        shift and go to state 19

  ! ID              [ reduce using rule 122 (epsilon -> .) ]
  ! K_PRINT_INTEGER [ reduce using rule 122 (epsilon -> .) ]
  ! K_PRINT_STRING  [ reduce using rule 122 (epsilon -> .) ]
  ! K_PRINT_DOUBLE  [ reduce using rule 122 (epsilon -> .) ]
  ! K_WHILE         [ reduce using rule 122 (epsilon -> .) ]
  ! K_DO            [ reduce using rule 122 (epsilon -> .) ]
  ! K_IF            [ reduce using rule 122 (epsilon -> .) ]
  ! K_READ_INTEGER  [ reduce using rule 122 (epsilon -> .) ]
  ! K_RETURN        [ reduce using rule 122 (epsilon -> .) ]
  ! K_INTEGER       [ reduce using rule 122 (epsilon -> .) ]
  ! K_DOUBLE        [ reduce using rule 122 (epsilon -> .) ]
  ! K_STRING        [ reduce using rule 122 (epsilon -> .) ]
  ! K_PROCEDURE     [ reduce using rule 122 (epsilon -> .) ]
  ! RCURLY          [ reduce using rule 122 (epsilon -> .) ]

    type                           shift and go to state 50
    function_statements            shift and go to state 104
    statements                     shift and go to state 61
    procedure                      shift and go to state 62
    declare                        shift and go to state 39
    declare_assign                 shift and go to state 40
    assign                         shift and go to state 41
    print                          shift and go to state 42
    while                          shift and go to state 43
    do                             shift and go to state 44
    if                             shift and go to state 45
    read                           shift and go to state 46
    function_call                  shift and go to state 47
    return                         shift and go to state 48
    epsilon                        shift and go to state 49

state 61

    (10) function_statements -> statements .
    (25) statements -> statements . statements
    (25) statements -> . statements statements
    (26) statements -> . declare SEMI
    (27) statements -> . declare_assign SEMI
    (28) statements -> . assign SEMI
    (29) statements -> . print
    (30) statements -> . while
    (31) statements -> . do
    (32) statements -> . if
    (33) statements -> . read
    (34) statements -> . function_call SEMI
    (35) statements -> . return SEMI
    (43) statements -> . epsilon
    (44) declare -> . type ID
    (45) declare -> . type ID LBRACKET ID RBRACKET
    (46) declare -> . type ID LBRACKET ICONSTANT RBRACKET
    (47) declare -> . type factor COMMA factor COMMA factor
    (48) declare -> . type factor COMMA factor
    (49) declare -> . declare COMMA ID
    (50) declare -> . declare COMMA assign
    (63) declare_assign -> . type ID ASSIGN value
    (64) declare_assign -> . declare_assign COMMA ID
    (51) assign -> . ID ASSIGN value
    (52) assign -> . ID inc_dec
    (53) assign -> . ID ASSIGN math
    (54) assign -> . ID LBRACKET math RBRACKET ASSIGN math
    (55) assign -> . ID LBRACKET math RBRACKET ASSIGN SCONSTANT
    (56) assign -> . ID ASSIGN function_call
    (57) assign -> . ID ASSIGN_PLUS math
    (58) assign -> . ID ASSIGN_MINUS math
    (59) assign -> . ID ASSIGN_MULTIPLY math
    (60) assign -> . ID ASSIGN_DIVIDE math
    (61) assign -> . ID ASSIGN_MOD math
    (62) assign -> . assign ASSIGN value
    (65) print -> . K_PRINT_INTEGER LPAREN value RPAREN SEMI
    (66) print -> . K_PRINT_STRING LPAREN value RPAREN SEMI
    (67) print -> . K_PRINT_DOUBLE LPAREN value RPAREN SEMI
    (109) while -> . K_WHILE LPAREN bool RPAREN statement
    (110) while -> . K_WHILE LPAREN bool RPAREN LCURLY statements RCURLY
    (112) do -> . K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN LCURLY statements RCURLY
    (113) do -> . K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN statement
    (114) if -> . K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else_if
    (115) if -> . K_IF LPAREN bool RPAREN K_THEN statement else_if
    (68) read -> . K_READ_INTEGER LPAREN ID RPAREN SEMI
    (72) function_call -> . ID LPAREN arguments RPAREN
    (73) return -> . K_RETURN value
    (74) return -> . epsilon
    (75) return -> . K_RETURN function_call
    (76) return -> . K_RETURN assign
    (122) epsilon -> .
    (6) type -> . K_INTEGER
    (7) type -> . K_DOUBLE
    (8) type -> . K_STRING

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for K_PRINT_INTEGER resolved as shift
  ! shift/reduce conflict for K_PRINT_STRING resolved as shift
  ! shift/reduce conflict for K_PRINT_DOUBLE resolved as shift
  ! shift/reduce conflict for K_WHILE resolved as shift
  ! shift/reduce conflict for K_DO resolved as shift
  ! shift/reduce conflict for K_IF resolved as shift
  ! shift/reduce conflict for K_READ_INTEGER resolved as shift
  ! shift/reduce conflict for K_RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for K_PRINT_INTEGER resolved as shift
  ! shift/reduce conflict for K_PRINT_STRING resolved as shift
  ! shift/reduce conflict for K_PRINT_DOUBLE resolved as shift
  ! shift/reduce conflict for K_WHILE resolved as shift
  ! shift/reduce conflict for K_DO resolved as shift
  ! shift/reduce conflict for K_IF resolved as shift
  ! shift/reduce conflict for K_READ_INTEGER resolved as shift
  ! shift/reduce conflict for K_RETURN resolved as shift
  ! reduce/reduce conflict for K_INTEGER resolved using rule 10 (function_statements -> statements .)
  ! reduce/reduce conflict for K_DOUBLE resolved using rule 10 (function_statements -> statements .)
  ! reduce/reduce conflict for K_STRING resolved using rule 10 (function_statements -> statements .)
  ! reduce/reduce conflict for SEMI resolved using rule 10 (function_statements -> statements .)
  ! reduce/reduce conflict for RCURLY resolved using rule 10 (function_statements -> statements .)
  ! reduce/reduce conflict for K_PROCEDURE resolved using rule 10 (function_statements -> statements .)
  ! shift/reduce conflict for K_INTEGER resolved as shift
  ! shift/reduce conflict for K_DOUBLE resolved as shift
  ! shift/reduce conflict for K_STRING resolved as shift
    RCURLY          reduce using rule 10 (function_statements -> statements .)
    K_PROCEDURE     reduce using rule 10 (function_statements -> statements .)
    SEMI            reduce using rule 10 (function_statements -> statements .)
    ID              shift and go to state 37
    K_PRINT_INTEGER shift and go to state 51
    K_PRINT_STRING  shift and go to state 52
    K_PRINT_DOUBLE  shift and go to state 53
    K_WHILE         shift and go to state 54
    K_DO            shift and go to state 55
    K_IF            shift and go to state 56
    K_READ_INTEGER  shift and go to state 57
    K_RETURN        shift and go to state 58
    K_INTEGER       shift and go to state 17
    K_DOUBLE        shift and go to state 18
    K_STRING        shift and go to state 19

  ! ID              [ reduce using rule 10 (function_statements -> statements .) ]
  ! K_PRINT_INTEGER [ reduce using rule 10 (function_statements -> statements .) ]
  ! K_PRINT_STRING  [ reduce using rule 10 (function_statements -> statements .) ]
  ! K_PRINT_DOUBLE  [ reduce using rule 10 (function_statements -> statements .) ]
  ! K_WHILE         [ reduce using rule 10 (function_statements -> statements .) ]
  ! K_DO            [ reduce using rule 10 (function_statements -> statements .) ]
  ! K_IF            [ reduce using rule 10 (function_statements -> statements .) ]
  ! K_READ_INTEGER  [ reduce using rule 10 (function_statements -> statements .) ]
  ! K_RETURN        [ reduce using rule 10 (function_statements -> statements .) ]
  ! K_INTEGER       [ reduce using rule 10 (function_statements -> statements .) ]
  ! K_DOUBLE        [ reduce using rule 10 (function_statements -> statements .) ]
  ! K_STRING        [ reduce using rule 10 (function_statements -> statements .) ]
  ! ID              [ reduce using rule 122 (epsilon -> .) ]
  ! K_PRINT_INTEGER [ reduce using rule 122 (epsilon -> .) ]
  ! K_PRINT_STRING  [ reduce using rule 122 (epsilon -> .) ]
  ! K_PRINT_DOUBLE  [ reduce using rule 122 (epsilon -> .) ]
  ! K_WHILE         [ reduce using rule 122 (epsilon -> .) ]
  ! K_DO            [ reduce using rule 122 (epsilon -> .) ]
  ! K_IF            [ reduce using rule 122 (epsilon -> .) ]
  ! K_READ_INTEGER  [ reduce using rule 122 (epsilon -> .) ]
  ! K_RETURN        [ reduce using rule 122 (epsilon -> .) ]
  ! K_INTEGER       [ reduce using rule 122 (epsilon -> .) ]
  ! K_DOUBLE        [ reduce using rule 122 (epsilon -> .) ]
  ! K_STRING        [ reduce using rule 122 (epsilon -> .) ]
  ! SEMI            [ reduce using rule 122 (epsilon -> .) ]
  ! RCURLY          [ reduce using rule 122 (epsilon -> .) ]
  ! K_PROCEDURE     [ reduce using rule 122 (epsilon -> .) ]

    statements                     shift and go to state 74
    declare                        shift and go to state 39
    declare_assign                 shift and go to state 40
    assign                         shift and go to state 41
    print                          shift and go to state 42
    while                          shift and go to state 43
    do                             shift and go to state 44
    if                             shift and go to state 45
    read                           shift and go to state 46
    function_call                  shift and go to state 47
    return                         shift and go to state 48
    epsilon                        shift and go to state 49
    type                           shift and go to state 50

state 62

    (11) function_statements -> procedure .

    RCURLY          reduce using rule 11 (function_statements -> procedure .)
    K_PROCEDURE     reduce using rule 11 (function_statements -> procedure .)
    ID              reduce using rule 11 (function_statements -> procedure .)
    K_PRINT_INTEGER reduce using rule 11 (function_statements -> procedure .)
    K_PRINT_STRING  reduce using rule 11 (function_statements -> procedure .)
    K_PRINT_DOUBLE  reduce using rule 11 (function_statements -> procedure .)
    K_WHILE         reduce using rule 11 (function_statements -> procedure .)
    K_DO            reduce using rule 11 (function_statements -> procedure .)
    K_IF            reduce using rule 11 (function_statements -> procedure .)
    K_READ_INTEGER  reduce using rule 11 (function_statements -> procedure .)
    K_RETURN        reduce using rule 11 (function_statements -> procedure .)
    K_INTEGER       reduce using rule 11 (function_statements -> procedure .)
    K_DOUBLE        reduce using rule 11 (function_statements -> procedure .)
    K_STRING        reduce using rule 11 (function_statements -> procedure .)
    SEMI            reduce using rule 11 (function_statements -> procedure .)


state 63

    (51) assign -> ID ASSIGN . value
    (53) assign -> ID ASSIGN . math
    (56) assign -> ID ASSIGN . function_call
    (19) value -> . ICONSTANT
    (20) value -> . DCONSTANT
    (21) value -> . SCONSTANT
    (22) value -> . ID
    (23) value -> . ID LBRACKET value RBRACKET
    (79) math -> . expression
    (80) math -> . factor inc_dec
    (72) function_call -> . ID LPAREN arguments RPAREN
    (81) expression -> . expression PLUS term
    (82) expression -> . expression MINUS term
    (83) expression -> . term
    (89) factor -> . LPAREN expression RPAREN
    (90) factor -> . MINUS LPAREN expression RPAREN
    (91) factor -> . ICONSTANT
    (92) factor -> . DCONSTANT
    (93) factor -> . ID
    (94) factor -> . ID LBRACKET value RBRACKET
    (95) factor -> . ID LBRACKET ID ICONSTANT RBRACKET
    (84) term -> . term TIMES factor
    (85) term -> . term DIVIDE factor
    (86) term -> . term MOD factor
    (87) term -> . factor
    (88) term -> . MINUS factor

    ICONSTANT       shift and go to state 110
    DCONSTANT       shift and go to state 111
    SCONSTANT       shift and go to state 102
    ID              shift and go to state 106
    LPAREN          shift and go to state 87
    MINUS           shift and go to state 115

    value                          shift and go to state 107
    math                           shift and go to state 108
    function_call                  shift and go to state 109
    expression                     shift and go to state 112
    factor                         shift and go to state 113
    term                           shift and go to state 114

state 64

    (52) assign -> ID inc_dec .

    SEMI            reduce using rule 52 (assign -> ID inc_dec .)
    ASSIGN          reduce using rule 52 (assign -> ID inc_dec .)
    COMMA           reduce using rule 52 (assign -> ID inc_dec .)


state 65

    (54) assign -> ID LBRACKET . math RBRACKET ASSIGN math
    (55) assign -> ID LBRACKET . math RBRACKET ASSIGN SCONSTANT
    (79) math -> . expression
    (80) math -> . factor inc_dec
    (81) expression -> . expression PLUS term
    (82) expression -> . expression MINUS term
    (83) expression -> . term
    (89) factor -> . LPAREN expression RPAREN
    (90) factor -> . MINUS LPAREN expression RPAREN
    (91) factor -> . ICONSTANT
    (92) factor -> . DCONSTANT
    (93) factor -> . ID
    (94) factor -> . ID LBRACKET value RBRACKET
    (95) factor -> . ID LBRACKET ID ICONSTANT RBRACKET
    (84) term -> . term TIMES factor
    (85) term -> . term DIVIDE factor
    (86) term -> . term MOD factor
    (87) term -> . factor
    (88) term -> . MINUS factor

    LPAREN          shift and go to state 87
    MINUS           shift and go to state 115
    ICONSTANT       shift and go to state 85
    DCONSTANT       shift and go to state 89
    ID              shift and go to state 116

    math                           shift and go to state 117
    expression                     shift and go to state 112
    factor                         shift and go to state 113
    term                           shift and go to state 114

state 66

    (57) assign -> ID ASSIGN_PLUS . math
    (79) math -> . expression
    (80) math -> . factor inc_dec
    (81) expression -> . expression PLUS term
    (82) expression -> . expression MINUS term
    (83) expression -> . term
    (89) factor -> . LPAREN expression RPAREN
    (90) factor -> . MINUS LPAREN expression RPAREN
    (91) factor -> . ICONSTANT
    (92) factor -> . DCONSTANT
    (93) factor -> . ID
    (94) factor -> . ID LBRACKET value RBRACKET
    (95) factor -> . ID LBRACKET ID ICONSTANT RBRACKET
    (84) term -> . term TIMES factor
    (85) term -> . term DIVIDE factor
    (86) term -> . term MOD factor
    (87) term -> . factor
    (88) term -> . MINUS factor

    LPAREN          shift and go to state 87
    MINUS           shift and go to state 115
    ICONSTANT       shift and go to state 85
    DCONSTANT       shift and go to state 89
    ID              shift and go to state 116

    math                           shift and go to state 118
    expression                     shift and go to state 112
    factor                         shift and go to state 113
    term                           shift and go to state 114

state 67

    (58) assign -> ID ASSIGN_MINUS . math
    (79) math -> . expression
    (80) math -> . factor inc_dec
    (81) expression -> . expression PLUS term
    (82) expression -> . expression MINUS term
    (83) expression -> . term
    (89) factor -> . LPAREN expression RPAREN
    (90) factor -> . MINUS LPAREN expression RPAREN
    (91) factor -> . ICONSTANT
    (92) factor -> . DCONSTANT
    (93) factor -> . ID
    (94) factor -> . ID LBRACKET value RBRACKET
    (95) factor -> . ID LBRACKET ID ICONSTANT RBRACKET
    (84) term -> . term TIMES factor
    (85) term -> . term DIVIDE factor
    (86) term -> . term MOD factor
    (87) term -> . factor
    (88) term -> . MINUS factor

    LPAREN          shift and go to state 87
    MINUS           shift and go to state 115
    ICONSTANT       shift and go to state 85
    DCONSTANT       shift and go to state 89
    ID              shift and go to state 116

    math                           shift and go to state 119
    expression                     shift and go to state 112
    factor                         shift and go to state 113
    term                           shift and go to state 114

state 68

    (59) assign -> ID ASSIGN_MULTIPLY . math
    (79) math -> . expression
    (80) math -> . factor inc_dec
    (81) expression -> . expression PLUS term
    (82) expression -> . expression MINUS term
    (83) expression -> . term
    (89) factor -> . LPAREN expression RPAREN
    (90) factor -> . MINUS LPAREN expression RPAREN
    (91) factor -> . ICONSTANT
    (92) factor -> . DCONSTANT
    (93) factor -> . ID
    (94) factor -> . ID LBRACKET value RBRACKET
    (95) factor -> . ID LBRACKET ID ICONSTANT RBRACKET
    (84) term -> . term TIMES factor
    (85) term -> . term DIVIDE factor
    (86) term -> . term MOD factor
    (87) term -> . factor
    (88) term -> . MINUS factor

    LPAREN          shift and go to state 87
    MINUS           shift and go to state 115
    ICONSTANT       shift and go to state 85
    DCONSTANT       shift and go to state 89
    ID              shift and go to state 116

    math                           shift and go to state 120
    expression                     shift and go to state 112
    factor                         shift and go to state 113
    term                           shift and go to state 114

state 69

    (60) assign -> ID ASSIGN_DIVIDE . math
    (79) math -> . expression
    (80) math -> . factor inc_dec
    (81) expression -> . expression PLUS term
    (82) expression -> . expression MINUS term
    (83) expression -> . term
    (89) factor -> . LPAREN expression RPAREN
    (90) factor -> . MINUS LPAREN expression RPAREN
    (91) factor -> . ICONSTANT
    (92) factor -> . DCONSTANT
    (93) factor -> . ID
    (94) factor -> . ID LBRACKET value RBRACKET
    (95) factor -> . ID LBRACKET ID ICONSTANT RBRACKET
    (84) term -> . term TIMES factor
    (85) term -> . term DIVIDE factor
    (86) term -> . term MOD factor
    (87) term -> . factor
    (88) term -> . MINUS factor

    LPAREN          shift and go to state 87
    MINUS           shift and go to state 115
    ICONSTANT       shift and go to state 85
    DCONSTANT       shift and go to state 89
    ID              shift and go to state 116

    math                           shift and go to state 121
    expression                     shift and go to state 112
    factor                         shift and go to state 113
    term                           shift and go to state 114

state 70

    (61) assign -> ID ASSIGN_MOD . math
    (79) math -> . expression
    (80) math -> . factor inc_dec
    (81) expression -> . expression PLUS term
    (82) expression -> . expression MINUS term
    (83) expression -> . term
    (89) factor -> . LPAREN expression RPAREN
    (90) factor -> . MINUS LPAREN expression RPAREN
    (91) factor -> . ICONSTANT
    (92) factor -> . DCONSTANT
    (93) factor -> . ID
    (94) factor -> . ID LBRACKET value RBRACKET
    (95) factor -> . ID LBRACKET ID ICONSTANT RBRACKET
    (84) term -> . term TIMES factor
    (85) term -> . term DIVIDE factor
    (86) term -> . term MOD factor
    (87) term -> . factor
    (88) term -> . MINUS factor

    LPAREN          shift and go to state 87
    MINUS           shift and go to state 115
    ICONSTANT       shift and go to state 85
    DCONSTANT       shift and go to state 89
    ID              shift and go to state 116

    math                           shift and go to state 122
    expression                     shift and go to state 112
    factor                         shift and go to state 113
    term                           shift and go to state 114

state 71

    (72) function_call -> ID LPAREN . arguments RPAREN
    (69) arguments -> . arguments COMMA arguments
    (70) arguments -> . value
    (71) arguments -> . epsilon
    (19) value -> . ICONSTANT
    (20) value -> . DCONSTANT
    (21) value -> . SCONSTANT
    (22) value -> . ID
    (23) value -> . ID LBRACKET value RBRACKET
    (122) epsilon -> .

    ICONSTANT       shift and go to state 100
    DCONSTANT       shift and go to state 101
    SCONSTANT       shift and go to state 102
    ID              shift and go to state 123
    RPAREN          reduce using rule 122 (epsilon -> .)
    COMMA           reduce using rule 122 (epsilon -> .)

    arguments                      shift and go to state 124
    value                          shift and go to state 125
    epsilon                        shift and go to state 126

state 72

    (77) inc_dec -> INCREMENT .

    SEMI            reduce using rule 77 (inc_dec -> INCREMENT .)
    ASSIGN          reduce using rule 77 (inc_dec -> INCREMENT .)
    COMMA           reduce using rule 77 (inc_dec -> INCREMENT .)
    RBRACKET        reduce using rule 77 (inc_dec -> INCREMENT .)
    DAND            reduce using rule 77 (inc_dec -> INCREMENT .)
    DOR             reduce using rule 77 (inc_dec -> INCREMENT .)
    DEQ             reduce using rule 77 (inc_dec -> INCREMENT .)
    GEQ             reduce using rule 77 (inc_dec -> INCREMENT .)
    GT              reduce using rule 77 (inc_dec -> INCREMENT .)
    LEQ             reduce using rule 77 (inc_dec -> INCREMENT .)
    LT              reduce using rule 77 (inc_dec -> INCREMENT .)
    NE              reduce using rule 77 (inc_dec -> INCREMENT .)
    NOT             reduce using rule 77 (inc_dec -> INCREMENT .)
    RPAREN          reduce using rule 77 (inc_dec -> INCREMENT .)


state 73

    (78) inc_dec -> DECREMENT .

    SEMI            reduce using rule 78 (inc_dec -> DECREMENT .)
    ASSIGN          reduce using rule 78 (inc_dec -> DECREMENT .)
    COMMA           reduce using rule 78 (inc_dec -> DECREMENT .)
    RBRACKET        reduce using rule 78 (inc_dec -> DECREMENT .)
    DAND            reduce using rule 78 (inc_dec -> DECREMENT .)
    DOR             reduce using rule 78 (inc_dec -> DECREMENT .)
    DEQ             reduce using rule 78 (inc_dec -> DECREMENT .)
    GEQ             reduce using rule 78 (inc_dec -> DECREMENT .)
    GT              reduce using rule 78 (inc_dec -> DECREMENT .)
    LEQ             reduce using rule 78 (inc_dec -> DECREMENT .)
    LT              reduce using rule 78 (inc_dec -> DECREMENT .)
    NE              reduce using rule 78 (inc_dec -> DECREMENT .)
    NOT             reduce using rule 78 (inc_dec -> DECREMENT .)
    RPAREN          reduce using rule 78 (inc_dec -> DECREMENT .)


state 74

    (25) statements -> statements statements .
    (25) statements -> statements . statements
    (25) statements -> . statements statements
    (26) statements -> . declare SEMI
    (27) statements -> . declare_assign SEMI
    (28) statements -> . assign SEMI
    (29) statements -> . print
    (30) statements -> . while
    (31) statements -> . do
    (32) statements -> . if
    (33) statements -> . read
    (34) statements -> . function_call SEMI
    (35) statements -> . return SEMI
    (43) statements -> . epsilon
    (44) declare -> . type ID
    (45) declare -> . type ID LBRACKET ID RBRACKET
    (46) declare -> . type ID LBRACKET ICONSTANT RBRACKET
    (47) declare -> . type factor COMMA factor COMMA factor
    (48) declare -> . type factor COMMA factor
    (49) declare -> . declare COMMA ID
    (50) declare -> . declare COMMA assign
    (63) declare_assign -> . type ID ASSIGN value
    (64) declare_assign -> . declare_assign COMMA ID
    (51) assign -> . ID ASSIGN value
    (52) assign -> . ID inc_dec
    (53) assign -> . ID ASSIGN math
    (54) assign -> . ID LBRACKET math RBRACKET ASSIGN math
    (55) assign -> . ID LBRACKET math RBRACKET ASSIGN SCONSTANT
    (56) assign -> . ID ASSIGN function_call
    (57) assign -> . ID ASSIGN_PLUS math
    (58) assign -> . ID ASSIGN_MINUS math
    (59) assign -> . ID ASSIGN_MULTIPLY math
    (60) assign -> . ID ASSIGN_DIVIDE math
    (61) assign -> . ID ASSIGN_MOD math
    (62) assign -> . assign ASSIGN value
    (65) print -> . K_PRINT_INTEGER LPAREN value RPAREN SEMI
    (66) print -> . K_PRINT_STRING LPAREN value RPAREN SEMI
    (67) print -> . K_PRINT_DOUBLE LPAREN value RPAREN SEMI
    (109) while -> . K_WHILE LPAREN bool RPAREN statement
    (110) while -> . K_WHILE LPAREN bool RPAREN LCURLY statements RCURLY
    (112) do -> . K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN LCURLY statements RCURLY
    (113) do -> . K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN statement
    (114) if -> . K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else_if
    (115) if -> . K_IF LPAREN bool RPAREN K_THEN statement else_if
    (68) read -> . K_READ_INTEGER LPAREN ID RPAREN SEMI
    (72) function_call -> . ID LPAREN arguments RPAREN
    (73) return -> . K_RETURN value
    (74) return -> . epsilon
    (75) return -> . K_RETURN function_call
    (76) return -> . K_RETURN assign
    (122) epsilon -> .
    (6) type -> . K_INTEGER
    (7) type -> . K_DOUBLE
    (8) type -> . K_STRING

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for K_PRINT_INTEGER resolved as shift
  ! shift/reduce conflict for K_PRINT_STRING resolved as shift
  ! shift/reduce conflict for K_PRINT_DOUBLE resolved as shift
  ! shift/reduce conflict for K_WHILE resolved as shift
  ! shift/reduce conflict for K_DO resolved as shift
  ! shift/reduce conflict for K_IF resolved as shift
  ! shift/reduce conflict for K_READ_INTEGER resolved as shift
  ! shift/reduce conflict for K_RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for K_PRINT_INTEGER resolved as shift
  ! shift/reduce conflict for K_PRINT_STRING resolved as shift
  ! shift/reduce conflict for K_PRINT_DOUBLE resolved as shift
  ! shift/reduce conflict for K_WHILE resolved as shift
  ! shift/reduce conflict for K_DO resolved as shift
  ! shift/reduce conflict for K_IF resolved as shift
  ! shift/reduce conflict for K_READ_INTEGER resolved as shift
  ! shift/reduce conflict for K_RETURN resolved as shift
  ! reduce/reduce conflict for K_INTEGER resolved using rule 25 (statements -> statements statements .)
  ! reduce/reduce conflict for K_DOUBLE resolved using rule 25 (statements -> statements statements .)
  ! reduce/reduce conflict for K_STRING resolved using rule 25 (statements -> statements statements .)
  ! reduce/reduce conflict for SEMI resolved using rule 25 (statements -> statements statements .)
  ! reduce/reduce conflict for RCURLY resolved using rule 25 (statements -> statements statements .)
  ! reduce/reduce conflict for K_PROCEDURE resolved using rule 25 (statements -> statements statements .)
  ! shift/reduce conflict for K_INTEGER resolved as shift
  ! shift/reduce conflict for K_DOUBLE resolved as shift
  ! shift/reduce conflict for K_STRING resolved as shift
    RCURLY          reduce using rule 25 (statements -> statements statements .)
    SEMI            reduce using rule 25 (statements -> statements statements .)
    K_PROCEDURE     reduce using rule 25 (statements -> statements statements .)
    ID              shift and go to state 37
    K_PRINT_INTEGER shift and go to state 51
    K_PRINT_STRING  shift and go to state 52
    K_PRINT_DOUBLE  shift and go to state 53
    K_WHILE         shift and go to state 54
    K_DO            shift and go to state 55
    K_IF            shift and go to state 56
    K_READ_INTEGER  shift and go to state 57
    K_RETURN        shift and go to state 58
    K_INTEGER       shift and go to state 17
    K_DOUBLE        shift and go to state 18
    K_STRING        shift and go to state 19

  ! ID              [ reduce using rule 25 (statements -> statements statements .) ]
  ! K_PRINT_INTEGER [ reduce using rule 25 (statements -> statements statements .) ]
  ! K_PRINT_STRING  [ reduce using rule 25 (statements -> statements statements .) ]
  ! K_PRINT_DOUBLE  [ reduce using rule 25 (statements -> statements statements .) ]
  ! K_WHILE         [ reduce using rule 25 (statements -> statements statements .) ]
  ! K_DO            [ reduce using rule 25 (statements -> statements statements .) ]
  ! K_IF            [ reduce using rule 25 (statements -> statements statements .) ]
  ! K_READ_INTEGER  [ reduce using rule 25 (statements -> statements statements .) ]
  ! K_RETURN        [ reduce using rule 25 (statements -> statements statements .) ]
  ! K_INTEGER       [ reduce using rule 25 (statements -> statements statements .) ]
  ! K_DOUBLE        [ reduce using rule 25 (statements -> statements statements .) ]
  ! K_STRING        [ reduce using rule 25 (statements -> statements statements .) ]
  ! ID              [ reduce using rule 122 (epsilon -> .) ]
  ! K_PRINT_INTEGER [ reduce using rule 122 (epsilon -> .) ]
  ! K_PRINT_STRING  [ reduce using rule 122 (epsilon -> .) ]
  ! K_PRINT_DOUBLE  [ reduce using rule 122 (epsilon -> .) ]
  ! K_WHILE         [ reduce using rule 122 (epsilon -> .) ]
  ! K_DO            [ reduce using rule 122 (epsilon -> .) ]
  ! K_IF            [ reduce using rule 122 (epsilon -> .) ]
  ! K_READ_INTEGER  [ reduce using rule 122 (epsilon -> .) ]
  ! K_RETURN        [ reduce using rule 122 (epsilon -> .) ]
  ! K_INTEGER       [ reduce using rule 122 (epsilon -> .) ]
  ! K_DOUBLE        [ reduce using rule 122 (epsilon -> .) ]
  ! K_STRING        [ reduce using rule 122 (epsilon -> .) ]
  ! SEMI            [ reduce using rule 122 (epsilon -> .) ]
  ! RCURLY          [ reduce using rule 122 (epsilon -> .) ]
  ! K_PROCEDURE     [ reduce using rule 122 (epsilon -> .) ]

    statements                     shift and go to state 74
    declare                        shift and go to state 39
    declare_assign                 shift and go to state 40
    assign                         shift and go to state 41
    print                          shift and go to state 42
    while                          shift and go to state 43
    do                             shift and go to state 44
    if                             shift and go to state 45
    read                           shift and go to state 46
    function_call                  shift and go to state 47
    return                         shift and go to state 48
    epsilon                        shift and go to state 49
    type                           shift and go to state 50

state 75

    (14) procedure -> K_PROCEDURE scope ID LPAREN parameter_list RPAREN LCURLY statements RCURLY .

    RCURLY          reduce using rule 14 (procedure -> K_PROCEDURE scope ID LPAREN parameter_list RPAREN LCURLY statements RCURLY .)
    K_FUNCTION      reduce using rule 14 (procedure -> K_PROCEDURE scope ID LPAREN parameter_list RPAREN LCURLY statements RCURLY .)
    K_PROCEDURE     reduce using rule 14 (procedure -> K_PROCEDURE scope ID LPAREN parameter_list RPAREN LCURLY statements RCURLY .)
    ID              reduce using rule 14 (procedure -> K_PROCEDURE scope ID LPAREN parameter_list RPAREN LCURLY statements RCURLY .)
    K_PRINT_INTEGER reduce using rule 14 (procedure -> K_PROCEDURE scope ID LPAREN parameter_list RPAREN LCURLY statements RCURLY .)
    K_PRINT_STRING  reduce using rule 14 (procedure -> K_PROCEDURE scope ID LPAREN parameter_list RPAREN LCURLY statements RCURLY .)
    K_PRINT_DOUBLE  reduce using rule 14 (procedure -> K_PROCEDURE scope ID LPAREN parameter_list RPAREN LCURLY statements RCURLY .)
    K_WHILE         reduce using rule 14 (procedure -> K_PROCEDURE scope ID LPAREN parameter_list RPAREN LCURLY statements RCURLY .)
    K_DO            reduce using rule 14 (procedure -> K_PROCEDURE scope ID LPAREN parameter_list RPAREN LCURLY statements RCURLY .)
    K_IF            reduce using rule 14 (procedure -> K_PROCEDURE scope ID LPAREN parameter_list RPAREN LCURLY statements RCURLY .)
    K_READ_INTEGER  reduce using rule 14 (procedure -> K_PROCEDURE scope ID LPAREN parameter_list RPAREN LCURLY statements RCURLY .)
    K_RETURN        reduce using rule 14 (procedure -> K_PROCEDURE scope ID LPAREN parameter_list RPAREN LCURLY statements RCURLY .)
    K_INTEGER       reduce using rule 14 (procedure -> K_PROCEDURE scope ID LPAREN parameter_list RPAREN LCURLY statements RCURLY .)
    K_DOUBLE        reduce using rule 14 (procedure -> K_PROCEDURE scope ID LPAREN parameter_list RPAREN LCURLY statements RCURLY .)
    K_STRING        reduce using rule 14 (procedure -> K_PROCEDURE scope ID LPAREN parameter_list RPAREN LCURLY statements RCURLY .)
    SEMI            reduce using rule 14 (procedure -> K_PROCEDURE scope ID LPAREN parameter_list RPAREN LCURLY statements RCURLY .)


state 76

    (26) statements -> declare SEMI .

    RCURLY          reduce using rule 26 (statements -> declare SEMI .)
    ID              reduce using rule 26 (statements -> declare SEMI .)
    K_PRINT_INTEGER reduce using rule 26 (statements -> declare SEMI .)
    K_PRINT_STRING  reduce using rule 26 (statements -> declare SEMI .)
    K_PRINT_DOUBLE  reduce using rule 26 (statements -> declare SEMI .)
    K_WHILE         reduce using rule 26 (statements -> declare SEMI .)
    K_DO            reduce using rule 26 (statements -> declare SEMI .)
    K_IF            reduce using rule 26 (statements -> declare SEMI .)
    K_READ_INTEGER  reduce using rule 26 (statements -> declare SEMI .)
    K_RETURN        reduce using rule 26 (statements -> declare SEMI .)
    K_INTEGER       reduce using rule 26 (statements -> declare SEMI .)
    K_DOUBLE        reduce using rule 26 (statements -> declare SEMI .)
    K_STRING        reduce using rule 26 (statements -> declare SEMI .)
    SEMI            reduce using rule 26 (statements -> declare SEMI .)
    K_PROCEDURE     reduce using rule 26 (statements -> declare SEMI .)


state 77

    (49) declare -> declare COMMA . ID
    (50) declare -> declare COMMA . assign
    (51) assign -> . ID ASSIGN value
    (52) assign -> . ID inc_dec
    (53) assign -> . ID ASSIGN math
    (54) assign -> . ID LBRACKET math RBRACKET ASSIGN math
    (55) assign -> . ID LBRACKET math RBRACKET ASSIGN SCONSTANT
    (56) assign -> . ID ASSIGN function_call
    (57) assign -> . ID ASSIGN_PLUS math
    (58) assign -> . ID ASSIGN_MINUS math
    (59) assign -> . ID ASSIGN_MULTIPLY math
    (60) assign -> . ID ASSIGN_DIVIDE math
    (61) assign -> . ID ASSIGN_MOD math
    (62) assign -> . assign ASSIGN value

    ID              shift and go to state 127

    assign                         shift and go to state 128

state 78

    (27) statements -> declare_assign SEMI .

    RCURLY          reduce using rule 27 (statements -> declare_assign SEMI .)
    ID              reduce using rule 27 (statements -> declare_assign SEMI .)
    K_PRINT_INTEGER reduce using rule 27 (statements -> declare_assign SEMI .)
    K_PRINT_STRING  reduce using rule 27 (statements -> declare_assign SEMI .)
    K_PRINT_DOUBLE  reduce using rule 27 (statements -> declare_assign SEMI .)
    K_WHILE         reduce using rule 27 (statements -> declare_assign SEMI .)
    K_DO            reduce using rule 27 (statements -> declare_assign SEMI .)
    K_IF            reduce using rule 27 (statements -> declare_assign SEMI .)
    K_READ_INTEGER  reduce using rule 27 (statements -> declare_assign SEMI .)
    K_RETURN        reduce using rule 27 (statements -> declare_assign SEMI .)
    K_INTEGER       reduce using rule 27 (statements -> declare_assign SEMI .)
    K_DOUBLE        reduce using rule 27 (statements -> declare_assign SEMI .)
    K_STRING        reduce using rule 27 (statements -> declare_assign SEMI .)
    SEMI            reduce using rule 27 (statements -> declare_assign SEMI .)
    K_PROCEDURE     reduce using rule 27 (statements -> declare_assign SEMI .)


state 79

    (64) declare_assign -> declare_assign COMMA . ID

    ID              shift and go to state 129


state 80

    (28) statements -> assign SEMI .

    RCURLY          reduce using rule 28 (statements -> assign SEMI .)
    ID              reduce using rule 28 (statements -> assign SEMI .)
    K_PRINT_INTEGER reduce using rule 28 (statements -> assign SEMI .)
    K_PRINT_STRING  reduce using rule 28 (statements -> assign SEMI .)
    K_PRINT_DOUBLE  reduce using rule 28 (statements -> assign SEMI .)
    K_WHILE         reduce using rule 28 (statements -> assign SEMI .)
    K_DO            reduce using rule 28 (statements -> assign SEMI .)
    K_IF            reduce using rule 28 (statements -> assign SEMI .)
    K_READ_INTEGER  reduce using rule 28 (statements -> assign SEMI .)
    K_RETURN        reduce using rule 28 (statements -> assign SEMI .)
    K_INTEGER       reduce using rule 28 (statements -> assign SEMI .)
    K_DOUBLE        reduce using rule 28 (statements -> assign SEMI .)
    K_STRING        reduce using rule 28 (statements -> assign SEMI .)
    SEMI            reduce using rule 28 (statements -> assign SEMI .)
    K_PROCEDURE     reduce using rule 28 (statements -> assign SEMI .)


state 81

    (62) assign -> assign ASSIGN . value
    (19) value -> . ICONSTANT
    (20) value -> . DCONSTANT
    (21) value -> . SCONSTANT
    (22) value -> . ID
    (23) value -> . ID LBRACKET value RBRACKET

    ICONSTANT       shift and go to state 100
    DCONSTANT       shift and go to state 101
    SCONSTANT       shift and go to state 102
    ID              shift and go to state 123

    value                          shift and go to state 130

state 82

    (34) statements -> function_call SEMI .

    RCURLY          reduce using rule 34 (statements -> function_call SEMI .)
    ID              reduce using rule 34 (statements -> function_call SEMI .)
    K_PRINT_INTEGER reduce using rule 34 (statements -> function_call SEMI .)
    K_PRINT_STRING  reduce using rule 34 (statements -> function_call SEMI .)
    K_PRINT_DOUBLE  reduce using rule 34 (statements -> function_call SEMI .)
    K_WHILE         reduce using rule 34 (statements -> function_call SEMI .)
    K_DO            reduce using rule 34 (statements -> function_call SEMI .)
    K_IF            reduce using rule 34 (statements -> function_call SEMI .)
    K_READ_INTEGER  reduce using rule 34 (statements -> function_call SEMI .)
    K_RETURN        reduce using rule 34 (statements -> function_call SEMI .)
    K_INTEGER       reduce using rule 34 (statements -> function_call SEMI .)
    K_DOUBLE        reduce using rule 34 (statements -> function_call SEMI .)
    K_STRING        reduce using rule 34 (statements -> function_call SEMI .)
    SEMI            reduce using rule 34 (statements -> function_call SEMI .)
    K_PROCEDURE     reduce using rule 34 (statements -> function_call SEMI .)


state 83

    (35) statements -> return SEMI .

    RCURLY          reduce using rule 35 (statements -> return SEMI .)
    ID              reduce using rule 35 (statements -> return SEMI .)
    K_PRINT_INTEGER reduce using rule 35 (statements -> return SEMI .)
    K_PRINT_STRING  reduce using rule 35 (statements -> return SEMI .)
    K_PRINT_DOUBLE  reduce using rule 35 (statements -> return SEMI .)
    K_WHILE         reduce using rule 35 (statements -> return SEMI .)
    K_DO            reduce using rule 35 (statements -> return SEMI .)
    K_IF            reduce using rule 35 (statements -> return SEMI .)
    K_READ_INTEGER  reduce using rule 35 (statements -> return SEMI .)
    K_RETURN        reduce using rule 35 (statements -> return SEMI .)
    K_INTEGER       reduce using rule 35 (statements -> return SEMI .)
    K_DOUBLE        reduce using rule 35 (statements -> return SEMI .)
    K_STRING        reduce using rule 35 (statements -> return SEMI .)
    SEMI            reduce using rule 35 (statements -> return SEMI .)
    K_PROCEDURE     reduce using rule 35 (statements -> return SEMI .)


state 84

    (44) declare -> type ID .
    (45) declare -> type ID . LBRACKET ID RBRACKET
    (46) declare -> type ID . LBRACKET ICONSTANT RBRACKET
    (63) declare_assign -> type ID . ASSIGN value
    (93) factor -> ID .
    (94) factor -> ID . LBRACKET value RBRACKET
    (95) factor -> ID . LBRACKET ID ICONSTANT RBRACKET

  ! reduce/reduce conflict for COMMA resolved using rule 44 (declare -> type ID .)
    SEMI            reduce using rule 44 (declare -> type ID .)
    COMMA           reduce using rule 44 (declare -> type ID .)
    LBRACKET        shift and go to state 131
    ASSIGN          shift and go to state 132

  ! COMMA           [ reduce using rule 93 (factor -> ID .) ]


state 85

    (91) factor -> ICONSTANT .

    COMMA           reduce using rule 91 (factor -> ICONSTANT .)
    INCREMENT       reduce using rule 91 (factor -> ICONSTANT .)
    DECREMENT       reduce using rule 91 (factor -> ICONSTANT .)
    TIMES           reduce using rule 91 (factor -> ICONSTANT .)
    DIVIDE          reduce using rule 91 (factor -> ICONSTANT .)
    MOD             reduce using rule 91 (factor -> ICONSTANT .)
    PLUS            reduce using rule 91 (factor -> ICONSTANT .)
    MINUS           reduce using rule 91 (factor -> ICONSTANT .)
    RBRACKET        reduce using rule 91 (factor -> ICONSTANT .)
    SEMI            reduce using rule 91 (factor -> ICONSTANT .)
    ASSIGN          reduce using rule 91 (factor -> ICONSTANT .)
    RPAREN          reduce using rule 91 (factor -> ICONSTANT .)
    DAND            reduce using rule 91 (factor -> ICONSTANT .)
    DOR             reduce using rule 91 (factor -> ICONSTANT .)
    DEQ             reduce using rule 91 (factor -> ICONSTANT .)
    GEQ             reduce using rule 91 (factor -> ICONSTANT .)
    GT              reduce using rule 91 (factor -> ICONSTANT .)
    LEQ             reduce using rule 91 (factor -> ICONSTANT .)
    LT              reduce using rule 91 (factor -> ICONSTANT .)
    NE              reduce using rule 91 (factor -> ICONSTANT .)
    NOT             reduce using rule 91 (factor -> ICONSTANT .)


state 86

    (47) declare -> type factor . COMMA factor COMMA factor
    (48) declare -> type factor . COMMA factor

    COMMA           shift and go to state 133


state 87

    (89) factor -> LPAREN . expression RPAREN
    (81) expression -> . expression PLUS term
    (82) expression -> . expression MINUS term
    (83) expression -> . term
    (84) term -> . term TIMES factor
    (85) term -> . term DIVIDE factor
    (86) term -> . term MOD factor
    (87) term -> . factor
    (88) term -> . MINUS factor
    (89) factor -> . LPAREN expression RPAREN
    (90) factor -> . MINUS LPAREN expression RPAREN
    (91) factor -> . ICONSTANT
    (92) factor -> . DCONSTANT
    (93) factor -> . ID
    (94) factor -> . ID LBRACKET value RBRACKET
    (95) factor -> . ID LBRACKET ID ICONSTANT RBRACKET

    MINUS           shift and go to state 135
    LPAREN          shift and go to state 87
    ICONSTANT       shift and go to state 85
    DCONSTANT       shift and go to state 89
    ID              shift and go to state 116

    expression                     shift and go to state 134
    term                           shift and go to state 114
    factor                         shift and go to state 136

state 88

    (90) factor -> MINUS . LPAREN expression RPAREN

    LPAREN          shift and go to state 137


state 89

    (92) factor -> DCONSTANT .

    COMMA           reduce using rule 92 (factor -> DCONSTANT .)
    INCREMENT       reduce using rule 92 (factor -> DCONSTANT .)
    DECREMENT       reduce using rule 92 (factor -> DCONSTANT .)
    TIMES           reduce using rule 92 (factor -> DCONSTANT .)
    DIVIDE          reduce using rule 92 (factor -> DCONSTANT .)
    MOD             reduce using rule 92 (factor -> DCONSTANT .)
    PLUS            reduce using rule 92 (factor -> DCONSTANT .)
    MINUS           reduce using rule 92 (factor -> DCONSTANT .)
    RBRACKET        reduce using rule 92 (factor -> DCONSTANT .)
    SEMI            reduce using rule 92 (factor -> DCONSTANT .)
    ASSIGN          reduce using rule 92 (factor -> DCONSTANT .)
    RPAREN          reduce using rule 92 (factor -> DCONSTANT .)
    DAND            reduce using rule 92 (factor -> DCONSTANT .)
    DOR             reduce using rule 92 (factor -> DCONSTANT .)
    DEQ             reduce using rule 92 (factor -> DCONSTANT .)
    GEQ             reduce using rule 92 (factor -> DCONSTANT .)
    GT              reduce using rule 92 (factor -> DCONSTANT .)
    LEQ             reduce using rule 92 (factor -> DCONSTANT .)
    LT              reduce using rule 92 (factor -> DCONSTANT .)
    NE              reduce using rule 92 (factor -> DCONSTANT .)
    NOT             reduce using rule 92 (factor -> DCONSTANT .)


state 90

    (65) print -> K_PRINT_INTEGER LPAREN . value RPAREN SEMI
    (19) value -> . ICONSTANT
    (20) value -> . DCONSTANT
    (21) value -> . SCONSTANT
    (22) value -> . ID
    (23) value -> . ID LBRACKET value RBRACKET

    ICONSTANT       shift and go to state 100
    DCONSTANT       shift and go to state 101
    SCONSTANT       shift and go to state 102
    ID              shift and go to state 123

    value                          shift and go to state 138

state 91

    (66) print -> K_PRINT_STRING LPAREN . value RPAREN SEMI
    (19) value -> . ICONSTANT
    (20) value -> . DCONSTANT
    (21) value -> . SCONSTANT
    (22) value -> . ID
    (23) value -> . ID LBRACKET value RBRACKET

    ICONSTANT       shift and go to state 100
    DCONSTANT       shift and go to state 101
    SCONSTANT       shift and go to state 102
    ID              shift and go to state 123

    value                          shift and go to state 139

state 92

    (67) print -> K_PRINT_DOUBLE LPAREN . value RPAREN SEMI
    (19) value -> . ICONSTANT
    (20) value -> . DCONSTANT
    (21) value -> . SCONSTANT
    (22) value -> . ID
    (23) value -> . ID LBRACKET value RBRACKET

    ICONSTANT       shift and go to state 100
    DCONSTANT       shift and go to state 101
    SCONSTANT       shift and go to state 102
    ID              shift and go to state 123

    value                          shift and go to state 140

state 93

    (109) while -> K_WHILE LPAREN . bool RPAREN statement
    (110) while -> K_WHILE LPAREN . bool RPAREN LCURLY statements RCURLY
    (107) bool -> . condition bool_op condition
    (108) bool -> . condition
    (105) condition -> . math bool_op math
    (106) condition -> . function_call bool_op math
    (79) math -> . expression
    (80) math -> . factor inc_dec
    (72) function_call -> . ID LPAREN arguments RPAREN
    (81) expression -> . expression PLUS term
    (82) expression -> . expression MINUS term
    (83) expression -> . term
    (89) factor -> . LPAREN expression RPAREN
    (90) factor -> . MINUS LPAREN expression RPAREN
    (91) factor -> . ICONSTANT
    (92) factor -> . DCONSTANT
    (93) factor -> . ID
    (94) factor -> . ID LBRACKET value RBRACKET
    (95) factor -> . ID LBRACKET ID ICONSTANT RBRACKET
    (84) term -> . term TIMES factor
    (85) term -> . term DIVIDE factor
    (86) term -> . term MOD factor
    (87) term -> . factor
    (88) term -> . MINUS factor

    ID              shift and go to state 145
    LPAREN          shift and go to state 87
    MINUS           shift and go to state 115
    ICONSTANT       shift and go to state 85
    DCONSTANT       shift and go to state 89

    bool                           shift and go to state 141
    condition                      shift and go to state 142
    math                           shift and go to state 143
    function_call                  shift and go to state 144
    expression                     shift and go to state 112
    factor                         shift and go to state 113
    term                           shift and go to state 114

state 94

    (112) do -> K_DO LPAREN . do_assign SEMI condition SEMI ID inc_dec RPAREN LCURLY statements RCURLY
    (113) do -> K_DO LPAREN . do_assign SEMI condition SEMI ID inc_dec RPAREN statement
    (111) do_assign -> . ID ASSIGN ICONSTANT

    ID              shift and go to state 147

    do_assign                      shift and go to state 146

state 95

    (114) if -> K_IF LPAREN . bool RPAREN K_THEN LCURLY statements RCURLY else_if
    (115) if -> K_IF LPAREN . bool RPAREN K_THEN statement else_if
    (107) bool -> . condition bool_op condition
    (108) bool -> . condition
    (105) condition -> . math bool_op math
    (106) condition -> . function_call bool_op math
    (79) math -> . expression
    (80) math -> . factor inc_dec
    (72) function_call -> . ID LPAREN arguments RPAREN
    (81) expression -> . expression PLUS term
    (82) expression -> . expression MINUS term
    (83) expression -> . term
    (89) factor -> . LPAREN expression RPAREN
    (90) factor -> . MINUS LPAREN expression RPAREN
    (91) factor -> . ICONSTANT
    (92) factor -> . DCONSTANT
    (93) factor -> . ID
    (94) factor -> . ID LBRACKET value RBRACKET
    (95) factor -> . ID LBRACKET ID ICONSTANT RBRACKET
    (84) term -> . term TIMES factor
    (85) term -> . term DIVIDE factor
    (86) term -> . term MOD factor
    (87) term -> . factor
    (88) term -> . MINUS factor

    ID              shift and go to state 145
    LPAREN          shift and go to state 87
    MINUS           shift and go to state 115
    ICONSTANT       shift and go to state 85
    DCONSTANT       shift and go to state 89

    bool                           shift and go to state 148
    condition                      shift and go to state 142
    math                           shift and go to state 143
    function_call                  shift and go to state 144
    expression                     shift and go to state 112
    factor                         shift and go to state 113
    term                           shift and go to state 114

state 96

    (68) read -> K_READ_INTEGER LPAREN . ID RPAREN SEMI

    ID              shift and go to state 149


state 97

    (73) return -> K_RETURN value .

    SEMI            reduce using rule 73 (return -> K_RETURN value .)


state 98

    (75) return -> K_RETURN function_call .

    SEMI            reduce using rule 75 (return -> K_RETURN function_call .)


state 99

    (76) return -> K_RETURN assign .
    (62) assign -> assign . ASSIGN value

    SEMI            reduce using rule 76 (return -> K_RETURN assign .)
    ASSIGN          shift and go to state 81


state 100

    (19) value -> ICONSTANT .

    SEMI            reduce using rule 19 (value -> ICONSTANT .)
    RPAREN          reduce using rule 19 (value -> ICONSTANT .)
    COMMA           reduce using rule 19 (value -> ICONSTANT .)
    ASSIGN          reduce using rule 19 (value -> ICONSTANT .)
    RBRACKET        reduce using rule 19 (value -> ICONSTANT .)


state 101

    (20) value -> DCONSTANT .

    SEMI            reduce using rule 20 (value -> DCONSTANT .)
    RPAREN          reduce using rule 20 (value -> DCONSTANT .)
    COMMA           reduce using rule 20 (value -> DCONSTANT .)
    ASSIGN          reduce using rule 20 (value -> DCONSTANT .)
    RBRACKET        reduce using rule 20 (value -> DCONSTANT .)


state 102

    (21) value -> SCONSTANT .

    SEMI            reduce using rule 21 (value -> SCONSTANT .)
    ASSIGN          reduce using rule 21 (value -> SCONSTANT .)
    COMMA           reduce using rule 21 (value -> SCONSTANT .)
    RPAREN          reduce using rule 21 (value -> SCONSTANT .)
    RBRACKET        reduce using rule 21 (value -> SCONSTANT .)


state 103

    (22) value -> ID .
    (23) value -> ID . LBRACKET value RBRACKET
    (72) function_call -> ID . LPAREN arguments RPAREN
    (51) assign -> ID . ASSIGN value
    (52) assign -> ID . inc_dec
    (53) assign -> ID . ASSIGN math
    (54) assign -> ID . LBRACKET math RBRACKET ASSIGN math
    (55) assign -> ID . LBRACKET math RBRACKET ASSIGN SCONSTANT
    (56) assign -> ID . ASSIGN function_call
    (57) assign -> ID . ASSIGN_PLUS math
    (58) assign -> ID . ASSIGN_MINUS math
    (59) assign -> ID . ASSIGN_MULTIPLY math
    (60) assign -> ID . ASSIGN_DIVIDE math
    (61) assign -> ID . ASSIGN_MOD math
    (77) inc_dec -> . INCREMENT
    (78) inc_dec -> . DECREMENT

    SEMI            reduce using rule 22 (value -> ID .)
    LBRACKET        shift and go to state 150
    LPAREN          shift and go to state 71
    ASSIGN          shift and go to state 63
    ASSIGN_PLUS     shift and go to state 66
    ASSIGN_MINUS    shift and go to state 67
    ASSIGN_MULTIPLY shift and go to state 68
    ASSIGN_DIVIDE   shift and go to state 69
    ASSIGN_MOD      shift and go to state 70
    INCREMENT       shift and go to state 72
    DECREMENT       shift and go to state 73

    inc_dec                        shift and go to state 64

state 104

    (9) function_statements -> function_statements function_statements .
    (9) function_statements -> function_statements . function_statements
    (9) function_statements -> . function_statements function_statements
    (10) function_statements -> . statements
    (11) function_statements -> . procedure
    (25) statements -> . statements statements
    (26) statements -> . declare SEMI
    (27) statements -> . declare_assign SEMI
    (28) statements -> . assign SEMI
    (29) statements -> . print
    (30) statements -> . while
    (31) statements -> . do
    (32) statements -> . if
    (33) statements -> . read
    (34) statements -> . function_call SEMI
    (35) statements -> . return SEMI
    (43) statements -> . epsilon
    (14) procedure -> . K_PROCEDURE scope ID LPAREN parameter_list RPAREN LCURLY statements RCURLY
    (44) declare -> . type ID
    (45) declare -> . type ID LBRACKET ID RBRACKET
    (46) declare -> . type ID LBRACKET ICONSTANT RBRACKET
    (47) declare -> . type factor COMMA factor COMMA factor
    (48) declare -> . type factor COMMA factor
    (49) declare -> . declare COMMA ID
    (50) declare -> . declare COMMA assign
    (63) declare_assign -> . type ID ASSIGN value
    (64) declare_assign -> . declare_assign COMMA ID
    (51) assign -> . ID ASSIGN value
    (52) assign -> . ID inc_dec
    (53) assign -> . ID ASSIGN math
    (54) assign -> . ID LBRACKET math RBRACKET ASSIGN math
    (55) assign -> . ID LBRACKET math RBRACKET ASSIGN SCONSTANT
    (56) assign -> . ID ASSIGN function_call
    (57) assign -> . ID ASSIGN_PLUS math
    (58) assign -> . ID ASSIGN_MINUS math
    (59) assign -> . ID ASSIGN_MULTIPLY math
    (60) assign -> . ID ASSIGN_DIVIDE math
    (61) assign -> . ID ASSIGN_MOD math
    (62) assign -> . assign ASSIGN value
    (65) print -> . K_PRINT_INTEGER LPAREN value RPAREN SEMI
    (66) print -> . K_PRINT_STRING LPAREN value RPAREN SEMI
    (67) print -> . K_PRINT_DOUBLE LPAREN value RPAREN SEMI
    (109) while -> . K_WHILE LPAREN bool RPAREN statement
    (110) while -> . K_WHILE LPAREN bool RPAREN LCURLY statements RCURLY
    (112) do -> . K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN LCURLY statements RCURLY
    (113) do -> . K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN statement
    (114) if -> . K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else_if
    (115) if -> . K_IF LPAREN bool RPAREN K_THEN statement else_if
    (68) read -> . K_READ_INTEGER LPAREN ID RPAREN SEMI
    (72) function_call -> . ID LPAREN arguments RPAREN
    (73) return -> . K_RETURN value
    (74) return -> . epsilon
    (75) return -> . K_RETURN function_call
    (76) return -> . K_RETURN assign
    (122) epsilon -> .
    (6) type -> . K_INTEGER
    (7) type -> . K_DOUBLE
    (8) type -> . K_STRING

  ! shift/reduce conflict for K_PROCEDURE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for K_PRINT_INTEGER resolved as shift
  ! shift/reduce conflict for K_PRINT_STRING resolved as shift
  ! shift/reduce conflict for K_PRINT_DOUBLE resolved as shift
  ! shift/reduce conflict for K_WHILE resolved as shift
  ! shift/reduce conflict for K_DO resolved as shift
  ! shift/reduce conflict for K_IF resolved as shift
  ! shift/reduce conflict for K_READ_INTEGER resolved as shift
  ! shift/reduce conflict for K_RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for K_PRINT_INTEGER resolved as shift
  ! shift/reduce conflict for K_PRINT_STRING resolved as shift
  ! shift/reduce conflict for K_PRINT_DOUBLE resolved as shift
  ! shift/reduce conflict for K_WHILE resolved as shift
  ! shift/reduce conflict for K_DO resolved as shift
  ! shift/reduce conflict for K_IF resolved as shift
  ! shift/reduce conflict for K_READ_INTEGER resolved as shift
  ! shift/reduce conflict for K_RETURN resolved as shift
  ! reduce/reduce conflict for K_INTEGER resolved using rule 9 (function_statements -> function_statements function_statements .)
  ! reduce/reduce conflict for K_DOUBLE resolved using rule 9 (function_statements -> function_statements function_statements .)
  ! reduce/reduce conflict for K_STRING resolved using rule 9 (function_statements -> function_statements function_statements .)
  ! reduce/reduce conflict for SEMI resolved using rule 9 (function_statements -> function_statements function_statements .)
  ! shift/reduce conflict for K_PROCEDURE resolved as shift
  ! reduce/reduce conflict for RCURLY resolved using rule 9 (function_statements -> function_statements function_statements .)
  ! shift/reduce conflict for K_INTEGER resolved as shift
  ! shift/reduce conflict for K_DOUBLE resolved as shift
  ! shift/reduce conflict for K_STRING resolved as shift
    RCURLY          reduce using rule 9 (function_statements -> function_statements function_statements .)
    SEMI            reduce using rule 9 (function_statements -> function_statements function_statements .)
    K_PROCEDURE     shift and go to state 10
    ID              shift and go to state 37
    K_PRINT_INTEGER shift and go to state 51
    K_PRINT_STRING  shift and go to state 52
    K_PRINT_DOUBLE  shift and go to state 53
    K_WHILE         shift and go to state 54
    K_DO            shift and go to state 55
    K_IF            shift and go to state 56
    K_READ_INTEGER  shift and go to state 57
    K_RETURN        shift and go to state 58
    K_INTEGER       shift and go to state 17
    K_DOUBLE        shift and go to state 18
    K_STRING        shift and go to state 19

  ! K_PROCEDURE     [ reduce using rule 9 (function_statements -> function_statements function_statements .) ]
  ! ID              [ reduce using rule 9 (function_statements -> function_statements function_statements .) ]
  ! K_PRINT_INTEGER [ reduce using rule 9 (function_statements -> function_statements function_statements .) ]
  ! K_PRINT_STRING  [ reduce using rule 9 (function_statements -> function_statements function_statements .) ]
  ! K_PRINT_DOUBLE  [ reduce using rule 9 (function_statements -> function_statements function_statements .) ]
  ! K_WHILE         [ reduce using rule 9 (function_statements -> function_statements function_statements .) ]
  ! K_DO            [ reduce using rule 9 (function_statements -> function_statements function_statements .) ]
  ! K_IF            [ reduce using rule 9 (function_statements -> function_statements function_statements .) ]
  ! K_READ_INTEGER  [ reduce using rule 9 (function_statements -> function_statements function_statements .) ]
  ! K_RETURN        [ reduce using rule 9 (function_statements -> function_statements function_statements .) ]
  ! K_INTEGER       [ reduce using rule 9 (function_statements -> function_statements function_statements .) ]
  ! K_DOUBLE        [ reduce using rule 9 (function_statements -> function_statements function_statements .) ]
  ! K_STRING        [ reduce using rule 9 (function_statements -> function_statements function_statements .) ]
  ! ID              [ reduce using rule 122 (epsilon -> .) ]
  ! K_PRINT_INTEGER [ reduce using rule 122 (epsilon -> .) ]
  ! K_PRINT_STRING  [ reduce using rule 122 (epsilon -> .) ]
  ! K_PRINT_DOUBLE  [ reduce using rule 122 (epsilon -> .) ]
  ! K_WHILE         [ reduce using rule 122 (epsilon -> .) ]
  ! K_DO            [ reduce using rule 122 (epsilon -> .) ]
  ! K_IF            [ reduce using rule 122 (epsilon -> .) ]
  ! K_READ_INTEGER  [ reduce using rule 122 (epsilon -> .) ]
  ! K_RETURN        [ reduce using rule 122 (epsilon -> .) ]
  ! K_INTEGER       [ reduce using rule 122 (epsilon -> .) ]
  ! K_DOUBLE        [ reduce using rule 122 (epsilon -> .) ]
  ! K_STRING        [ reduce using rule 122 (epsilon -> .) ]
  ! SEMI            [ reduce using rule 122 (epsilon -> .) ]
  ! K_PROCEDURE     [ reduce using rule 122 (epsilon -> .) ]
  ! RCURLY          [ reduce using rule 122 (epsilon -> .) ]

    function_statements            shift and go to state 104
    statements                     shift and go to state 61
    procedure                      shift and go to state 62
    declare                        shift and go to state 39
    declare_assign                 shift and go to state 40
    assign                         shift and go to state 41
    print                          shift and go to state 42
    while                          shift and go to state 43
    do                             shift and go to state 44
    if                             shift and go to state 45
    read                           shift and go to state 46
    function_call                  shift and go to state 47
    return                         shift and go to state 48
    epsilon                        shift and go to state 49
    type                           shift and go to state 50

state 105

    (13) function -> K_FUNCTION scope type ID LPAREN parameter_list RPAREN LCURLY function_statements RCURLY .

    RCURLY          reduce using rule 13 (function -> K_FUNCTION scope type ID LPAREN parameter_list RPAREN LCURLY function_statements RCURLY .)
    K_FUNCTION      reduce using rule 13 (function -> K_FUNCTION scope type ID LPAREN parameter_list RPAREN LCURLY function_statements RCURLY .)
    K_PROCEDURE     reduce using rule 13 (function -> K_FUNCTION scope type ID LPAREN parameter_list RPAREN LCURLY function_statements RCURLY .)


state 106

    (22) value -> ID .
    (23) value -> ID . LBRACKET value RBRACKET
    (72) function_call -> ID . LPAREN arguments RPAREN
    (93) factor -> ID .
    (94) factor -> ID . LBRACKET value RBRACKET
    (95) factor -> ID . LBRACKET ID ICONSTANT RBRACKET

  ! reduce/reduce conflict for SEMI resolved using rule 22 (value -> ID .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 22 (value -> ID .)
  ! reduce/reduce conflict for COMMA resolved using rule 22 (value -> ID .)
    SEMI            reduce using rule 22 (value -> ID .)
    ASSIGN          reduce using rule 22 (value -> ID .)
    COMMA           reduce using rule 22 (value -> ID .)
    LBRACKET        shift and go to state 151
    LPAREN          shift and go to state 71
    INCREMENT       reduce using rule 93 (factor -> ID .)
    DECREMENT       reduce using rule 93 (factor -> ID .)
    TIMES           reduce using rule 93 (factor -> ID .)
    DIVIDE          reduce using rule 93 (factor -> ID .)
    MOD             reduce using rule 93 (factor -> ID .)
    PLUS            reduce using rule 93 (factor -> ID .)
    MINUS           reduce using rule 93 (factor -> ID .)

  ! SEMI            [ reduce using rule 93 (factor -> ID .) ]
  ! ASSIGN          [ reduce using rule 93 (factor -> ID .) ]
  ! COMMA           [ reduce using rule 93 (factor -> ID .) ]


state 107

    (51) assign -> ID ASSIGN value .

    SEMI            reduce using rule 51 (assign -> ID ASSIGN value .)
    ASSIGN          reduce using rule 51 (assign -> ID ASSIGN value .)
    COMMA           reduce using rule 51 (assign -> ID ASSIGN value .)


state 108

    (53) assign -> ID ASSIGN math .

    SEMI            reduce using rule 53 (assign -> ID ASSIGN math .)
    ASSIGN          reduce using rule 53 (assign -> ID ASSIGN math .)
    COMMA           reduce using rule 53 (assign -> ID ASSIGN math .)


state 109

    (56) assign -> ID ASSIGN function_call .

    SEMI            reduce using rule 56 (assign -> ID ASSIGN function_call .)
    ASSIGN          reduce using rule 56 (assign -> ID ASSIGN function_call .)
    COMMA           reduce using rule 56 (assign -> ID ASSIGN function_call .)


state 110

    (19) value -> ICONSTANT .
    (91) factor -> ICONSTANT .

  ! reduce/reduce conflict for SEMI resolved using rule 19 (value -> ICONSTANT .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 19 (value -> ICONSTANT .)
  ! reduce/reduce conflict for COMMA resolved using rule 19 (value -> ICONSTANT .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 19 (value -> ICONSTANT .)
    SEMI            reduce using rule 19 (value -> ICONSTANT .)
    ASSIGN          reduce using rule 19 (value -> ICONSTANT .)
    COMMA           reduce using rule 19 (value -> ICONSTANT .)
    RBRACKET        reduce using rule 19 (value -> ICONSTANT .)
    INCREMENT       reduce using rule 91 (factor -> ICONSTANT .)
    DECREMENT       reduce using rule 91 (factor -> ICONSTANT .)
    TIMES           reduce using rule 91 (factor -> ICONSTANT .)
    DIVIDE          reduce using rule 91 (factor -> ICONSTANT .)
    MOD             reduce using rule 91 (factor -> ICONSTANT .)
    PLUS            reduce using rule 91 (factor -> ICONSTANT .)
    MINUS           reduce using rule 91 (factor -> ICONSTANT .)

  ! SEMI            [ reduce using rule 91 (factor -> ICONSTANT .) ]
  ! ASSIGN          [ reduce using rule 91 (factor -> ICONSTANT .) ]
  ! COMMA           [ reduce using rule 91 (factor -> ICONSTANT .) ]
  ! RBRACKET        [ reduce using rule 91 (factor -> ICONSTANT .) ]


state 111

    (20) value -> DCONSTANT .
    (92) factor -> DCONSTANT .

  ! reduce/reduce conflict for SEMI resolved using rule 20 (value -> DCONSTANT .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 20 (value -> DCONSTANT .)
  ! reduce/reduce conflict for COMMA resolved using rule 20 (value -> DCONSTANT .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 20 (value -> DCONSTANT .)
    SEMI            reduce using rule 20 (value -> DCONSTANT .)
    ASSIGN          reduce using rule 20 (value -> DCONSTANT .)
    COMMA           reduce using rule 20 (value -> DCONSTANT .)
    RBRACKET        reduce using rule 20 (value -> DCONSTANT .)
    INCREMENT       reduce using rule 92 (factor -> DCONSTANT .)
    DECREMENT       reduce using rule 92 (factor -> DCONSTANT .)
    TIMES           reduce using rule 92 (factor -> DCONSTANT .)
    DIVIDE          reduce using rule 92 (factor -> DCONSTANT .)
    MOD             reduce using rule 92 (factor -> DCONSTANT .)
    PLUS            reduce using rule 92 (factor -> DCONSTANT .)
    MINUS           reduce using rule 92 (factor -> DCONSTANT .)

  ! SEMI            [ reduce using rule 92 (factor -> DCONSTANT .) ]
  ! ASSIGN          [ reduce using rule 92 (factor -> DCONSTANT .) ]
  ! COMMA           [ reduce using rule 92 (factor -> DCONSTANT .) ]
  ! RBRACKET        [ reduce using rule 92 (factor -> DCONSTANT .) ]


state 112

    (79) math -> expression .
    (81) expression -> expression . PLUS term
    (82) expression -> expression . MINUS term

    SEMI            reduce using rule 79 (math -> expression .)
    ASSIGN          reduce using rule 79 (math -> expression .)
    COMMA           reduce using rule 79 (math -> expression .)
    RBRACKET        reduce using rule 79 (math -> expression .)
    DAND            reduce using rule 79 (math -> expression .)
    DOR             reduce using rule 79 (math -> expression .)
    DEQ             reduce using rule 79 (math -> expression .)
    GEQ             reduce using rule 79 (math -> expression .)
    GT              reduce using rule 79 (math -> expression .)
    LEQ             reduce using rule 79 (math -> expression .)
    LT              reduce using rule 79 (math -> expression .)
    NE              reduce using rule 79 (math -> expression .)
    NOT             reduce using rule 79 (math -> expression .)
    RPAREN          reduce using rule 79 (math -> expression .)
    PLUS            shift and go to state 152
    MINUS           shift and go to state 153


state 113

    (80) math -> factor . inc_dec
    (87) term -> factor .
    (77) inc_dec -> . INCREMENT
    (78) inc_dec -> . DECREMENT

    TIMES           reduce using rule 87 (term -> factor .)
    DIVIDE          reduce using rule 87 (term -> factor .)
    MOD             reduce using rule 87 (term -> factor .)
    PLUS            reduce using rule 87 (term -> factor .)
    MINUS           reduce using rule 87 (term -> factor .)
    SEMI            reduce using rule 87 (term -> factor .)
    ASSIGN          reduce using rule 87 (term -> factor .)
    COMMA           reduce using rule 87 (term -> factor .)
    RBRACKET        reduce using rule 87 (term -> factor .)
    DAND            reduce using rule 87 (term -> factor .)
    DOR             reduce using rule 87 (term -> factor .)
    DEQ             reduce using rule 87 (term -> factor .)
    GEQ             reduce using rule 87 (term -> factor .)
    GT              reduce using rule 87 (term -> factor .)
    LEQ             reduce using rule 87 (term -> factor .)
    LT              reduce using rule 87 (term -> factor .)
    NE              reduce using rule 87 (term -> factor .)
    NOT             reduce using rule 87 (term -> factor .)
    RPAREN          reduce using rule 87 (term -> factor .)
    INCREMENT       shift and go to state 72
    DECREMENT       shift and go to state 73

    inc_dec                        shift and go to state 154

state 114

    (83) expression -> term .
    (84) term -> term . TIMES factor
    (85) term -> term . DIVIDE factor
    (86) term -> term . MOD factor

    PLUS            reduce using rule 83 (expression -> term .)
    MINUS           reduce using rule 83 (expression -> term .)
    SEMI            reduce using rule 83 (expression -> term .)
    ASSIGN          reduce using rule 83 (expression -> term .)
    COMMA           reduce using rule 83 (expression -> term .)
    RBRACKET        reduce using rule 83 (expression -> term .)
    RPAREN          reduce using rule 83 (expression -> term .)
    DAND            reduce using rule 83 (expression -> term .)
    DOR             reduce using rule 83 (expression -> term .)
    DEQ             reduce using rule 83 (expression -> term .)
    GEQ             reduce using rule 83 (expression -> term .)
    GT              reduce using rule 83 (expression -> term .)
    LEQ             reduce using rule 83 (expression -> term .)
    LT              reduce using rule 83 (expression -> term .)
    NE              reduce using rule 83 (expression -> term .)
    NOT             reduce using rule 83 (expression -> term .)
    TIMES           shift and go to state 155
    DIVIDE          shift and go to state 156
    MOD             shift and go to state 157


state 115

    (90) factor -> MINUS . LPAREN expression RPAREN
    (88) term -> MINUS . factor
    (89) factor -> . LPAREN expression RPAREN
    (90) factor -> . MINUS LPAREN expression RPAREN
    (91) factor -> . ICONSTANT
    (92) factor -> . DCONSTANT
    (93) factor -> . ID
    (94) factor -> . ID LBRACKET value RBRACKET
    (95) factor -> . ID LBRACKET ID ICONSTANT RBRACKET

    LPAREN          shift and go to state 158
    MINUS           shift and go to state 88
    ICONSTANT       shift and go to state 85
    DCONSTANT       shift and go to state 89
    ID              shift and go to state 116

    factor                         shift and go to state 159

state 116

    (93) factor -> ID .
    (94) factor -> ID . LBRACKET value RBRACKET
    (95) factor -> ID . LBRACKET ID ICONSTANT RBRACKET

    INCREMENT       reduce using rule 93 (factor -> ID .)
    DECREMENT       reduce using rule 93 (factor -> ID .)
    TIMES           reduce using rule 93 (factor -> ID .)
    DIVIDE          reduce using rule 93 (factor -> ID .)
    MOD             reduce using rule 93 (factor -> ID .)
    PLUS            reduce using rule 93 (factor -> ID .)
    MINUS           reduce using rule 93 (factor -> ID .)
    RBRACKET        reduce using rule 93 (factor -> ID .)
    SEMI            reduce using rule 93 (factor -> ID .)
    ASSIGN          reduce using rule 93 (factor -> ID .)
    COMMA           reduce using rule 93 (factor -> ID .)
    RPAREN          reduce using rule 93 (factor -> ID .)
    DAND            reduce using rule 93 (factor -> ID .)
    DOR             reduce using rule 93 (factor -> ID .)
    DEQ             reduce using rule 93 (factor -> ID .)
    GEQ             reduce using rule 93 (factor -> ID .)
    GT              reduce using rule 93 (factor -> ID .)
    LEQ             reduce using rule 93 (factor -> ID .)
    LT              reduce using rule 93 (factor -> ID .)
    NE              reduce using rule 93 (factor -> ID .)
    NOT             reduce using rule 93 (factor -> ID .)
    LBRACKET        shift and go to state 160


state 117

    (54) assign -> ID LBRACKET math . RBRACKET ASSIGN math
    (55) assign -> ID LBRACKET math . RBRACKET ASSIGN SCONSTANT

    RBRACKET        shift and go to state 161


state 118

    (57) assign -> ID ASSIGN_PLUS math .

    SEMI            reduce using rule 57 (assign -> ID ASSIGN_PLUS math .)
    ASSIGN          reduce using rule 57 (assign -> ID ASSIGN_PLUS math .)
    COMMA           reduce using rule 57 (assign -> ID ASSIGN_PLUS math .)


state 119

    (58) assign -> ID ASSIGN_MINUS math .

    SEMI            reduce using rule 58 (assign -> ID ASSIGN_MINUS math .)
    ASSIGN          reduce using rule 58 (assign -> ID ASSIGN_MINUS math .)
    COMMA           reduce using rule 58 (assign -> ID ASSIGN_MINUS math .)


state 120

    (59) assign -> ID ASSIGN_MULTIPLY math .

    SEMI            reduce using rule 59 (assign -> ID ASSIGN_MULTIPLY math .)
    ASSIGN          reduce using rule 59 (assign -> ID ASSIGN_MULTIPLY math .)
    COMMA           reduce using rule 59 (assign -> ID ASSIGN_MULTIPLY math .)


state 121

    (60) assign -> ID ASSIGN_DIVIDE math .

    SEMI            reduce using rule 60 (assign -> ID ASSIGN_DIVIDE math .)
    ASSIGN          reduce using rule 60 (assign -> ID ASSIGN_DIVIDE math .)
    COMMA           reduce using rule 60 (assign -> ID ASSIGN_DIVIDE math .)


state 122

    (61) assign -> ID ASSIGN_MOD math .

    SEMI            reduce using rule 61 (assign -> ID ASSIGN_MOD math .)
    ASSIGN          reduce using rule 61 (assign -> ID ASSIGN_MOD math .)
    COMMA           reduce using rule 61 (assign -> ID ASSIGN_MOD math .)


state 123

    (22) value -> ID .
    (23) value -> ID . LBRACKET value RBRACKET

    RPAREN          reduce using rule 22 (value -> ID .)
    COMMA           reduce using rule 22 (value -> ID .)
    SEMI            reduce using rule 22 (value -> ID .)
    ASSIGN          reduce using rule 22 (value -> ID .)
    RBRACKET        reduce using rule 22 (value -> ID .)
    LBRACKET        shift and go to state 162


state 124

    (72) function_call -> ID LPAREN arguments . RPAREN
    (69) arguments -> arguments . COMMA arguments

    RPAREN          shift and go to state 163
    COMMA           shift and go to state 164


state 125

    (70) arguments -> value .

    RPAREN          reduce using rule 70 (arguments -> value .)
    COMMA           reduce using rule 70 (arguments -> value .)


state 126

    (71) arguments -> epsilon .

    RPAREN          reduce using rule 71 (arguments -> epsilon .)
    COMMA           reduce using rule 71 (arguments -> epsilon .)


state 127

    (49) declare -> declare COMMA ID .
    (51) assign -> ID . ASSIGN value
    (52) assign -> ID . inc_dec
    (53) assign -> ID . ASSIGN math
    (54) assign -> ID . LBRACKET math RBRACKET ASSIGN math
    (55) assign -> ID . LBRACKET math RBRACKET ASSIGN SCONSTANT
    (56) assign -> ID . ASSIGN function_call
    (57) assign -> ID . ASSIGN_PLUS math
    (58) assign -> ID . ASSIGN_MINUS math
    (59) assign -> ID . ASSIGN_MULTIPLY math
    (60) assign -> ID . ASSIGN_DIVIDE math
    (61) assign -> ID . ASSIGN_MOD math
    (77) inc_dec -> . INCREMENT
    (78) inc_dec -> . DECREMENT

    SEMI            reduce using rule 49 (declare -> declare COMMA ID .)
    COMMA           reduce using rule 49 (declare -> declare COMMA ID .)
    ASSIGN          shift and go to state 63
    LBRACKET        shift and go to state 65
    ASSIGN_PLUS     shift and go to state 66
    ASSIGN_MINUS    shift and go to state 67
    ASSIGN_MULTIPLY shift and go to state 68
    ASSIGN_DIVIDE   shift and go to state 69
    ASSIGN_MOD      shift and go to state 70
    INCREMENT       shift and go to state 72
    DECREMENT       shift and go to state 73

    inc_dec                        shift and go to state 64

state 128

    (50) declare -> declare COMMA assign .
    (62) assign -> assign . ASSIGN value

    SEMI            reduce using rule 50 (declare -> declare COMMA assign .)
    COMMA           reduce using rule 50 (declare -> declare COMMA assign .)
    ASSIGN          shift and go to state 81


state 129

    (64) declare_assign -> declare_assign COMMA ID .

    SEMI            reduce using rule 64 (declare_assign -> declare_assign COMMA ID .)
    COMMA           reduce using rule 64 (declare_assign -> declare_assign COMMA ID .)


state 130

    (62) assign -> assign ASSIGN value .

    SEMI            reduce using rule 62 (assign -> assign ASSIGN value .)
    ASSIGN          reduce using rule 62 (assign -> assign ASSIGN value .)
    COMMA           reduce using rule 62 (assign -> assign ASSIGN value .)


state 131

    (45) declare -> type ID LBRACKET . ID RBRACKET
    (46) declare -> type ID LBRACKET . ICONSTANT RBRACKET
    (94) factor -> ID LBRACKET . value RBRACKET
    (95) factor -> ID LBRACKET . ID ICONSTANT RBRACKET
    (19) value -> . ICONSTANT
    (20) value -> . DCONSTANT
    (21) value -> . SCONSTANT
    (22) value -> . ID
    (23) value -> . ID LBRACKET value RBRACKET

    ID              shift and go to state 165
    ICONSTANT       shift and go to state 166
    DCONSTANT       shift and go to state 101
    SCONSTANT       shift and go to state 102

    value                          shift and go to state 167

state 132

    (63) declare_assign -> type ID ASSIGN . value
    (19) value -> . ICONSTANT
    (20) value -> . DCONSTANT
    (21) value -> . SCONSTANT
    (22) value -> . ID
    (23) value -> . ID LBRACKET value RBRACKET

    ICONSTANT       shift and go to state 100
    DCONSTANT       shift and go to state 101
    SCONSTANT       shift and go to state 102
    ID              shift and go to state 123

    value                          shift and go to state 168

state 133

    (47) declare -> type factor COMMA . factor COMMA factor
    (48) declare -> type factor COMMA . factor
    (89) factor -> . LPAREN expression RPAREN
    (90) factor -> . MINUS LPAREN expression RPAREN
    (91) factor -> . ICONSTANT
    (92) factor -> . DCONSTANT
    (93) factor -> . ID
    (94) factor -> . ID LBRACKET value RBRACKET
    (95) factor -> . ID LBRACKET ID ICONSTANT RBRACKET

    LPAREN          shift and go to state 87
    MINUS           shift and go to state 88
    ICONSTANT       shift and go to state 85
    DCONSTANT       shift and go to state 89
    ID              shift and go to state 116

    factor                         shift and go to state 169

state 134

    (89) factor -> LPAREN expression . RPAREN
    (81) expression -> expression . PLUS term
    (82) expression -> expression . MINUS term

    RPAREN          shift and go to state 170
    PLUS            shift and go to state 152
    MINUS           shift and go to state 153


state 135

    (88) term -> MINUS . factor
    (90) factor -> MINUS . LPAREN expression RPAREN
    (89) factor -> . LPAREN expression RPAREN
    (90) factor -> . MINUS LPAREN expression RPAREN
    (91) factor -> . ICONSTANT
    (92) factor -> . DCONSTANT
    (93) factor -> . ID
    (94) factor -> . ID LBRACKET value RBRACKET
    (95) factor -> . ID LBRACKET ID ICONSTANT RBRACKET

    LPAREN          shift and go to state 158
    MINUS           shift and go to state 88
    ICONSTANT       shift and go to state 85
    DCONSTANT       shift and go to state 89
    ID              shift and go to state 116

    factor                         shift and go to state 159

state 136

    (87) term -> factor .

    TIMES           reduce using rule 87 (term -> factor .)
    DIVIDE          reduce using rule 87 (term -> factor .)
    MOD             reduce using rule 87 (term -> factor .)
    RPAREN          reduce using rule 87 (term -> factor .)
    PLUS            reduce using rule 87 (term -> factor .)
    MINUS           reduce using rule 87 (term -> factor .)
    SEMI            reduce using rule 87 (term -> factor .)
    ASSIGN          reduce using rule 87 (term -> factor .)
    COMMA           reduce using rule 87 (term -> factor .)
    RBRACKET        reduce using rule 87 (term -> factor .)
    DAND            reduce using rule 87 (term -> factor .)
    DOR             reduce using rule 87 (term -> factor .)
    DEQ             reduce using rule 87 (term -> factor .)
    GEQ             reduce using rule 87 (term -> factor .)
    GT              reduce using rule 87 (term -> factor .)
    LEQ             reduce using rule 87 (term -> factor .)
    LT              reduce using rule 87 (term -> factor .)
    NE              reduce using rule 87 (term -> factor .)
    NOT             reduce using rule 87 (term -> factor .)


state 137

    (90) factor -> MINUS LPAREN . expression RPAREN
    (81) expression -> . expression PLUS term
    (82) expression -> . expression MINUS term
    (83) expression -> . term
    (84) term -> . term TIMES factor
    (85) term -> . term DIVIDE factor
    (86) term -> . term MOD factor
    (87) term -> . factor
    (88) term -> . MINUS factor
    (89) factor -> . LPAREN expression RPAREN
    (90) factor -> . MINUS LPAREN expression RPAREN
    (91) factor -> . ICONSTANT
    (92) factor -> . DCONSTANT
    (93) factor -> . ID
    (94) factor -> . ID LBRACKET value RBRACKET
    (95) factor -> . ID LBRACKET ID ICONSTANT RBRACKET

    MINUS           shift and go to state 135
    LPAREN          shift and go to state 87
    ICONSTANT       shift and go to state 85
    DCONSTANT       shift and go to state 89
    ID              shift and go to state 116

    expression                     shift and go to state 171
    term                           shift and go to state 114
    factor                         shift and go to state 136

state 138

    (65) print -> K_PRINT_INTEGER LPAREN value . RPAREN SEMI

    RPAREN          shift and go to state 172


state 139

    (66) print -> K_PRINT_STRING LPAREN value . RPAREN SEMI

    RPAREN          shift and go to state 173


state 140

    (67) print -> K_PRINT_DOUBLE LPAREN value . RPAREN SEMI

    RPAREN          shift and go to state 174


state 141

    (109) while -> K_WHILE LPAREN bool . RPAREN statement
    (110) while -> K_WHILE LPAREN bool . RPAREN LCURLY statements RCURLY

    RPAREN          shift and go to state 175


state 142

    (107) bool -> condition . bool_op condition
    (108) bool -> condition .
    (96) bool_op -> . DAND
    (97) bool_op -> . DOR
    (98) bool_op -> . DEQ
    (99) bool_op -> . GEQ
    (100) bool_op -> . GT
    (101) bool_op -> . LEQ
    (102) bool_op -> . LT
    (103) bool_op -> . NE
    (104) bool_op -> . NOT

    RPAREN          reduce using rule 108 (bool -> condition .)
    DAND            shift and go to state 177
    DOR             shift and go to state 178
    DEQ             shift and go to state 179
    GEQ             shift and go to state 180
    GT              shift and go to state 181
    LEQ             shift and go to state 182
    LT              shift and go to state 183
    NE              shift and go to state 184
    NOT             shift and go to state 185

    bool_op                        shift and go to state 176

state 143

    (105) condition -> math . bool_op math
    (96) bool_op -> . DAND
    (97) bool_op -> . DOR
    (98) bool_op -> . DEQ
    (99) bool_op -> . GEQ
    (100) bool_op -> . GT
    (101) bool_op -> . LEQ
    (102) bool_op -> . LT
    (103) bool_op -> . NE
    (104) bool_op -> . NOT

    DAND            shift and go to state 177
    DOR             shift and go to state 178
    DEQ             shift and go to state 179
    GEQ             shift and go to state 180
    GT              shift and go to state 181
    LEQ             shift and go to state 182
    LT              shift and go to state 183
    NE              shift and go to state 184
    NOT             shift and go to state 185

    bool_op                        shift and go to state 186

state 144

    (106) condition -> function_call . bool_op math
    (96) bool_op -> . DAND
    (97) bool_op -> . DOR
    (98) bool_op -> . DEQ
    (99) bool_op -> . GEQ
    (100) bool_op -> . GT
    (101) bool_op -> . LEQ
    (102) bool_op -> . LT
    (103) bool_op -> . NE
    (104) bool_op -> . NOT

    DAND            shift and go to state 177
    DOR             shift and go to state 178
    DEQ             shift and go to state 179
    GEQ             shift and go to state 180
    GT              shift and go to state 181
    LEQ             shift and go to state 182
    LT              shift and go to state 183
    NE              shift and go to state 184
    NOT             shift and go to state 185

    bool_op                        shift and go to state 187

state 145

    (72) function_call -> ID . LPAREN arguments RPAREN
    (93) factor -> ID .
    (94) factor -> ID . LBRACKET value RBRACKET
    (95) factor -> ID . LBRACKET ID ICONSTANT RBRACKET

    LPAREN          shift and go to state 71
    INCREMENT       reduce using rule 93 (factor -> ID .)
    DECREMENT       reduce using rule 93 (factor -> ID .)
    TIMES           reduce using rule 93 (factor -> ID .)
    DIVIDE          reduce using rule 93 (factor -> ID .)
    MOD             reduce using rule 93 (factor -> ID .)
    PLUS            reduce using rule 93 (factor -> ID .)
    MINUS           reduce using rule 93 (factor -> ID .)
    DAND            reduce using rule 93 (factor -> ID .)
    DOR             reduce using rule 93 (factor -> ID .)
    DEQ             reduce using rule 93 (factor -> ID .)
    GEQ             reduce using rule 93 (factor -> ID .)
    GT              reduce using rule 93 (factor -> ID .)
    LEQ             reduce using rule 93 (factor -> ID .)
    LT              reduce using rule 93 (factor -> ID .)
    NE              reduce using rule 93 (factor -> ID .)
    NOT             reduce using rule 93 (factor -> ID .)
    LBRACKET        shift and go to state 160


state 146

    (112) do -> K_DO LPAREN do_assign . SEMI condition SEMI ID inc_dec RPAREN LCURLY statements RCURLY
    (113) do -> K_DO LPAREN do_assign . SEMI condition SEMI ID inc_dec RPAREN statement

    SEMI            shift and go to state 188


state 147

    (111) do_assign -> ID . ASSIGN ICONSTANT

    ASSIGN          shift and go to state 189


state 148

    (114) if -> K_IF LPAREN bool . RPAREN K_THEN LCURLY statements RCURLY else_if
    (115) if -> K_IF LPAREN bool . RPAREN K_THEN statement else_if

    RPAREN          shift and go to state 190


state 149

    (68) read -> K_READ_INTEGER LPAREN ID . RPAREN SEMI

    RPAREN          shift and go to state 191


state 150

    (23) value -> ID LBRACKET . value RBRACKET
    (54) assign -> ID LBRACKET . math RBRACKET ASSIGN math
    (55) assign -> ID LBRACKET . math RBRACKET ASSIGN SCONSTANT
    (19) value -> . ICONSTANT
    (20) value -> . DCONSTANT
    (21) value -> . SCONSTANT
    (22) value -> . ID
    (23) value -> . ID LBRACKET value RBRACKET
    (79) math -> . expression
    (80) math -> . factor inc_dec
    (81) expression -> . expression PLUS term
    (82) expression -> . expression MINUS term
    (83) expression -> . term
    (89) factor -> . LPAREN expression RPAREN
    (90) factor -> . MINUS LPAREN expression RPAREN
    (91) factor -> . ICONSTANT
    (92) factor -> . DCONSTANT
    (93) factor -> . ID
    (94) factor -> . ID LBRACKET value RBRACKET
    (95) factor -> . ID LBRACKET ID ICONSTANT RBRACKET
    (84) term -> . term TIMES factor
    (85) term -> . term DIVIDE factor
    (86) term -> . term MOD factor
    (87) term -> . factor
    (88) term -> . MINUS factor

    ICONSTANT       shift and go to state 110
    DCONSTANT       shift and go to state 111
    SCONSTANT       shift and go to state 102
    ID              shift and go to state 192
    LPAREN          shift and go to state 87
    MINUS           shift and go to state 115

    value                          shift and go to state 193
    math                           shift and go to state 117
    expression                     shift and go to state 112
    factor                         shift and go to state 113
    term                           shift and go to state 114

state 151

    (23) value -> ID LBRACKET . value RBRACKET
    (94) factor -> ID LBRACKET . value RBRACKET
    (95) factor -> ID LBRACKET . ID ICONSTANT RBRACKET
    (19) value -> . ICONSTANT
    (20) value -> . DCONSTANT
    (21) value -> . SCONSTANT
    (22) value -> . ID
    (23) value -> . ID LBRACKET value RBRACKET

    ID              shift and go to state 194
    ICONSTANT       shift and go to state 100
    DCONSTANT       shift and go to state 101
    SCONSTANT       shift and go to state 102

    value                          shift and go to state 195

state 152

    (81) expression -> expression PLUS . term
    (84) term -> . term TIMES factor
    (85) term -> . term DIVIDE factor
    (86) term -> . term MOD factor
    (87) term -> . factor
    (88) term -> . MINUS factor
    (89) factor -> . LPAREN expression RPAREN
    (90) factor -> . MINUS LPAREN expression RPAREN
    (91) factor -> . ICONSTANT
    (92) factor -> . DCONSTANT
    (93) factor -> . ID
    (94) factor -> . ID LBRACKET value RBRACKET
    (95) factor -> . ID LBRACKET ID ICONSTANT RBRACKET

    MINUS           shift and go to state 135
    LPAREN          shift and go to state 87
    ICONSTANT       shift and go to state 85
    DCONSTANT       shift and go to state 89
    ID              shift and go to state 116

    term                           shift and go to state 196
    factor                         shift and go to state 136

state 153

    (82) expression -> expression MINUS . term
    (84) term -> . term TIMES factor
    (85) term -> . term DIVIDE factor
    (86) term -> . term MOD factor
    (87) term -> . factor
    (88) term -> . MINUS factor
    (89) factor -> . LPAREN expression RPAREN
    (90) factor -> . MINUS LPAREN expression RPAREN
    (91) factor -> . ICONSTANT
    (92) factor -> . DCONSTANT
    (93) factor -> . ID
    (94) factor -> . ID LBRACKET value RBRACKET
    (95) factor -> . ID LBRACKET ID ICONSTANT RBRACKET

    MINUS           shift and go to state 135
    LPAREN          shift and go to state 87
    ICONSTANT       shift and go to state 85
    DCONSTANT       shift and go to state 89
    ID              shift and go to state 116

    term                           shift and go to state 197
    factor                         shift and go to state 136

state 154

    (80) math -> factor inc_dec .

    SEMI            reduce using rule 80 (math -> factor inc_dec .)
    ASSIGN          reduce using rule 80 (math -> factor inc_dec .)
    COMMA           reduce using rule 80 (math -> factor inc_dec .)
    RBRACKET        reduce using rule 80 (math -> factor inc_dec .)
    DAND            reduce using rule 80 (math -> factor inc_dec .)
    DOR             reduce using rule 80 (math -> factor inc_dec .)
    DEQ             reduce using rule 80 (math -> factor inc_dec .)
    GEQ             reduce using rule 80 (math -> factor inc_dec .)
    GT              reduce using rule 80 (math -> factor inc_dec .)
    LEQ             reduce using rule 80 (math -> factor inc_dec .)
    LT              reduce using rule 80 (math -> factor inc_dec .)
    NE              reduce using rule 80 (math -> factor inc_dec .)
    NOT             reduce using rule 80 (math -> factor inc_dec .)
    RPAREN          reduce using rule 80 (math -> factor inc_dec .)


state 155

    (84) term -> term TIMES . factor
    (89) factor -> . LPAREN expression RPAREN
    (90) factor -> . MINUS LPAREN expression RPAREN
    (91) factor -> . ICONSTANT
    (92) factor -> . DCONSTANT
    (93) factor -> . ID
    (94) factor -> . ID LBRACKET value RBRACKET
    (95) factor -> . ID LBRACKET ID ICONSTANT RBRACKET

    LPAREN          shift and go to state 87
    MINUS           shift and go to state 88
    ICONSTANT       shift and go to state 85
    DCONSTANT       shift and go to state 89
    ID              shift and go to state 116

    factor                         shift and go to state 198

state 156

    (85) term -> term DIVIDE . factor
    (89) factor -> . LPAREN expression RPAREN
    (90) factor -> . MINUS LPAREN expression RPAREN
    (91) factor -> . ICONSTANT
    (92) factor -> . DCONSTANT
    (93) factor -> . ID
    (94) factor -> . ID LBRACKET value RBRACKET
    (95) factor -> . ID LBRACKET ID ICONSTANT RBRACKET

    LPAREN          shift and go to state 87
    MINUS           shift and go to state 88
    ICONSTANT       shift and go to state 85
    DCONSTANT       shift and go to state 89
    ID              shift and go to state 116

    factor                         shift and go to state 199

state 157

    (86) term -> term MOD . factor
    (89) factor -> . LPAREN expression RPAREN
    (90) factor -> . MINUS LPAREN expression RPAREN
    (91) factor -> . ICONSTANT
    (92) factor -> . DCONSTANT
    (93) factor -> . ID
    (94) factor -> . ID LBRACKET value RBRACKET
    (95) factor -> . ID LBRACKET ID ICONSTANT RBRACKET

    LPAREN          shift and go to state 87
    MINUS           shift and go to state 88
    ICONSTANT       shift and go to state 85
    DCONSTANT       shift and go to state 89
    ID              shift and go to state 116

    factor                         shift and go to state 200

state 158

    (90) factor -> MINUS LPAREN . expression RPAREN
    (89) factor -> LPAREN . expression RPAREN
    (81) expression -> . expression PLUS term
    (82) expression -> . expression MINUS term
    (83) expression -> . term
    (84) term -> . term TIMES factor
    (85) term -> . term DIVIDE factor
    (86) term -> . term MOD factor
    (87) term -> . factor
    (88) term -> . MINUS factor
    (89) factor -> . LPAREN expression RPAREN
    (90) factor -> . MINUS LPAREN expression RPAREN
    (91) factor -> . ICONSTANT
    (92) factor -> . DCONSTANT
    (93) factor -> . ID
    (94) factor -> . ID LBRACKET value RBRACKET
    (95) factor -> . ID LBRACKET ID ICONSTANT RBRACKET

    MINUS           shift and go to state 135
    LPAREN          shift and go to state 87
    ICONSTANT       shift and go to state 85
    DCONSTANT       shift and go to state 89
    ID              shift and go to state 116

    expression                     shift and go to state 201
    term                           shift and go to state 114
    factor                         shift and go to state 136

state 159

    (88) term -> MINUS factor .

    TIMES           reduce using rule 88 (term -> MINUS factor .)
    DIVIDE          reduce using rule 88 (term -> MINUS factor .)
    MOD             reduce using rule 88 (term -> MINUS factor .)
    PLUS            reduce using rule 88 (term -> MINUS factor .)
    MINUS           reduce using rule 88 (term -> MINUS factor .)
    SEMI            reduce using rule 88 (term -> MINUS factor .)
    ASSIGN          reduce using rule 88 (term -> MINUS factor .)
    COMMA           reduce using rule 88 (term -> MINUS factor .)
    RBRACKET        reduce using rule 88 (term -> MINUS factor .)
    RPAREN          reduce using rule 88 (term -> MINUS factor .)
    DAND            reduce using rule 88 (term -> MINUS factor .)
    DOR             reduce using rule 88 (term -> MINUS factor .)
    DEQ             reduce using rule 88 (term -> MINUS factor .)
    GEQ             reduce using rule 88 (term -> MINUS factor .)
    GT              reduce using rule 88 (term -> MINUS factor .)
    LEQ             reduce using rule 88 (term -> MINUS factor .)
    LT              reduce using rule 88 (term -> MINUS factor .)
    NE              reduce using rule 88 (term -> MINUS factor .)
    NOT             reduce using rule 88 (term -> MINUS factor .)


state 160

    (94) factor -> ID LBRACKET . value RBRACKET
    (95) factor -> ID LBRACKET . ID ICONSTANT RBRACKET
    (19) value -> . ICONSTANT
    (20) value -> . DCONSTANT
    (21) value -> . SCONSTANT
    (22) value -> . ID
    (23) value -> . ID LBRACKET value RBRACKET

    ID              shift and go to state 194
    ICONSTANT       shift and go to state 100
    DCONSTANT       shift and go to state 101
    SCONSTANT       shift and go to state 102

    value                          shift and go to state 167

state 161

    (54) assign -> ID LBRACKET math RBRACKET . ASSIGN math
    (55) assign -> ID LBRACKET math RBRACKET . ASSIGN SCONSTANT

    ASSIGN          shift and go to state 202


state 162

    (23) value -> ID LBRACKET . value RBRACKET
    (19) value -> . ICONSTANT
    (20) value -> . DCONSTANT
    (21) value -> . SCONSTANT
    (22) value -> . ID
    (23) value -> . ID LBRACKET value RBRACKET

    ICONSTANT       shift and go to state 100
    DCONSTANT       shift and go to state 101
    SCONSTANT       shift and go to state 102
    ID              shift and go to state 123

    value                          shift and go to state 193

state 163

    (72) function_call -> ID LPAREN arguments RPAREN .

    SEMI            reduce using rule 72 (function_call -> ID LPAREN arguments RPAREN .)
    ASSIGN          reduce using rule 72 (function_call -> ID LPAREN arguments RPAREN .)
    COMMA           reduce using rule 72 (function_call -> ID LPAREN arguments RPAREN .)
    DAND            reduce using rule 72 (function_call -> ID LPAREN arguments RPAREN .)
    DOR             reduce using rule 72 (function_call -> ID LPAREN arguments RPAREN .)
    DEQ             reduce using rule 72 (function_call -> ID LPAREN arguments RPAREN .)
    GEQ             reduce using rule 72 (function_call -> ID LPAREN arguments RPAREN .)
    GT              reduce using rule 72 (function_call -> ID LPAREN arguments RPAREN .)
    LEQ             reduce using rule 72 (function_call -> ID LPAREN arguments RPAREN .)
    LT              reduce using rule 72 (function_call -> ID LPAREN arguments RPAREN .)
    NE              reduce using rule 72 (function_call -> ID LPAREN arguments RPAREN .)
    NOT             reduce using rule 72 (function_call -> ID LPAREN arguments RPAREN .)


state 164

    (69) arguments -> arguments COMMA . arguments
    (69) arguments -> . arguments COMMA arguments
    (70) arguments -> . value
    (71) arguments -> . epsilon
    (19) value -> . ICONSTANT
    (20) value -> . DCONSTANT
    (21) value -> . SCONSTANT
    (22) value -> . ID
    (23) value -> . ID LBRACKET value RBRACKET
    (122) epsilon -> .

    ICONSTANT       shift and go to state 100
    DCONSTANT       shift and go to state 101
    SCONSTANT       shift and go to state 102
    ID              shift and go to state 123
    COMMA           reduce using rule 122 (epsilon -> .)
    RPAREN          reduce using rule 122 (epsilon -> .)

    arguments                      shift and go to state 203
    value                          shift and go to state 125
    epsilon                        shift and go to state 126

state 165

    (45) declare -> type ID LBRACKET ID . RBRACKET
    (95) factor -> ID LBRACKET ID . ICONSTANT RBRACKET
    (22) value -> ID .
    (23) value -> ID . LBRACKET value RBRACKET

  ! shift/reduce conflict for RBRACKET resolved as shift
    RBRACKET        shift and go to state 204
    ICONSTANT       shift and go to state 205
    LBRACKET        shift and go to state 162

  ! RBRACKET        [ reduce using rule 22 (value -> ID .) ]


state 166

    (46) declare -> type ID LBRACKET ICONSTANT . RBRACKET
    (19) value -> ICONSTANT .

  ! shift/reduce conflict for RBRACKET resolved as shift
    RBRACKET        shift and go to state 206

  ! RBRACKET        [ reduce using rule 19 (value -> ICONSTANT .) ]


state 167

    (94) factor -> ID LBRACKET value . RBRACKET

    RBRACKET        shift and go to state 207


state 168

    (63) declare_assign -> type ID ASSIGN value .

    SEMI            reduce using rule 63 (declare_assign -> type ID ASSIGN value .)
    COMMA           reduce using rule 63 (declare_assign -> type ID ASSIGN value .)


state 169

    (47) declare -> type factor COMMA factor . COMMA factor
    (48) declare -> type factor COMMA factor .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 208
    SEMI            reduce using rule 48 (declare -> type factor COMMA factor .)

  ! COMMA           [ reduce using rule 48 (declare -> type factor COMMA factor .) ]


state 170

    (89) factor -> LPAREN expression RPAREN .

    COMMA           reduce using rule 89 (factor -> LPAREN expression RPAREN .)
    INCREMENT       reduce using rule 89 (factor -> LPAREN expression RPAREN .)
    DECREMENT       reduce using rule 89 (factor -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 89 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 89 (factor -> LPAREN expression RPAREN .)
    MOD             reduce using rule 89 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 89 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 89 (factor -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 89 (factor -> LPAREN expression RPAREN .)
    ASSIGN          reduce using rule 89 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 89 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 89 (factor -> LPAREN expression RPAREN .)
    DAND            reduce using rule 89 (factor -> LPAREN expression RPAREN .)
    DOR             reduce using rule 89 (factor -> LPAREN expression RPAREN .)
    DEQ             reduce using rule 89 (factor -> LPAREN expression RPAREN .)
    GEQ             reduce using rule 89 (factor -> LPAREN expression RPAREN .)
    GT              reduce using rule 89 (factor -> LPAREN expression RPAREN .)
    LEQ             reduce using rule 89 (factor -> LPAREN expression RPAREN .)
    LT              reduce using rule 89 (factor -> LPAREN expression RPAREN .)
    NE              reduce using rule 89 (factor -> LPAREN expression RPAREN .)
    NOT             reduce using rule 89 (factor -> LPAREN expression RPAREN .)


state 171

    (90) factor -> MINUS LPAREN expression . RPAREN
    (81) expression -> expression . PLUS term
    (82) expression -> expression . MINUS term

    RPAREN          shift and go to state 209
    PLUS            shift and go to state 152
    MINUS           shift and go to state 153


state 172

    (65) print -> K_PRINT_INTEGER LPAREN value RPAREN . SEMI

    SEMI            shift and go to state 210


state 173

    (66) print -> K_PRINT_STRING LPAREN value RPAREN . SEMI

    SEMI            shift and go to state 211


state 174

    (67) print -> K_PRINT_DOUBLE LPAREN value RPAREN . SEMI

    SEMI            shift and go to state 212


state 175

    (109) while -> K_WHILE LPAREN bool RPAREN . statement
    (110) while -> K_WHILE LPAREN bool RPAREN . LCURLY statements RCURLY
    (36) statement -> . declare SEMI
    (37) statement -> . declare_assign SEMI
    (38) statement -> . assign SEMI
    (39) statement -> . print
    (40) statement -> . function_call SEMI
    (41) statement -> . read
    (42) statement -> . return SEMI
    (44) declare -> . type ID
    (45) declare -> . type ID LBRACKET ID RBRACKET
    (46) declare -> . type ID LBRACKET ICONSTANT RBRACKET
    (47) declare -> . type factor COMMA factor COMMA factor
    (48) declare -> . type factor COMMA factor
    (49) declare -> . declare COMMA ID
    (50) declare -> . declare COMMA assign
    (63) declare_assign -> . type ID ASSIGN value
    (64) declare_assign -> . declare_assign COMMA ID
    (51) assign -> . ID ASSIGN value
    (52) assign -> . ID inc_dec
    (53) assign -> . ID ASSIGN math
    (54) assign -> . ID LBRACKET math RBRACKET ASSIGN math
    (55) assign -> . ID LBRACKET math RBRACKET ASSIGN SCONSTANT
    (56) assign -> . ID ASSIGN function_call
    (57) assign -> . ID ASSIGN_PLUS math
    (58) assign -> . ID ASSIGN_MINUS math
    (59) assign -> . ID ASSIGN_MULTIPLY math
    (60) assign -> . ID ASSIGN_DIVIDE math
    (61) assign -> . ID ASSIGN_MOD math
    (62) assign -> . assign ASSIGN value
    (65) print -> . K_PRINT_INTEGER LPAREN value RPAREN SEMI
    (66) print -> . K_PRINT_STRING LPAREN value RPAREN SEMI
    (67) print -> . K_PRINT_DOUBLE LPAREN value RPAREN SEMI
    (72) function_call -> . ID LPAREN arguments RPAREN
    (68) read -> . K_READ_INTEGER LPAREN ID RPAREN SEMI
    (73) return -> . K_RETURN value
    (74) return -> . epsilon
    (75) return -> . K_RETURN function_call
    (76) return -> . K_RETURN assign
    (6) type -> . K_INTEGER
    (7) type -> . K_DOUBLE
    (8) type -> . K_STRING
    (122) epsilon -> .

    LCURLY          shift and go to state 214
    ID              shift and go to state 37
    K_PRINT_INTEGER shift and go to state 51
    K_PRINT_STRING  shift and go to state 52
    K_PRINT_DOUBLE  shift and go to state 53
    K_READ_INTEGER  shift and go to state 57
    K_RETURN        shift and go to state 58
    K_INTEGER       shift and go to state 17
    K_DOUBLE        shift and go to state 18
    K_STRING        shift and go to state 19
    SEMI            reduce using rule 122 (epsilon -> .)

    statement                      shift and go to state 213
    declare                        shift and go to state 215
    declare_assign                 shift and go to state 216
    assign                         shift and go to state 217
    print                          shift and go to state 218
    function_call                  shift and go to state 219
    read                           shift and go to state 220
    return                         shift and go to state 221
    type                           shift and go to state 50
    epsilon                        shift and go to state 222

state 176

    (107) bool -> condition bool_op . condition
    (105) condition -> . math bool_op math
    (106) condition -> . function_call bool_op math
    (79) math -> . expression
    (80) math -> . factor inc_dec
    (72) function_call -> . ID LPAREN arguments RPAREN
    (81) expression -> . expression PLUS term
    (82) expression -> . expression MINUS term
    (83) expression -> . term
    (89) factor -> . LPAREN expression RPAREN
    (90) factor -> . MINUS LPAREN expression RPAREN
    (91) factor -> . ICONSTANT
    (92) factor -> . DCONSTANT
    (93) factor -> . ID
    (94) factor -> . ID LBRACKET value RBRACKET
    (95) factor -> . ID LBRACKET ID ICONSTANT RBRACKET
    (84) term -> . term TIMES factor
    (85) term -> . term DIVIDE factor
    (86) term -> . term MOD factor
    (87) term -> . factor
    (88) term -> . MINUS factor

    ID              shift and go to state 145
    LPAREN          shift and go to state 87
    MINUS           shift and go to state 115
    ICONSTANT       shift and go to state 85
    DCONSTANT       shift and go to state 89

    condition                      shift and go to state 223
    math                           shift and go to state 143
    function_call                  shift and go to state 144
    expression                     shift and go to state 112
    factor                         shift and go to state 113
    term                           shift and go to state 114

state 177

    (96) bool_op -> DAND .

    ID              reduce using rule 96 (bool_op -> DAND .)
    LPAREN          reduce using rule 96 (bool_op -> DAND .)
    MINUS           reduce using rule 96 (bool_op -> DAND .)
    ICONSTANT       reduce using rule 96 (bool_op -> DAND .)
    DCONSTANT       reduce using rule 96 (bool_op -> DAND .)


state 178

    (97) bool_op -> DOR .

    ID              reduce using rule 97 (bool_op -> DOR .)
    LPAREN          reduce using rule 97 (bool_op -> DOR .)
    MINUS           reduce using rule 97 (bool_op -> DOR .)
    ICONSTANT       reduce using rule 97 (bool_op -> DOR .)
    DCONSTANT       reduce using rule 97 (bool_op -> DOR .)


state 179

    (98) bool_op -> DEQ .

    ID              reduce using rule 98 (bool_op -> DEQ .)
    LPAREN          reduce using rule 98 (bool_op -> DEQ .)
    MINUS           reduce using rule 98 (bool_op -> DEQ .)
    ICONSTANT       reduce using rule 98 (bool_op -> DEQ .)
    DCONSTANT       reduce using rule 98 (bool_op -> DEQ .)


state 180

    (99) bool_op -> GEQ .

    ID              reduce using rule 99 (bool_op -> GEQ .)
    LPAREN          reduce using rule 99 (bool_op -> GEQ .)
    MINUS           reduce using rule 99 (bool_op -> GEQ .)
    ICONSTANT       reduce using rule 99 (bool_op -> GEQ .)
    DCONSTANT       reduce using rule 99 (bool_op -> GEQ .)


state 181

    (100) bool_op -> GT .

    ID              reduce using rule 100 (bool_op -> GT .)
    LPAREN          reduce using rule 100 (bool_op -> GT .)
    MINUS           reduce using rule 100 (bool_op -> GT .)
    ICONSTANT       reduce using rule 100 (bool_op -> GT .)
    DCONSTANT       reduce using rule 100 (bool_op -> GT .)


state 182

    (101) bool_op -> LEQ .

    ID              reduce using rule 101 (bool_op -> LEQ .)
    LPAREN          reduce using rule 101 (bool_op -> LEQ .)
    MINUS           reduce using rule 101 (bool_op -> LEQ .)
    ICONSTANT       reduce using rule 101 (bool_op -> LEQ .)
    DCONSTANT       reduce using rule 101 (bool_op -> LEQ .)


state 183

    (102) bool_op -> LT .

    ID              reduce using rule 102 (bool_op -> LT .)
    LPAREN          reduce using rule 102 (bool_op -> LT .)
    MINUS           reduce using rule 102 (bool_op -> LT .)
    ICONSTANT       reduce using rule 102 (bool_op -> LT .)
    DCONSTANT       reduce using rule 102 (bool_op -> LT .)


state 184

    (103) bool_op -> NE .

    ID              reduce using rule 103 (bool_op -> NE .)
    LPAREN          reduce using rule 103 (bool_op -> NE .)
    MINUS           reduce using rule 103 (bool_op -> NE .)
    ICONSTANT       reduce using rule 103 (bool_op -> NE .)
    DCONSTANT       reduce using rule 103 (bool_op -> NE .)


state 185

    (104) bool_op -> NOT .

    ID              reduce using rule 104 (bool_op -> NOT .)
    LPAREN          reduce using rule 104 (bool_op -> NOT .)
    MINUS           reduce using rule 104 (bool_op -> NOT .)
    ICONSTANT       reduce using rule 104 (bool_op -> NOT .)
    DCONSTANT       reduce using rule 104 (bool_op -> NOT .)


state 186

    (105) condition -> math bool_op . math
    (79) math -> . expression
    (80) math -> . factor inc_dec
    (81) expression -> . expression PLUS term
    (82) expression -> . expression MINUS term
    (83) expression -> . term
    (89) factor -> . LPAREN expression RPAREN
    (90) factor -> . MINUS LPAREN expression RPAREN
    (91) factor -> . ICONSTANT
    (92) factor -> . DCONSTANT
    (93) factor -> . ID
    (94) factor -> . ID LBRACKET value RBRACKET
    (95) factor -> . ID LBRACKET ID ICONSTANT RBRACKET
    (84) term -> . term TIMES factor
    (85) term -> . term DIVIDE factor
    (86) term -> . term MOD factor
    (87) term -> . factor
    (88) term -> . MINUS factor

    LPAREN          shift and go to state 87
    MINUS           shift and go to state 115
    ICONSTANT       shift and go to state 85
    DCONSTANT       shift and go to state 89
    ID              shift and go to state 116

    math                           shift and go to state 224
    expression                     shift and go to state 112
    factor                         shift and go to state 113
    term                           shift and go to state 114

state 187

    (106) condition -> function_call bool_op . math
    (79) math -> . expression
    (80) math -> . factor inc_dec
    (81) expression -> . expression PLUS term
    (82) expression -> . expression MINUS term
    (83) expression -> . term
    (89) factor -> . LPAREN expression RPAREN
    (90) factor -> . MINUS LPAREN expression RPAREN
    (91) factor -> . ICONSTANT
    (92) factor -> . DCONSTANT
    (93) factor -> . ID
    (94) factor -> . ID LBRACKET value RBRACKET
    (95) factor -> . ID LBRACKET ID ICONSTANT RBRACKET
    (84) term -> . term TIMES factor
    (85) term -> . term DIVIDE factor
    (86) term -> . term MOD factor
    (87) term -> . factor
    (88) term -> . MINUS factor

    LPAREN          shift and go to state 87
    MINUS           shift and go to state 115
    ICONSTANT       shift and go to state 85
    DCONSTANT       shift and go to state 89
    ID              shift and go to state 116

    math                           shift and go to state 225
    expression                     shift and go to state 112
    factor                         shift and go to state 113
    term                           shift and go to state 114

state 188

    (112) do -> K_DO LPAREN do_assign SEMI . condition SEMI ID inc_dec RPAREN LCURLY statements RCURLY
    (113) do -> K_DO LPAREN do_assign SEMI . condition SEMI ID inc_dec RPAREN statement
    (105) condition -> . math bool_op math
    (106) condition -> . function_call bool_op math
    (79) math -> . expression
    (80) math -> . factor inc_dec
    (72) function_call -> . ID LPAREN arguments RPAREN
    (81) expression -> . expression PLUS term
    (82) expression -> . expression MINUS term
    (83) expression -> . term
    (89) factor -> . LPAREN expression RPAREN
    (90) factor -> . MINUS LPAREN expression RPAREN
    (91) factor -> . ICONSTANT
    (92) factor -> . DCONSTANT
    (93) factor -> . ID
    (94) factor -> . ID LBRACKET value RBRACKET
    (95) factor -> . ID LBRACKET ID ICONSTANT RBRACKET
    (84) term -> . term TIMES factor
    (85) term -> . term DIVIDE factor
    (86) term -> . term MOD factor
    (87) term -> . factor
    (88) term -> . MINUS factor

    ID              shift and go to state 145
    LPAREN          shift and go to state 87
    MINUS           shift and go to state 115
    ICONSTANT       shift and go to state 85
    DCONSTANT       shift and go to state 89

    condition                      shift and go to state 226
    math                           shift and go to state 143
    function_call                  shift and go to state 144
    expression                     shift and go to state 112
    factor                         shift and go to state 113
    term                           shift and go to state 114

state 189

    (111) do_assign -> ID ASSIGN . ICONSTANT

    ICONSTANT       shift and go to state 227


state 190

    (114) if -> K_IF LPAREN bool RPAREN . K_THEN LCURLY statements RCURLY else_if
    (115) if -> K_IF LPAREN bool RPAREN . K_THEN statement else_if

    K_THEN          shift and go to state 228


state 191

    (68) read -> K_READ_INTEGER LPAREN ID RPAREN . SEMI

    SEMI            shift and go to state 229


state 192

    (22) value -> ID .
    (23) value -> ID . LBRACKET value RBRACKET
    (93) factor -> ID .
    (94) factor -> ID . LBRACKET value RBRACKET
    (95) factor -> ID . LBRACKET ID ICONSTANT RBRACKET

  ! reduce/reduce conflict for RBRACKET resolved using rule 22 (value -> ID .)
    RBRACKET        reduce using rule 22 (value -> ID .)
    LBRACKET        shift and go to state 151
    INCREMENT       reduce using rule 93 (factor -> ID .)
    DECREMENT       reduce using rule 93 (factor -> ID .)
    TIMES           reduce using rule 93 (factor -> ID .)
    DIVIDE          reduce using rule 93 (factor -> ID .)
    MOD             reduce using rule 93 (factor -> ID .)
    PLUS            reduce using rule 93 (factor -> ID .)
    MINUS           reduce using rule 93 (factor -> ID .)

  ! RBRACKET        [ reduce using rule 93 (factor -> ID .) ]


state 193

    (23) value -> ID LBRACKET value . RBRACKET

    RBRACKET        shift and go to state 230


state 194

    (95) factor -> ID LBRACKET ID . ICONSTANT RBRACKET
    (22) value -> ID .
    (23) value -> ID . LBRACKET value RBRACKET

    ICONSTANT       shift and go to state 205
    RBRACKET        reduce using rule 22 (value -> ID .)
    LBRACKET        shift and go to state 162


state 195

    (23) value -> ID LBRACKET value . RBRACKET
    (94) factor -> ID LBRACKET value . RBRACKET

    RBRACKET        shift and go to state 231


state 196

    (81) expression -> expression PLUS term .
    (84) term -> term . TIMES factor
    (85) term -> term . DIVIDE factor
    (86) term -> term . MOD factor

    PLUS            reduce using rule 81 (expression -> expression PLUS term .)
    MINUS           reduce using rule 81 (expression -> expression PLUS term .)
    SEMI            reduce using rule 81 (expression -> expression PLUS term .)
    ASSIGN          reduce using rule 81 (expression -> expression PLUS term .)
    COMMA           reduce using rule 81 (expression -> expression PLUS term .)
    RBRACKET        reduce using rule 81 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 81 (expression -> expression PLUS term .)
    DAND            reduce using rule 81 (expression -> expression PLUS term .)
    DOR             reduce using rule 81 (expression -> expression PLUS term .)
    DEQ             reduce using rule 81 (expression -> expression PLUS term .)
    GEQ             reduce using rule 81 (expression -> expression PLUS term .)
    GT              reduce using rule 81 (expression -> expression PLUS term .)
    LEQ             reduce using rule 81 (expression -> expression PLUS term .)
    LT              reduce using rule 81 (expression -> expression PLUS term .)
    NE              reduce using rule 81 (expression -> expression PLUS term .)
    NOT             reduce using rule 81 (expression -> expression PLUS term .)
    TIMES           shift and go to state 155
    DIVIDE          shift and go to state 156
    MOD             shift and go to state 157


state 197

    (82) expression -> expression MINUS term .
    (84) term -> term . TIMES factor
    (85) term -> term . DIVIDE factor
    (86) term -> term . MOD factor

    PLUS            reduce using rule 82 (expression -> expression MINUS term .)
    MINUS           reduce using rule 82 (expression -> expression MINUS term .)
    SEMI            reduce using rule 82 (expression -> expression MINUS term .)
    ASSIGN          reduce using rule 82 (expression -> expression MINUS term .)
    COMMA           reduce using rule 82 (expression -> expression MINUS term .)
    RBRACKET        reduce using rule 82 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 82 (expression -> expression MINUS term .)
    DAND            reduce using rule 82 (expression -> expression MINUS term .)
    DOR             reduce using rule 82 (expression -> expression MINUS term .)
    DEQ             reduce using rule 82 (expression -> expression MINUS term .)
    GEQ             reduce using rule 82 (expression -> expression MINUS term .)
    GT              reduce using rule 82 (expression -> expression MINUS term .)
    LEQ             reduce using rule 82 (expression -> expression MINUS term .)
    LT              reduce using rule 82 (expression -> expression MINUS term .)
    NE              reduce using rule 82 (expression -> expression MINUS term .)
    NOT             reduce using rule 82 (expression -> expression MINUS term .)
    TIMES           shift and go to state 155
    DIVIDE          shift and go to state 156
    MOD             shift and go to state 157


state 198

    (84) term -> term TIMES factor .

    TIMES           reduce using rule 84 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 84 (term -> term TIMES factor .)
    MOD             reduce using rule 84 (term -> term TIMES factor .)
    PLUS            reduce using rule 84 (term -> term TIMES factor .)
    MINUS           reduce using rule 84 (term -> term TIMES factor .)
    SEMI            reduce using rule 84 (term -> term TIMES factor .)
    ASSIGN          reduce using rule 84 (term -> term TIMES factor .)
    COMMA           reduce using rule 84 (term -> term TIMES factor .)
    RBRACKET        reduce using rule 84 (term -> term TIMES factor .)
    RPAREN          reduce using rule 84 (term -> term TIMES factor .)
    DAND            reduce using rule 84 (term -> term TIMES factor .)
    DOR             reduce using rule 84 (term -> term TIMES factor .)
    DEQ             reduce using rule 84 (term -> term TIMES factor .)
    GEQ             reduce using rule 84 (term -> term TIMES factor .)
    GT              reduce using rule 84 (term -> term TIMES factor .)
    LEQ             reduce using rule 84 (term -> term TIMES factor .)
    LT              reduce using rule 84 (term -> term TIMES factor .)
    NE              reduce using rule 84 (term -> term TIMES factor .)
    NOT             reduce using rule 84 (term -> term TIMES factor .)


state 199

    (85) term -> term DIVIDE factor .

    TIMES           reduce using rule 85 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 85 (term -> term DIVIDE factor .)
    MOD             reduce using rule 85 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 85 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 85 (term -> term DIVIDE factor .)
    SEMI            reduce using rule 85 (term -> term DIVIDE factor .)
    ASSIGN          reduce using rule 85 (term -> term DIVIDE factor .)
    COMMA           reduce using rule 85 (term -> term DIVIDE factor .)
    RBRACKET        reduce using rule 85 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 85 (term -> term DIVIDE factor .)
    DAND            reduce using rule 85 (term -> term DIVIDE factor .)
    DOR             reduce using rule 85 (term -> term DIVIDE factor .)
    DEQ             reduce using rule 85 (term -> term DIVIDE factor .)
    GEQ             reduce using rule 85 (term -> term DIVIDE factor .)
    GT              reduce using rule 85 (term -> term DIVIDE factor .)
    LEQ             reduce using rule 85 (term -> term DIVIDE factor .)
    LT              reduce using rule 85 (term -> term DIVIDE factor .)
    NE              reduce using rule 85 (term -> term DIVIDE factor .)
    NOT             reduce using rule 85 (term -> term DIVIDE factor .)


state 200

    (86) term -> term MOD factor .

    TIMES           reduce using rule 86 (term -> term MOD factor .)
    DIVIDE          reduce using rule 86 (term -> term MOD factor .)
    MOD             reduce using rule 86 (term -> term MOD factor .)
    PLUS            reduce using rule 86 (term -> term MOD factor .)
    MINUS           reduce using rule 86 (term -> term MOD factor .)
    SEMI            reduce using rule 86 (term -> term MOD factor .)
    ASSIGN          reduce using rule 86 (term -> term MOD factor .)
    COMMA           reduce using rule 86 (term -> term MOD factor .)
    RBRACKET        reduce using rule 86 (term -> term MOD factor .)
    RPAREN          reduce using rule 86 (term -> term MOD factor .)
    DAND            reduce using rule 86 (term -> term MOD factor .)
    DOR             reduce using rule 86 (term -> term MOD factor .)
    DEQ             reduce using rule 86 (term -> term MOD factor .)
    GEQ             reduce using rule 86 (term -> term MOD factor .)
    GT              reduce using rule 86 (term -> term MOD factor .)
    LEQ             reduce using rule 86 (term -> term MOD factor .)
    LT              reduce using rule 86 (term -> term MOD factor .)
    NE              reduce using rule 86 (term -> term MOD factor .)
    NOT             reduce using rule 86 (term -> term MOD factor .)


state 201

    (90) factor -> MINUS LPAREN expression . RPAREN
    (89) factor -> LPAREN expression . RPAREN
    (81) expression -> expression . PLUS term
    (82) expression -> expression . MINUS term

    RPAREN          shift and go to state 232
    PLUS            shift and go to state 152
    MINUS           shift and go to state 153


state 202

    (54) assign -> ID LBRACKET math RBRACKET ASSIGN . math
    (55) assign -> ID LBRACKET math RBRACKET ASSIGN . SCONSTANT
    (79) math -> . expression
    (80) math -> . factor inc_dec
    (81) expression -> . expression PLUS term
    (82) expression -> . expression MINUS term
    (83) expression -> . term
    (89) factor -> . LPAREN expression RPAREN
    (90) factor -> . MINUS LPAREN expression RPAREN
    (91) factor -> . ICONSTANT
    (92) factor -> . DCONSTANT
    (93) factor -> . ID
    (94) factor -> . ID LBRACKET value RBRACKET
    (95) factor -> . ID LBRACKET ID ICONSTANT RBRACKET
    (84) term -> . term TIMES factor
    (85) term -> . term DIVIDE factor
    (86) term -> . term MOD factor
    (87) term -> . factor
    (88) term -> . MINUS factor

    SCONSTANT       shift and go to state 234
    LPAREN          shift and go to state 87
    MINUS           shift and go to state 115
    ICONSTANT       shift and go to state 85
    DCONSTANT       shift and go to state 89
    ID              shift and go to state 116

    math                           shift and go to state 233
    expression                     shift and go to state 112
    factor                         shift and go to state 113
    term                           shift and go to state 114

state 203

    (69) arguments -> arguments COMMA arguments .
    (69) arguments -> arguments . COMMA arguments

  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 69 (arguments -> arguments COMMA arguments .)
    COMMA           shift and go to state 164

  ! COMMA           [ reduce using rule 69 (arguments -> arguments COMMA arguments .) ]


state 204

    (45) declare -> type ID LBRACKET ID RBRACKET .

    SEMI            reduce using rule 45 (declare -> type ID LBRACKET ID RBRACKET .)
    COMMA           reduce using rule 45 (declare -> type ID LBRACKET ID RBRACKET .)


state 205

    (95) factor -> ID LBRACKET ID ICONSTANT . RBRACKET

    RBRACKET        shift and go to state 235


state 206

    (46) declare -> type ID LBRACKET ICONSTANT RBRACKET .

    SEMI            reduce using rule 46 (declare -> type ID LBRACKET ICONSTANT RBRACKET .)
    COMMA           reduce using rule 46 (declare -> type ID LBRACKET ICONSTANT RBRACKET .)


state 207

    (94) factor -> ID LBRACKET value RBRACKET .

    COMMA           reduce using rule 94 (factor -> ID LBRACKET value RBRACKET .)
    INCREMENT       reduce using rule 94 (factor -> ID LBRACKET value RBRACKET .)
    DECREMENT       reduce using rule 94 (factor -> ID LBRACKET value RBRACKET .)
    TIMES           reduce using rule 94 (factor -> ID LBRACKET value RBRACKET .)
    DIVIDE          reduce using rule 94 (factor -> ID LBRACKET value RBRACKET .)
    MOD             reduce using rule 94 (factor -> ID LBRACKET value RBRACKET .)
    PLUS            reduce using rule 94 (factor -> ID LBRACKET value RBRACKET .)
    MINUS           reduce using rule 94 (factor -> ID LBRACKET value RBRACKET .)
    RBRACKET        reduce using rule 94 (factor -> ID LBRACKET value RBRACKET .)
    SEMI            reduce using rule 94 (factor -> ID LBRACKET value RBRACKET .)
    ASSIGN          reduce using rule 94 (factor -> ID LBRACKET value RBRACKET .)
    RPAREN          reduce using rule 94 (factor -> ID LBRACKET value RBRACKET .)
    DAND            reduce using rule 94 (factor -> ID LBRACKET value RBRACKET .)
    DOR             reduce using rule 94 (factor -> ID LBRACKET value RBRACKET .)
    DEQ             reduce using rule 94 (factor -> ID LBRACKET value RBRACKET .)
    GEQ             reduce using rule 94 (factor -> ID LBRACKET value RBRACKET .)
    GT              reduce using rule 94 (factor -> ID LBRACKET value RBRACKET .)
    LEQ             reduce using rule 94 (factor -> ID LBRACKET value RBRACKET .)
    LT              reduce using rule 94 (factor -> ID LBRACKET value RBRACKET .)
    NE              reduce using rule 94 (factor -> ID LBRACKET value RBRACKET .)
    NOT             reduce using rule 94 (factor -> ID LBRACKET value RBRACKET .)


state 208

    (47) declare -> type factor COMMA factor COMMA . factor
    (89) factor -> . LPAREN expression RPAREN
    (90) factor -> . MINUS LPAREN expression RPAREN
    (91) factor -> . ICONSTANT
    (92) factor -> . DCONSTANT
    (93) factor -> . ID
    (94) factor -> . ID LBRACKET value RBRACKET
    (95) factor -> . ID LBRACKET ID ICONSTANT RBRACKET

    LPAREN          shift and go to state 87
    MINUS           shift and go to state 88
    ICONSTANT       shift and go to state 85
    DCONSTANT       shift and go to state 89
    ID              shift and go to state 116

    factor                         shift and go to state 236

state 209

    (90) factor -> MINUS LPAREN expression RPAREN .

    COMMA           reduce using rule 90 (factor -> MINUS LPAREN expression RPAREN .)
    TIMES           reduce using rule 90 (factor -> MINUS LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 90 (factor -> MINUS LPAREN expression RPAREN .)
    MOD             reduce using rule 90 (factor -> MINUS LPAREN expression RPAREN .)
    PLUS            reduce using rule 90 (factor -> MINUS LPAREN expression RPAREN .)
    MINUS           reduce using rule 90 (factor -> MINUS LPAREN expression RPAREN .)
    SEMI            reduce using rule 90 (factor -> MINUS LPAREN expression RPAREN .)
    ASSIGN          reduce using rule 90 (factor -> MINUS LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 90 (factor -> MINUS LPAREN expression RPAREN .)
    DAND            reduce using rule 90 (factor -> MINUS LPAREN expression RPAREN .)
    DOR             reduce using rule 90 (factor -> MINUS LPAREN expression RPAREN .)
    DEQ             reduce using rule 90 (factor -> MINUS LPAREN expression RPAREN .)
    GEQ             reduce using rule 90 (factor -> MINUS LPAREN expression RPAREN .)
    GT              reduce using rule 90 (factor -> MINUS LPAREN expression RPAREN .)
    LEQ             reduce using rule 90 (factor -> MINUS LPAREN expression RPAREN .)
    LT              reduce using rule 90 (factor -> MINUS LPAREN expression RPAREN .)
    NE              reduce using rule 90 (factor -> MINUS LPAREN expression RPAREN .)
    NOT             reduce using rule 90 (factor -> MINUS LPAREN expression RPAREN .)
    RPAREN          reduce using rule 90 (factor -> MINUS LPAREN expression RPAREN .)


state 210

    (65) print -> K_PRINT_INTEGER LPAREN value RPAREN SEMI .

    RCURLY          reduce using rule 65 (print -> K_PRINT_INTEGER LPAREN value RPAREN SEMI .)
    ID              reduce using rule 65 (print -> K_PRINT_INTEGER LPAREN value RPAREN SEMI .)
    K_PRINT_INTEGER reduce using rule 65 (print -> K_PRINT_INTEGER LPAREN value RPAREN SEMI .)
    K_PRINT_STRING  reduce using rule 65 (print -> K_PRINT_INTEGER LPAREN value RPAREN SEMI .)
    K_PRINT_DOUBLE  reduce using rule 65 (print -> K_PRINT_INTEGER LPAREN value RPAREN SEMI .)
    K_WHILE         reduce using rule 65 (print -> K_PRINT_INTEGER LPAREN value RPAREN SEMI .)
    K_DO            reduce using rule 65 (print -> K_PRINT_INTEGER LPAREN value RPAREN SEMI .)
    K_IF            reduce using rule 65 (print -> K_PRINT_INTEGER LPAREN value RPAREN SEMI .)
    K_READ_INTEGER  reduce using rule 65 (print -> K_PRINT_INTEGER LPAREN value RPAREN SEMI .)
    K_RETURN        reduce using rule 65 (print -> K_PRINT_INTEGER LPAREN value RPAREN SEMI .)
    K_INTEGER       reduce using rule 65 (print -> K_PRINT_INTEGER LPAREN value RPAREN SEMI .)
    K_DOUBLE        reduce using rule 65 (print -> K_PRINT_INTEGER LPAREN value RPAREN SEMI .)
    K_STRING        reduce using rule 65 (print -> K_PRINT_INTEGER LPAREN value RPAREN SEMI .)
    SEMI            reduce using rule 65 (print -> K_PRINT_INTEGER LPAREN value RPAREN SEMI .)
    K_PROCEDURE     reduce using rule 65 (print -> K_PRINT_INTEGER LPAREN value RPAREN SEMI .)
    K_ELSE          reduce using rule 65 (print -> K_PRINT_INTEGER LPAREN value RPAREN SEMI .)


state 211

    (66) print -> K_PRINT_STRING LPAREN value RPAREN SEMI .

    RCURLY          reduce using rule 66 (print -> K_PRINT_STRING LPAREN value RPAREN SEMI .)
    ID              reduce using rule 66 (print -> K_PRINT_STRING LPAREN value RPAREN SEMI .)
    K_PRINT_INTEGER reduce using rule 66 (print -> K_PRINT_STRING LPAREN value RPAREN SEMI .)
    K_PRINT_STRING  reduce using rule 66 (print -> K_PRINT_STRING LPAREN value RPAREN SEMI .)
    K_PRINT_DOUBLE  reduce using rule 66 (print -> K_PRINT_STRING LPAREN value RPAREN SEMI .)
    K_WHILE         reduce using rule 66 (print -> K_PRINT_STRING LPAREN value RPAREN SEMI .)
    K_DO            reduce using rule 66 (print -> K_PRINT_STRING LPAREN value RPAREN SEMI .)
    K_IF            reduce using rule 66 (print -> K_PRINT_STRING LPAREN value RPAREN SEMI .)
    K_READ_INTEGER  reduce using rule 66 (print -> K_PRINT_STRING LPAREN value RPAREN SEMI .)
    K_RETURN        reduce using rule 66 (print -> K_PRINT_STRING LPAREN value RPAREN SEMI .)
    K_INTEGER       reduce using rule 66 (print -> K_PRINT_STRING LPAREN value RPAREN SEMI .)
    K_DOUBLE        reduce using rule 66 (print -> K_PRINT_STRING LPAREN value RPAREN SEMI .)
    K_STRING        reduce using rule 66 (print -> K_PRINT_STRING LPAREN value RPAREN SEMI .)
    SEMI            reduce using rule 66 (print -> K_PRINT_STRING LPAREN value RPAREN SEMI .)
    K_PROCEDURE     reduce using rule 66 (print -> K_PRINT_STRING LPAREN value RPAREN SEMI .)
    K_ELSE          reduce using rule 66 (print -> K_PRINT_STRING LPAREN value RPAREN SEMI .)


state 212

    (67) print -> K_PRINT_DOUBLE LPAREN value RPAREN SEMI .

    RCURLY          reduce using rule 67 (print -> K_PRINT_DOUBLE LPAREN value RPAREN SEMI .)
    ID              reduce using rule 67 (print -> K_PRINT_DOUBLE LPAREN value RPAREN SEMI .)
    K_PRINT_INTEGER reduce using rule 67 (print -> K_PRINT_DOUBLE LPAREN value RPAREN SEMI .)
    K_PRINT_STRING  reduce using rule 67 (print -> K_PRINT_DOUBLE LPAREN value RPAREN SEMI .)
    K_PRINT_DOUBLE  reduce using rule 67 (print -> K_PRINT_DOUBLE LPAREN value RPAREN SEMI .)
    K_WHILE         reduce using rule 67 (print -> K_PRINT_DOUBLE LPAREN value RPAREN SEMI .)
    K_DO            reduce using rule 67 (print -> K_PRINT_DOUBLE LPAREN value RPAREN SEMI .)
    K_IF            reduce using rule 67 (print -> K_PRINT_DOUBLE LPAREN value RPAREN SEMI .)
    K_READ_INTEGER  reduce using rule 67 (print -> K_PRINT_DOUBLE LPAREN value RPAREN SEMI .)
    K_RETURN        reduce using rule 67 (print -> K_PRINT_DOUBLE LPAREN value RPAREN SEMI .)
    K_INTEGER       reduce using rule 67 (print -> K_PRINT_DOUBLE LPAREN value RPAREN SEMI .)
    K_DOUBLE        reduce using rule 67 (print -> K_PRINT_DOUBLE LPAREN value RPAREN SEMI .)
    K_STRING        reduce using rule 67 (print -> K_PRINT_DOUBLE LPAREN value RPAREN SEMI .)
    SEMI            reduce using rule 67 (print -> K_PRINT_DOUBLE LPAREN value RPAREN SEMI .)
    K_PROCEDURE     reduce using rule 67 (print -> K_PRINT_DOUBLE LPAREN value RPAREN SEMI .)
    K_ELSE          reduce using rule 67 (print -> K_PRINT_DOUBLE LPAREN value RPAREN SEMI .)


state 213

    (109) while -> K_WHILE LPAREN bool RPAREN statement .

    RCURLY          reduce using rule 109 (while -> K_WHILE LPAREN bool RPAREN statement .)
    ID              reduce using rule 109 (while -> K_WHILE LPAREN bool RPAREN statement .)
    K_PRINT_INTEGER reduce using rule 109 (while -> K_WHILE LPAREN bool RPAREN statement .)
    K_PRINT_STRING  reduce using rule 109 (while -> K_WHILE LPAREN bool RPAREN statement .)
    K_PRINT_DOUBLE  reduce using rule 109 (while -> K_WHILE LPAREN bool RPAREN statement .)
    K_WHILE         reduce using rule 109 (while -> K_WHILE LPAREN bool RPAREN statement .)
    K_DO            reduce using rule 109 (while -> K_WHILE LPAREN bool RPAREN statement .)
    K_IF            reduce using rule 109 (while -> K_WHILE LPAREN bool RPAREN statement .)
    K_READ_INTEGER  reduce using rule 109 (while -> K_WHILE LPAREN bool RPAREN statement .)
    K_RETURN        reduce using rule 109 (while -> K_WHILE LPAREN bool RPAREN statement .)
    K_INTEGER       reduce using rule 109 (while -> K_WHILE LPAREN bool RPAREN statement .)
    K_DOUBLE        reduce using rule 109 (while -> K_WHILE LPAREN bool RPAREN statement .)
    K_STRING        reduce using rule 109 (while -> K_WHILE LPAREN bool RPAREN statement .)
    SEMI            reduce using rule 109 (while -> K_WHILE LPAREN bool RPAREN statement .)
    K_PROCEDURE     reduce using rule 109 (while -> K_WHILE LPAREN bool RPAREN statement .)


state 214

    (110) while -> K_WHILE LPAREN bool RPAREN LCURLY . statements RCURLY
    (25) statements -> . statements statements
    (26) statements -> . declare SEMI
    (27) statements -> . declare_assign SEMI
    (28) statements -> . assign SEMI
    (29) statements -> . print
    (30) statements -> . while
    (31) statements -> . do
    (32) statements -> . if
    (33) statements -> . read
    (34) statements -> . function_call SEMI
    (35) statements -> . return SEMI
    (43) statements -> . epsilon
    (44) declare -> . type ID
    (45) declare -> . type ID LBRACKET ID RBRACKET
    (46) declare -> . type ID LBRACKET ICONSTANT RBRACKET
    (47) declare -> . type factor COMMA factor COMMA factor
    (48) declare -> . type factor COMMA factor
    (49) declare -> . declare COMMA ID
    (50) declare -> . declare COMMA assign
    (63) declare_assign -> . type ID ASSIGN value
    (64) declare_assign -> . declare_assign COMMA ID
    (51) assign -> . ID ASSIGN value
    (52) assign -> . ID inc_dec
    (53) assign -> . ID ASSIGN math
    (54) assign -> . ID LBRACKET math RBRACKET ASSIGN math
    (55) assign -> . ID LBRACKET math RBRACKET ASSIGN SCONSTANT
    (56) assign -> . ID ASSIGN function_call
    (57) assign -> . ID ASSIGN_PLUS math
    (58) assign -> . ID ASSIGN_MINUS math
    (59) assign -> . ID ASSIGN_MULTIPLY math
    (60) assign -> . ID ASSIGN_DIVIDE math
    (61) assign -> . ID ASSIGN_MOD math
    (62) assign -> . assign ASSIGN value
    (65) print -> . K_PRINT_INTEGER LPAREN value RPAREN SEMI
    (66) print -> . K_PRINT_STRING LPAREN value RPAREN SEMI
    (67) print -> . K_PRINT_DOUBLE LPAREN value RPAREN SEMI
    (109) while -> . K_WHILE LPAREN bool RPAREN statement
    (110) while -> . K_WHILE LPAREN bool RPAREN LCURLY statements RCURLY
    (112) do -> . K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN LCURLY statements RCURLY
    (113) do -> . K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN statement
    (114) if -> . K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else_if
    (115) if -> . K_IF LPAREN bool RPAREN K_THEN statement else_if
    (68) read -> . K_READ_INTEGER LPAREN ID RPAREN SEMI
    (72) function_call -> . ID LPAREN arguments RPAREN
    (73) return -> . K_RETURN value
    (74) return -> . epsilon
    (75) return -> . K_RETURN function_call
    (76) return -> . K_RETURN assign
    (122) epsilon -> .
    (6) type -> . K_INTEGER
    (7) type -> . K_DOUBLE
    (8) type -> . K_STRING

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for K_PRINT_INTEGER resolved as shift
  ! shift/reduce conflict for K_PRINT_STRING resolved as shift
  ! shift/reduce conflict for K_PRINT_DOUBLE resolved as shift
  ! shift/reduce conflict for K_WHILE resolved as shift
  ! shift/reduce conflict for K_DO resolved as shift
  ! shift/reduce conflict for K_IF resolved as shift
  ! shift/reduce conflict for K_READ_INTEGER resolved as shift
  ! shift/reduce conflict for K_RETURN resolved as shift
  ! shift/reduce conflict for K_INTEGER resolved as shift
  ! shift/reduce conflict for K_DOUBLE resolved as shift
  ! shift/reduce conflict for K_STRING resolved as shift
    ID              shift and go to state 37
    K_PRINT_INTEGER shift and go to state 51
    K_PRINT_STRING  shift and go to state 52
    K_PRINT_DOUBLE  shift and go to state 53
    K_WHILE         shift and go to state 54
    K_DO            shift and go to state 55
    K_IF            shift and go to state 56
    K_READ_INTEGER  shift and go to state 57
    K_RETURN        shift and go to state 58
    RCURLY          reduce using rule 122 (epsilon -> .)
    SEMI            reduce using rule 122 (epsilon -> .)
    K_INTEGER       shift and go to state 17
    K_DOUBLE        shift and go to state 18
    K_STRING        shift and go to state 19

  ! ID              [ reduce using rule 122 (epsilon -> .) ]
  ! K_PRINT_INTEGER [ reduce using rule 122 (epsilon -> .) ]
  ! K_PRINT_STRING  [ reduce using rule 122 (epsilon -> .) ]
  ! K_PRINT_DOUBLE  [ reduce using rule 122 (epsilon -> .) ]
  ! K_WHILE         [ reduce using rule 122 (epsilon -> .) ]
  ! K_DO            [ reduce using rule 122 (epsilon -> .) ]
  ! K_IF            [ reduce using rule 122 (epsilon -> .) ]
  ! K_READ_INTEGER  [ reduce using rule 122 (epsilon -> .) ]
  ! K_RETURN        [ reduce using rule 122 (epsilon -> .) ]
  ! K_INTEGER       [ reduce using rule 122 (epsilon -> .) ]
  ! K_DOUBLE        [ reduce using rule 122 (epsilon -> .) ]
  ! K_STRING        [ reduce using rule 122 (epsilon -> .) ]

    statements                     shift and go to state 237
    declare                        shift and go to state 39
    declare_assign                 shift and go to state 40
    assign                         shift and go to state 41
    print                          shift and go to state 42
    while                          shift and go to state 43
    do                             shift and go to state 44
    if                             shift and go to state 45
    read                           shift and go to state 46
    function_call                  shift and go to state 47
    return                         shift and go to state 48
    epsilon                        shift and go to state 49
    type                           shift and go to state 50

state 215

    (36) statement -> declare . SEMI
    (49) declare -> declare . COMMA ID
    (50) declare -> declare . COMMA assign

    SEMI            shift and go to state 238
    COMMA           shift and go to state 77


state 216

    (37) statement -> declare_assign . SEMI
    (64) declare_assign -> declare_assign . COMMA ID

    SEMI            shift and go to state 239
    COMMA           shift and go to state 79


state 217

    (38) statement -> assign . SEMI
    (62) assign -> assign . ASSIGN value

    SEMI            shift and go to state 240
    ASSIGN          shift and go to state 81


state 218

    (39) statement -> print .

    RCURLY          reduce using rule 39 (statement -> print .)
    ID              reduce using rule 39 (statement -> print .)
    K_PRINT_INTEGER reduce using rule 39 (statement -> print .)
    K_PRINT_STRING  reduce using rule 39 (statement -> print .)
    K_PRINT_DOUBLE  reduce using rule 39 (statement -> print .)
    K_WHILE         reduce using rule 39 (statement -> print .)
    K_DO            reduce using rule 39 (statement -> print .)
    K_IF            reduce using rule 39 (statement -> print .)
    K_READ_INTEGER  reduce using rule 39 (statement -> print .)
    K_RETURN        reduce using rule 39 (statement -> print .)
    K_INTEGER       reduce using rule 39 (statement -> print .)
    K_DOUBLE        reduce using rule 39 (statement -> print .)
    K_STRING        reduce using rule 39 (statement -> print .)
    SEMI            reduce using rule 39 (statement -> print .)
    K_PROCEDURE     reduce using rule 39 (statement -> print .)
    K_ELSE          reduce using rule 39 (statement -> print .)


state 219

    (40) statement -> function_call . SEMI

    SEMI            shift and go to state 241


state 220

    (41) statement -> read .

    RCURLY          reduce using rule 41 (statement -> read .)
    ID              reduce using rule 41 (statement -> read .)
    K_PRINT_INTEGER reduce using rule 41 (statement -> read .)
    K_PRINT_STRING  reduce using rule 41 (statement -> read .)
    K_PRINT_DOUBLE  reduce using rule 41 (statement -> read .)
    K_WHILE         reduce using rule 41 (statement -> read .)
    K_DO            reduce using rule 41 (statement -> read .)
    K_IF            reduce using rule 41 (statement -> read .)
    K_READ_INTEGER  reduce using rule 41 (statement -> read .)
    K_RETURN        reduce using rule 41 (statement -> read .)
    K_INTEGER       reduce using rule 41 (statement -> read .)
    K_DOUBLE        reduce using rule 41 (statement -> read .)
    K_STRING        reduce using rule 41 (statement -> read .)
    SEMI            reduce using rule 41 (statement -> read .)
    K_PROCEDURE     reduce using rule 41 (statement -> read .)
    K_ELSE          reduce using rule 41 (statement -> read .)


state 221

    (42) statement -> return . SEMI

    SEMI            shift and go to state 242


state 222

    (74) return -> epsilon .

    SEMI            reduce using rule 74 (return -> epsilon .)


state 223

    (107) bool -> condition bool_op condition .

    RPAREN          reduce using rule 107 (bool -> condition bool_op condition .)


state 224

    (105) condition -> math bool_op math .

    DAND            reduce using rule 105 (condition -> math bool_op math .)
    DOR             reduce using rule 105 (condition -> math bool_op math .)
    DEQ             reduce using rule 105 (condition -> math bool_op math .)
    GEQ             reduce using rule 105 (condition -> math bool_op math .)
    GT              reduce using rule 105 (condition -> math bool_op math .)
    LEQ             reduce using rule 105 (condition -> math bool_op math .)
    LT              reduce using rule 105 (condition -> math bool_op math .)
    NE              reduce using rule 105 (condition -> math bool_op math .)
    NOT             reduce using rule 105 (condition -> math bool_op math .)
    RPAREN          reduce using rule 105 (condition -> math bool_op math .)
    SEMI            reduce using rule 105 (condition -> math bool_op math .)


state 225

    (106) condition -> function_call bool_op math .

    DAND            reduce using rule 106 (condition -> function_call bool_op math .)
    DOR             reduce using rule 106 (condition -> function_call bool_op math .)
    DEQ             reduce using rule 106 (condition -> function_call bool_op math .)
    GEQ             reduce using rule 106 (condition -> function_call bool_op math .)
    GT              reduce using rule 106 (condition -> function_call bool_op math .)
    LEQ             reduce using rule 106 (condition -> function_call bool_op math .)
    LT              reduce using rule 106 (condition -> function_call bool_op math .)
    NE              reduce using rule 106 (condition -> function_call bool_op math .)
    NOT             reduce using rule 106 (condition -> function_call bool_op math .)
    RPAREN          reduce using rule 106 (condition -> function_call bool_op math .)
    SEMI            reduce using rule 106 (condition -> function_call bool_op math .)


state 226

    (112) do -> K_DO LPAREN do_assign SEMI condition . SEMI ID inc_dec RPAREN LCURLY statements RCURLY
    (113) do -> K_DO LPAREN do_assign SEMI condition . SEMI ID inc_dec RPAREN statement

    SEMI            shift and go to state 243


state 227

    (111) do_assign -> ID ASSIGN ICONSTANT .

    SEMI            reduce using rule 111 (do_assign -> ID ASSIGN ICONSTANT .)


state 228

    (114) if -> K_IF LPAREN bool RPAREN K_THEN . LCURLY statements RCURLY else_if
    (115) if -> K_IF LPAREN bool RPAREN K_THEN . statement else_if
    (36) statement -> . declare SEMI
    (37) statement -> . declare_assign SEMI
    (38) statement -> . assign SEMI
    (39) statement -> . print
    (40) statement -> . function_call SEMI
    (41) statement -> . read
    (42) statement -> . return SEMI
    (44) declare -> . type ID
    (45) declare -> . type ID LBRACKET ID RBRACKET
    (46) declare -> . type ID LBRACKET ICONSTANT RBRACKET
    (47) declare -> . type factor COMMA factor COMMA factor
    (48) declare -> . type factor COMMA factor
    (49) declare -> . declare COMMA ID
    (50) declare -> . declare COMMA assign
    (63) declare_assign -> . type ID ASSIGN value
    (64) declare_assign -> . declare_assign COMMA ID
    (51) assign -> . ID ASSIGN value
    (52) assign -> . ID inc_dec
    (53) assign -> . ID ASSIGN math
    (54) assign -> . ID LBRACKET math RBRACKET ASSIGN math
    (55) assign -> . ID LBRACKET math RBRACKET ASSIGN SCONSTANT
    (56) assign -> . ID ASSIGN function_call
    (57) assign -> . ID ASSIGN_PLUS math
    (58) assign -> . ID ASSIGN_MINUS math
    (59) assign -> . ID ASSIGN_MULTIPLY math
    (60) assign -> . ID ASSIGN_DIVIDE math
    (61) assign -> . ID ASSIGN_MOD math
    (62) assign -> . assign ASSIGN value
    (65) print -> . K_PRINT_INTEGER LPAREN value RPAREN SEMI
    (66) print -> . K_PRINT_STRING LPAREN value RPAREN SEMI
    (67) print -> . K_PRINT_DOUBLE LPAREN value RPAREN SEMI
    (72) function_call -> . ID LPAREN arguments RPAREN
    (68) read -> . K_READ_INTEGER LPAREN ID RPAREN SEMI
    (73) return -> . K_RETURN value
    (74) return -> . epsilon
    (75) return -> . K_RETURN function_call
    (76) return -> . K_RETURN assign
    (6) type -> . K_INTEGER
    (7) type -> . K_DOUBLE
    (8) type -> . K_STRING
    (122) epsilon -> .

    LCURLY          shift and go to state 244
    ID              shift and go to state 37
    K_PRINT_INTEGER shift and go to state 51
    K_PRINT_STRING  shift and go to state 52
    K_PRINT_DOUBLE  shift and go to state 53
    K_READ_INTEGER  shift and go to state 57
    K_RETURN        shift and go to state 58
    K_INTEGER       shift and go to state 17
    K_DOUBLE        shift and go to state 18
    K_STRING        shift and go to state 19
    SEMI            reduce using rule 122 (epsilon -> .)

    statement                      shift and go to state 245
    declare                        shift and go to state 215
    declare_assign                 shift and go to state 216
    assign                         shift and go to state 217
    print                          shift and go to state 218
    function_call                  shift and go to state 219
    read                           shift and go to state 220
    return                         shift and go to state 221
    type                           shift and go to state 50
    epsilon                        shift and go to state 222

state 229

    (68) read -> K_READ_INTEGER LPAREN ID RPAREN SEMI .

    RCURLY          reduce using rule 68 (read -> K_READ_INTEGER LPAREN ID RPAREN SEMI .)
    ID              reduce using rule 68 (read -> K_READ_INTEGER LPAREN ID RPAREN SEMI .)
    K_PRINT_INTEGER reduce using rule 68 (read -> K_READ_INTEGER LPAREN ID RPAREN SEMI .)
    K_PRINT_STRING  reduce using rule 68 (read -> K_READ_INTEGER LPAREN ID RPAREN SEMI .)
    K_PRINT_DOUBLE  reduce using rule 68 (read -> K_READ_INTEGER LPAREN ID RPAREN SEMI .)
    K_WHILE         reduce using rule 68 (read -> K_READ_INTEGER LPAREN ID RPAREN SEMI .)
    K_DO            reduce using rule 68 (read -> K_READ_INTEGER LPAREN ID RPAREN SEMI .)
    K_IF            reduce using rule 68 (read -> K_READ_INTEGER LPAREN ID RPAREN SEMI .)
    K_READ_INTEGER  reduce using rule 68 (read -> K_READ_INTEGER LPAREN ID RPAREN SEMI .)
    K_RETURN        reduce using rule 68 (read -> K_READ_INTEGER LPAREN ID RPAREN SEMI .)
    K_INTEGER       reduce using rule 68 (read -> K_READ_INTEGER LPAREN ID RPAREN SEMI .)
    K_DOUBLE        reduce using rule 68 (read -> K_READ_INTEGER LPAREN ID RPAREN SEMI .)
    K_STRING        reduce using rule 68 (read -> K_READ_INTEGER LPAREN ID RPAREN SEMI .)
    SEMI            reduce using rule 68 (read -> K_READ_INTEGER LPAREN ID RPAREN SEMI .)
    K_PROCEDURE     reduce using rule 68 (read -> K_READ_INTEGER LPAREN ID RPAREN SEMI .)
    K_ELSE          reduce using rule 68 (read -> K_READ_INTEGER LPAREN ID RPAREN SEMI .)


state 230

    (23) value -> ID LBRACKET value RBRACKET .

    SEMI            reduce using rule 23 (value -> ID LBRACKET value RBRACKET .)
    RPAREN          reduce using rule 23 (value -> ID LBRACKET value RBRACKET .)
    COMMA           reduce using rule 23 (value -> ID LBRACKET value RBRACKET .)
    ASSIGN          reduce using rule 23 (value -> ID LBRACKET value RBRACKET .)
    RBRACKET        reduce using rule 23 (value -> ID LBRACKET value RBRACKET .)


state 231

    (23) value -> ID LBRACKET value RBRACKET .
    (94) factor -> ID LBRACKET value RBRACKET .

  ! reduce/reduce conflict for SEMI resolved using rule 23 (value -> ID LBRACKET value RBRACKET .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 23 (value -> ID LBRACKET value RBRACKET .)
  ! reduce/reduce conflict for COMMA resolved using rule 23 (value -> ID LBRACKET value RBRACKET .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 23 (value -> ID LBRACKET value RBRACKET .)
    SEMI            reduce using rule 23 (value -> ID LBRACKET value RBRACKET .)
    ASSIGN          reduce using rule 23 (value -> ID LBRACKET value RBRACKET .)
    COMMA           reduce using rule 23 (value -> ID LBRACKET value RBRACKET .)
    RBRACKET        reduce using rule 23 (value -> ID LBRACKET value RBRACKET .)
    INCREMENT       reduce using rule 94 (factor -> ID LBRACKET value RBRACKET .)
    DECREMENT       reduce using rule 94 (factor -> ID LBRACKET value RBRACKET .)
    TIMES           reduce using rule 94 (factor -> ID LBRACKET value RBRACKET .)
    DIVIDE          reduce using rule 94 (factor -> ID LBRACKET value RBRACKET .)
    MOD             reduce using rule 94 (factor -> ID LBRACKET value RBRACKET .)
    PLUS            reduce using rule 94 (factor -> ID LBRACKET value RBRACKET .)
    MINUS           reduce using rule 94 (factor -> ID LBRACKET value RBRACKET .)

  ! SEMI            [ reduce using rule 94 (factor -> ID LBRACKET value RBRACKET .) ]
  ! ASSIGN          [ reduce using rule 94 (factor -> ID LBRACKET value RBRACKET .) ]
  ! COMMA           [ reduce using rule 94 (factor -> ID LBRACKET value RBRACKET .) ]
  ! RBRACKET        [ reduce using rule 94 (factor -> ID LBRACKET value RBRACKET .) ]


state 232

    (90) factor -> MINUS LPAREN expression RPAREN .
    (89) factor -> LPAREN expression RPAREN .

  ! reduce/reduce conflict for TIMES resolved using rule 89 (factor -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 89 (factor -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for MOD resolved using rule 89 (factor -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for PLUS resolved using rule 89 (factor -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for MINUS resolved using rule 89 (factor -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for SEMI resolved using rule 89 (factor -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 89 (factor -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for COMMA resolved using rule 89 (factor -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 89 (factor -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for DAND resolved using rule 89 (factor -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for DOR resolved using rule 89 (factor -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for DEQ resolved using rule 89 (factor -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for GEQ resolved using rule 89 (factor -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for GT resolved using rule 89 (factor -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for LEQ resolved using rule 89 (factor -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for LT resolved using rule 89 (factor -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for NE resolved using rule 89 (factor -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for NOT resolved using rule 89 (factor -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for RPAREN resolved using rule 89 (factor -> LPAREN expression RPAREN .)
    INCREMENT       reduce using rule 90 (factor -> MINUS LPAREN expression RPAREN .)
    DECREMENT       reduce using rule 90 (factor -> MINUS LPAREN expression RPAREN .)
    TIMES           reduce using rule 89 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 89 (factor -> LPAREN expression RPAREN .)
    MOD             reduce using rule 89 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 89 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 89 (factor -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 89 (factor -> LPAREN expression RPAREN .)
    ASSIGN          reduce using rule 89 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 89 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 89 (factor -> LPAREN expression RPAREN .)
    DAND            reduce using rule 89 (factor -> LPAREN expression RPAREN .)
    DOR             reduce using rule 89 (factor -> LPAREN expression RPAREN .)
    DEQ             reduce using rule 89 (factor -> LPAREN expression RPAREN .)
    GEQ             reduce using rule 89 (factor -> LPAREN expression RPAREN .)
    GT              reduce using rule 89 (factor -> LPAREN expression RPAREN .)
    LEQ             reduce using rule 89 (factor -> LPAREN expression RPAREN .)
    LT              reduce using rule 89 (factor -> LPAREN expression RPAREN .)
    NE              reduce using rule 89 (factor -> LPAREN expression RPAREN .)
    NOT             reduce using rule 89 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 89 (factor -> LPAREN expression RPAREN .)

  ! TIMES           [ reduce using rule 90 (factor -> MINUS LPAREN expression RPAREN .) ]
  ! DIVIDE          [ reduce using rule 90 (factor -> MINUS LPAREN expression RPAREN .) ]
  ! MOD             [ reduce using rule 90 (factor -> MINUS LPAREN expression RPAREN .) ]
  ! PLUS            [ reduce using rule 90 (factor -> MINUS LPAREN expression RPAREN .) ]
  ! MINUS           [ reduce using rule 90 (factor -> MINUS LPAREN expression RPAREN .) ]
  ! SEMI            [ reduce using rule 90 (factor -> MINUS LPAREN expression RPAREN .) ]
  ! ASSIGN          [ reduce using rule 90 (factor -> MINUS LPAREN expression RPAREN .) ]
  ! COMMA           [ reduce using rule 90 (factor -> MINUS LPAREN expression RPAREN .) ]
  ! RBRACKET        [ reduce using rule 90 (factor -> MINUS LPAREN expression RPAREN .) ]
  ! RPAREN          [ reduce using rule 90 (factor -> MINUS LPAREN expression RPAREN .) ]
  ! DAND            [ reduce using rule 90 (factor -> MINUS LPAREN expression RPAREN .) ]
  ! DOR             [ reduce using rule 90 (factor -> MINUS LPAREN expression RPAREN .) ]
  ! DEQ             [ reduce using rule 90 (factor -> MINUS LPAREN expression RPAREN .) ]
  ! GEQ             [ reduce using rule 90 (factor -> MINUS LPAREN expression RPAREN .) ]
  ! GT              [ reduce using rule 90 (factor -> MINUS LPAREN expression RPAREN .) ]
  ! LEQ             [ reduce using rule 90 (factor -> MINUS LPAREN expression RPAREN .) ]
  ! LT              [ reduce using rule 90 (factor -> MINUS LPAREN expression RPAREN .) ]
  ! NE              [ reduce using rule 90 (factor -> MINUS LPAREN expression RPAREN .) ]
  ! NOT             [ reduce using rule 90 (factor -> MINUS LPAREN expression RPAREN .) ]


state 233

    (54) assign -> ID LBRACKET math RBRACKET ASSIGN math .

    SEMI            reduce using rule 54 (assign -> ID LBRACKET math RBRACKET ASSIGN math .)
    ASSIGN          reduce using rule 54 (assign -> ID LBRACKET math RBRACKET ASSIGN math .)
    COMMA           reduce using rule 54 (assign -> ID LBRACKET math RBRACKET ASSIGN math .)


state 234

    (55) assign -> ID LBRACKET math RBRACKET ASSIGN SCONSTANT .

    SEMI            reduce using rule 55 (assign -> ID LBRACKET math RBRACKET ASSIGN SCONSTANT .)
    ASSIGN          reduce using rule 55 (assign -> ID LBRACKET math RBRACKET ASSIGN SCONSTANT .)
    COMMA           reduce using rule 55 (assign -> ID LBRACKET math RBRACKET ASSIGN SCONSTANT .)


state 235

    (95) factor -> ID LBRACKET ID ICONSTANT RBRACKET .

    COMMA           reduce using rule 95 (factor -> ID LBRACKET ID ICONSTANT RBRACKET .)
    INCREMENT       reduce using rule 95 (factor -> ID LBRACKET ID ICONSTANT RBRACKET .)
    DECREMENT       reduce using rule 95 (factor -> ID LBRACKET ID ICONSTANT RBRACKET .)
    TIMES           reduce using rule 95 (factor -> ID LBRACKET ID ICONSTANT RBRACKET .)
    DIVIDE          reduce using rule 95 (factor -> ID LBRACKET ID ICONSTANT RBRACKET .)
    MOD             reduce using rule 95 (factor -> ID LBRACKET ID ICONSTANT RBRACKET .)
    PLUS            reduce using rule 95 (factor -> ID LBRACKET ID ICONSTANT RBRACKET .)
    MINUS           reduce using rule 95 (factor -> ID LBRACKET ID ICONSTANT RBRACKET .)
    SEMI            reduce using rule 95 (factor -> ID LBRACKET ID ICONSTANT RBRACKET .)
    ASSIGN          reduce using rule 95 (factor -> ID LBRACKET ID ICONSTANT RBRACKET .)
    RBRACKET        reduce using rule 95 (factor -> ID LBRACKET ID ICONSTANT RBRACKET .)
    RPAREN          reduce using rule 95 (factor -> ID LBRACKET ID ICONSTANT RBRACKET .)
    DAND            reduce using rule 95 (factor -> ID LBRACKET ID ICONSTANT RBRACKET .)
    DOR             reduce using rule 95 (factor -> ID LBRACKET ID ICONSTANT RBRACKET .)
    DEQ             reduce using rule 95 (factor -> ID LBRACKET ID ICONSTANT RBRACKET .)
    GEQ             reduce using rule 95 (factor -> ID LBRACKET ID ICONSTANT RBRACKET .)
    GT              reduce using rule 95 (factor -> ID LBRACKET ID ICONSTANT RBRACKET .)
    LEQ             reduce using rule 95 (factor -> ID LBRACKET ID ICONSTANT RBRACKET .)
    LT              reduce using rule 95 (factor -> ID LBRACKET ID ICONSTANT RBRACKET .)
    NE              reduce using rule 95 (factor -> ID LBRACKET ID ICONSTANT RBRACKET .)
    NOT             reduce using rule 95 (factor -> ID LBRACKET ID ICONSTANT RBRACKET .)


state 236

    (47) declare -> type factor COMMA factor COMMA factor .

    SEMI            reduce using rule 47 (declare -> type factor COMMA factor COMMA factor .)
    COMMA           reduce using rule 47 (declare -> type factor COMMA factor COMMA factor .)


state 237

    (110) while -> K_WHILE LPAREN bool RPAREN LCURLY statements . RCURLY
    (25) statements -> statements . statements
    (25) statements -> . statements statements
    (26) statements -> . declare SEMI
    (27) statements -> . declare_assign SEMI
    (28) statements -> . assign SEMI
    (29) statements -> . print
    (30) statements -> . while
    (31) statements -> . do
    (32) statements -> . if
    (33) statements -> . read
    (34) statements -> . function_call SEMI
    (35) statements -> . return SEMI
    (43) statements -> . epsilon
    (44) declare -> . type ID
    (45) declare -> . type ID LBRACKET ID RBRACKET
    (46) declare -> . type ID LBRACKET ICONSTANT RBRACKET
    (47) declare -> . type factor COMMA factor COMMA factor
    (48) declare -> . type factor COMMA factor
    (49) declare -> . declare COMMA ID
    (50) declare -> . declare COMMA assign
    (63) declare_assign -> . type ID ASSIGN value
    (64) declare_assign -> . declare_assign COMMA ID
    (51) assign -> . ID ASSIGN value
    (52) assign -> . ID inc_dec
    (53) assign -> . ID ASSIGN math
    (54) assign -> . ID LBRACKET math RBRACKET ASSIGN math
    (55) assign -> . ID LBRACKET math RBRACKET ASSIGN SCONSTANT
    (56) assign -> . ID ASSIGN function_call
    (57) assign -> . ID ASSIGN_PLUS math
    (58) assign -> . ID ASSIGN_MINUS math
    (59) assign -> . ID ASSIGN_MULTIPLY math
    (60) assign -> . ID ASSIGN_DIVIDE math
    (61) assign -> . ID ASSIGN_MOD math
    (62) assign -> . assign ASSIGN value
    (65) print -> . K_PRINT_INTEGER LPAREN value RPAREN SEMI
    (66) print -> . K_PRINT_STRING LPAREN value RPAREN SEMI
    (67) print -> . K_PRINT_DOUBLE LPAREN value RPAREN SEMI
    (109) while -> . K_WHILE LPAREN bool RPAREN statement
    (110) while -> . K_WHILE LPAREN bool RPAREN LCURLY statements RCURLY
    (112) do -> . K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN LCURLY statements RCURLY
    (113) do -> . K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN statement
    (114) if -> . K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else_if
    (115) if -> . K_IF LPAREN bool RPAREN K_THEN statement else_if
    (68) read -> . K_READ_INTEGER LPAREN ID RPAREN SEMI
    (72) function_call -> . ID LPAREN arguments RPAREN
    (73) return -> . K_RETURN value
    (74) return -> . epsilon
    (75) return -> . K_RETURN function_call
    (76) return -> . K_RETURN assign
    (122) epsilon -> .
    (6) type -> . K_INTEGER
    (7) type -> . K_DOUBLE
    (8) type -> . K_STRING

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for K_PRINT_INTEGER resolved as shift
  ! shift/reduce conflict for K_PRINT_STRING resolved as shift
  ! shift/reduce conflict for K_PRINT_DOUBLE resolved as shift
  ! shift/reduce conflict for K_WHILE resolved as shift
  ! shift/reduce conflict for K_DO resolved as shift
  ! shift/reduce conflict for K_IF resolved as shift
  ! shift/reduce conflict for K_READ_INTEGER resolved as shift
  ! shift/reduce conflict for K_RETURN resolved as shift
  ! shift/reduce conflict for RCURLY resolved as shift
  ! shift/reduce conflict for K_INTEGER resolved as shift
  ! shift/reduce conflict for K_DOUBLE resolved as shift
  ! shift/reduce conflict for K_STRING resolved as shift
    RCURLY          shift and go to state 246
    ID              shift and go to state 37
    K_PRINT_INTEGER shift and go to state 51
    K_PRINT_STRING  shift and go to state 52
    K_PRINT_DOUBLE  shift and go to state 53
    K_WHILE         shift and go to state 54
    K_DO            shift and go to state 55
    K_IF            shift and go to state 56
    K_READ_INTEGER  shift and go to state 57
    K_RETURN        shift and go to state 58
    SEMI            reduce using rule 122 (epsilon -> .)
    K_INTEGER       shift and go to state 17
    K_DOUBLE        shift and go to state 18
    K_STRING        shift and go to state 19

  ! ID              [ reduce using rule 122 (epsilon -> .) ]
  ! K_PRINT_INTEGER [ reduce using rule 122 (epsilon -> .) ]
  ! K_PRINT_STRING  [ reduce using rule 122 (epsilon -> .) ]
  ! K_PRINT_DOUBLE  [ reduce using rule 122 (epsilon -> .) ]
  ! K_WHILE         [ reduce using rule 122 (epsilon -> .) ]
  ! K_DO            [ reduce using rule 122 (epsilon -> .) ]
  ! K_IF            [ reduce using rule 122 (epsilon -> .) ]
  ! K_READ_INTEGER  [ reduce using rule 122 (epsilon -> .) ]
  ! K_RETURN        [ reduce using rule 122 (epsilon -> .) ]
  ! K_INTEGER       [ reduce using rule 122 (epsilon -> .) ]
  ! K_DOUBLE        [ reduce using rule 122 (epsilon -> .) ]
  ! K_STRING        [ reduce using rule 122 (epsilon -> .) ]
  ! RCURLY          [ reduce using rule 122 (epsilon -> .) ]

    statements                     shift and go to state 74
    declare                        shift and go to state 39
    declare_assign                 shift and go to state 40
    assign                         shift and go to state 41
    print                          shift and go to state 42
    while                          shift and go to state 43
    do                             shift and go to state 44
    if                             shift and go to state 45
    read                           shift and go to state 46
    function_call                  shift and go to state 47
    return                         shift and go to state 48
    epsilon                        shift and go to state 49
    type                           shift and go to state 50

state 238

    (36) statement -> declare SEMI .

    RCURLY          reduce using rule 36 (statement -> declare SEMI .)
    ID              reduce using rule 36 (statement -> declare SEMI .)
    K_PRINT_INTEGER reduce using rule 36 (statement -> declare SEMI .)
    K_PRINT_STRING  reduce using rule 36 (statement -> declare SEMI .)
    K_PRINT_DOUBLE  reduce using rule 36 (statement -> declare SEMI .)
    K_WHILE         reduce using rule 36 (statement -> declare SEMI .)
    K_DO            reduce using rule 36 (statement -> declare SEMI .)
    K_IF            reduce using rule 36 (statement -> declare SEMI .)
    K_READ_INTEGER  reduce using rule 36 (statement -> declare SEMI .)
    K_RETURN        reduce using rule 36 (statement -> declare SEMI .)
    K_INTEGER       reduce using rule 36 (statement -> declare SEMI .)
    K_DOUBLE        reduce using rule 36 (statement -> declare SEMI .)
    K_STRING        reduce using rule 36 (statement -> declare SEMI .)
    SEMI            reduce using rule 36 (statement -> declare SEMI .)
    K_PROCEDURE     reduce using rule 36 (statement -> declare SEMI .)
    K_ELSE          reduce using rule 36 (statement -> declare SEMI .)


state 239

    (37) statement -> declare_assign SEMI .

    RCURLY          reduce using rule 37 (statement -> declare_assign SEMI .)
    ID              reduce using rule 37 (statement -> declare_assign SEMI .)
    K_PRINT_INTEGER reduce using rule 37 (statement -> declare_assign SEMI .)
    K_PRINT_STRING  reduce using rule 37 (statement -> declare_assign SEMI .)
    K_PRINT_DOUBLE  reduce using rule 37 (statement -> declare_assign SEMI .)
    K_WHILE         reduce using rule 37 (statement -> declare_assign SEMI .)
    K_DO            reduce using rule 37 (statement -> declare_assign SEMI .)
    K_IF            reduce using rule 37 (statement -> declare_assign SEMI .)
    K_READ_INTEGER  reduce using rule 37 (statement -> declare_assign SEMI .)
    K_RETURN        reduce using rule 37 (statement -> declare_assign SEMI .)
    K_INTEGER       reduce using rule 37 (statement -> declare_assign SEMI .)
    K_DOUBLE        reduce using rule 37 (statement -> declare_assign SEMI .)
    K_STRING        reduce using rule 37 (statement -> declare_assign SEMI .)
    SEMI            reduce using rule 37 (statement -> declare_assign SEMI .)
    K_PROCEDURE     reduce using rule 37 (statement -> declare_assign SEMI .)
    K_ELSE          reduce using rule 37 (statement -> declare_assign SEMI .)


state 240

    (38) statement -> assign SEMI .

    RCURLY          reduce using rule 38 (statement -> assign SEMI .)
    ID              reduce using rule 38 (statement -> assign SEMI .)
    K_PRINT_INTEGER reduce using rule 38 (statement -> assign SEMI .)
    K_PRINT_STRING  reduce using rule 38 (statement -> assign SEMI .)
    K_PRINT_DOUBLE  reduce using rule 38 (statement -> assign SEMI .)
    K_WHILE         reduce using rule 38 (statement -> assign SEMI .)
    K_DO            reduce using rule 38 (statement -> assign SEMI .)
    K_IF            reduce using rule 38 (statement -> assign SEMI .)
    K_READ_INTEGER  reduce using rule 38 (statement -> assign SEMI .)
    K_RETURN        reduce using rule 38 (statement -> assign SEMI .)
    K_INTEGER       reduce using rule 38 (statement -> assign SEMI .)
    K_DOUBLE        reduce using rule 38 (statement -> assign SEMI .)
    K_STRING        reduce using rule 38 (statement -> assign SEMI .)
    SEMI            reduce using rule 38 (statement -> assign SEMI .)
    K_PROCEDURE     reduce using rule 38 (statement -> assign SEMI .)
    K_ELSE          reduce using rule 38 (statement -> assign SEMI .)


state 241

    (40) statement -> function_call SEMI .

    RCURLY          reduce using rule 40 (statement -> function_call SEMI .)
    ID              reduce using rule 40 (statement -> function_call SEMI .)
    K_PRINT_INTEGER reduce using rule 40 (statement -> function_call SEMI .)
    K_PRINT_STRING  reduce using rule 40 (statement -> function_call SEMI .)
    K_PRINT_DOUBLE  reduce using rule 40 (statement -> function_call SEMI .)
    K_WHILE         reduce using rule 40 (statement -> function_call SEMI .)
    K_DO            reduce using rule 40 (statement -> function_call SEMI .)
    K_IF            reduce using rule 40 (statement -> function_call SEMI .)
    K_READ_INTEGER  reduce using rule 40 (statement -> function_call SEMI .)
    K_RETURN        reduce using rule 40 (statement -> function_call SEMI .)
    K_INTEGER       reduce using rule 40 (statement -> function_call SEMI .)
    K_DOUBLE        reduce using rule 40 (statement -> function_call SEMI .)
    K_STRING        reduce using rule 40 (statement -> function_call SEMI .)
    SEMI            reduce using rule 40 (statement -> function_call SEMI .)
    K_PROCEDURE     reduce using rule 40 (statement -> function_call SEMI .)
    K_ELSE          reduce using rule 40 (statement -> function_call SEMI .)


state 242

    (42) statement -> return SEMI .

    RCURLY          reduce using rule 42 (statement -> return SEMI .)
    ID              reduce using rule 42 (statement -> return SEMI .)
    K_PRINT_INTEGER reduce using rule 42 (statement -> return SEMI .)
    K_PRINT_STRING  reduce using rule 42 (statement -> return SEMI .)
    K_PRINT_DOUBLE  reduce using rule 42 (statement -> return SEMI .)
    K_WHILE         reduce using rule 42 (statement -> return SEMI .)
    K_DO            reduce using rule 42 (statement -> return SEMI .)
    K_IF            reduce using rule 42 (statement -> return SEMI .)
    K_READ_INTEGER  reduce using rule 42 (statement -> return SEMI .)
    K_RETURN        reduce using rule 42 (statement -> return SEMI .)
    K_INTEGER       reduce using rule 42 (statement -> return SEMI .)
    K_DOUBLE        reduce using rule 42 (statement -> return SEMI .)
    K_STRING        reduce using rule 42 (statement -> return SEMI .)
    SEMI            reduce using rule 42 (statement -> return SEMI .)
    K_PROCEDURE     reduce using rule 42 (statement -> return SEMI .)
    K_ELSE          reduce using rule 42 (statement -> return SEMI .)


state 243

    (112) do -> K_DO LPAREN do_assign SEMI condition SEMI . ID inc_dec RPAREN LCURLY statements RCURLY
    (113) do -> K_DO LPAREN do_assign SEMI condition SEMI . ID inc_dec RPAREN statement

    ID              shift and go to state 247


state 244

    (114) if -> K_IF LPAREN bool RPAREN K_THEN LCURLY . statements RCURLY else_if
    (25) statements -> . statements statements
    (26) statements -> . declare SEMI
    (27) statements -> . declare_assign SEMI
    (28) statements -> . assign SEMI
    (29) statements -> . print
    (30) statements -> . while
    (31) statements -> . do
    (32) statements -> . if
    (33) statements -> . read
    (34) statements -> . function_call SEMI
    (35) statements -> . return SEMI
    (43) statements -> . epsilon
    (44) declare -> . type ID
    (45) declare -> . type ID LBRACKET ID RBRACKET
    (46) declare -> . type ID LBRACKET ICONSTANT RBRACKET
    (47) declare -> . type factor COMMA factor COMMA factor
    (48) declare -> . type factor COMMA factor
    (49) declare -> . declare COMMA ID
    (50) declare -> . declare COMMA assign
    (63) declare_assign -> . type ID ASSIGN value
    (64) declare_assign -> . declare_assign COMMA ID
    (51) assign -> . ID ASSIGN value
    (52) assign -> . ID inc_dec
    (53) assign -> . ID ASSIGN math
    (54) assign -> . ID LBRACKET math RBRACKET ASSIGN math
    (55) assign -> . ID LBRACKET math RBRACKET ASSIGN SCONSTANT
    (56) assign -> . ID ASSIGN function_call
    (57) assign -> . ID ASSIGN_PLUS math
    (58) assign -> . ID ASSIGN_MINUS math
    (59) assign -> . ID ASSIGN_MULTIPLY math
    (60) assign -> . ID ASSIGN_DIVIDE math
    (61) assign -> . ID ASSIGN_MOD math
    (62) assign -> . assign ASSIGN value
    (65) print -> . K_PRINT_INTEGER LPAREN value RPAREN SEMI
    (66) print -> . K_PRINT_STRING LPAREN value RPAREN SEMI
    (67) print -> . K_PRINT_DOUBLE LPAREN value RPAREN SEMI
    (109) while -> . K_WHILE LPAREN bool RPAREN statement
    (110) while -> . K_WHILE LPAREN bool RPAREN LCURLY statements RCURLY
    (112) do -> . K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN LCURLY statements RCURLY
    (113) do -> . K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN statement
    (114) if -> . K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else_if
    (115) if -> . K_IF LPAREN bool RPAREN K_THEN statement else_if
    (68) read -> . K_READ_INTEGER LPAREN ID RPAREN SEMI
    (72) function_call -> . ID LPAREN arguments RPAREN
    (73) return -> . K_RETURN value
    (74) return -> . epsilon
    (75) return -> . K_RETURN function_call
    (76) return -> . K_RETURN assign
    (122) epsilon -> .
    (6) type -> . K_INTEGER
    (7) type -> . K_DOUBLE
    (8) type -> . K_STRING

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for K_PRINT_INTEGER resolved as shift
  ! shift/reduce conflict for K_PRINT_STRING resolved as shift
  ! shift/reduce conflict for K_PRINT_DOUBLE resolved as shift
  ! shift/reduce conflict for K_WHILE resolved as shift
  ! shift/reduce conflict for K_DO resolved as shift
  ! shift/reduce conflict for K_IF resolved as shift
  ! shift/reduce conflict for K_READ_INTEGER resolved as shift
  ! shift/reduce conflict for K_RETURN resolved as shift
  ! shift/reduce conflict for K_INTEGER resolved as shift
  ! shift/reduce conflict for K_DOUBLE resolved as shift
  ! shift/reduce conflict for K_STRING resolved as shift
    ID              shift and go to state 37
    K_PRINT_INTEGER shift and go to state 51
    K_PRINT_STRING  shift and go to state 52
    K_PRINT_DOUBLE  shift and go to state 53
    K_WHILE         shift and go to state 54
    K_DO            shift and go to state 55
    K_IF            shift and go to state 56
    K_READ_INTEGER  shift and go to state 57
    K_RETURN        shift and go to state 58
    RCURLY          reduce using rule 122 (epsilon -> .)
    SEMI            reduce using rule 122 (epsilon -> .)
    K_INTEGER       shift and go to state 17
    K_DOUBLE        shift and go to state 18
    K_STRING        shift and go to state 19

  ! ID              [ reduce using rule 122 (epsilon -> .) ]
  ! K_PRINT_INTEGER [ reduce using rule 122 (epsilon -> .) ]
  ! K_PRINT_STRING  [ reduce using rule 122 (epsilon -> .) ]
  ! K_PRINT_DOUBLE  [ reduce using rule 122 (epsilon -> .) ]
  ! K_WHILE         [ reduce using rule 122 (epsilon -> .) ]
  ! K_DO            [ reduce using rule 122 (epsilon -> .) ]
  ! K_IF            [ reduce using rule 122 (epsilon -> .) ]
  ! K_READ_INTEGER  [ reduce using rule 122 (epsilon -> .) ]
  ! K_RETURN        [ reduce using rule 122 (epsilon -> .) ]
  ! K_INTEGER       [ reduce using rule 122 (epsilon -> .) ]
  ! K_DOUBLE        [ reduce using rule 122 (epsilon -> .) ]
  ! K_STRING        [ reduce using rule 122 (epsilon -> .) ]

    statements                     shift and go to state 248
    declare                        shift and go to state 39
    declare_assign                 shift and go to state 40
    assign                         shift and go to state 41
    print                          shift and go to state 42
    while                          shift and go to state 43
    do                             shift and go to state 44
    if                             shift and go to state 45
    read                           shift and go to state 46
    function_call                  shift and go to state 47
    return                         shift and go to state 48
    epsilon                        shift and go to state 49
    type                           shift and go to state 50

state 245

    (115) if -> K_IF LPAREN bool RPAREN K_THEN statement . else_if
    (116) else_if -> . K_ELSE K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else
    (117) else_if -> . K_ELSE K_IF LPAREN bool RPAREN K_THEN statement else
    (118) else_if -> . else
    (119) else -> . K_ELSE LCURLY statements RCURLY
    (120) else -> . K_ELSE statement
    (121) else -> . epsilon
    (122) epsilon -> .

    K_ELSE          shift and go to state 250
    RCURLY          reduce using rule 122 (epsilon -> .)
    ID              reduce using rule 122 (epsilon -> .)
    K_PRINT_INTEGER reduce using rule 122 (epsilon -> .)
    K_PRINT_STRING  reduce using rule 122 (epsilon -> .)
    K_PRINT_DOUBLE  reduce using rule 122 (epsilon -> .)
    K_WHILE         reduce using rule 122 (epsilon -> .)
    K_DO            reduce using rule 122 (epsilon -> .)
    K_IF            reduce using rule 122 (epsilon -> .)
    K_READ_INTEGER  reduce using rule 122 (epsilon -> .)
    K_RETURN        reduce using rule 122 (epsilon -> .)
    K_INTEGER       reduce using rule 122 (epsilon -> .)
    K_DOUBLE        reduce using rule 122 (epsilon -> .)
    K_STRING        reduce using rule 122 (epsilon -> .)
    SEMI            reduce using rule 122 (epsilon -> .)
    K_PROCEDURE     reduce using rule 122 (epsilon -> .)

    else_if                        shift and go to state 249
    else                           shift and go to state 251
    epsilon                        shift and go to state 252

state 246

    (110) while -> K_WHILE LPAREN bool RPAREN LCURLY statements RCURLY .

    RCURLY          reduce using rule 110 (while -> K_WHILE LPAREN bool RPAREN LCURLY statements RCURLY .)
    ID              reduce using rule 110 (while -> K_WHILE LPAREN bool RPAREN LCURLY statements RCURLY .)
    K_PRINT_INTEGER reduce using rule 110 (while -> K_WHILE LPAREN bool RPAREN LCURLY statements RCURLY .)
    K_PRINT_STRING  reduce using rule 110 (while -> K_WHILE LPAREN bool RPAREN LCURLY statements RCURLY .)
    K_PRINT_DOUBLE  reduce using rule 110 (while -> K_WHILE LPAREN bool RPAREN LCURLY statements RCURLY .)
    K_WHILE         reduce using rule 110 (while -> K_WHILE LPAREN bool RPAREN LCURLY statements RCURLY .)
    K_DO            reduce using rule 110 (while -> K_WHILE LPAREN bool RPAREN LCURLY statements RCURLY .)
    K_IF            reduce using rule 110 (while -> K_WHILE LPAREN bool RPAREN LCURLY statements RCURLY .)
    K_READ_INTEGER  reduce using rule 110 (while -> K_WHILE LPAREN bool RPAREN LCURLY statements RCURLY .)
    K_RETURN        reduce using rule 110 (while -> K_WHILE LPAREN bool RPAREN LCURLY statements RCURLY .)
    K_INTEGER       reduce using rule 110 (while -> K_WHILE LPAREN bool RPAREN LCURLY statements RCURLY .)
    K_DOUBLE        reduce using rule 110 (while -> K_WHILE LPAREN bool RPAREN LCURLY statements RCURLY .)
    K_STRING        reduce using rule 110 (while -> K_WHILE LPAREN bool RPAREN LCURLY statements RCURLY .)
    SEMI            reduce using rule 110 (while -> K_WHILE LPAREN bool RPAREN LCURLY statements RCURLY .)
    K_PROCEDURE     reduce using rule 110 (while -> K_WHILE LPAREN bool RPAREN LCURLY statements RCURLY .)


state 247

    (112) do -> K_DO LPAREN do_assign SEMI condition SEMI ID . inc_dec RPAREN LCURLY statements RCURLY
    (113) do -> K_DO LPAREN do_assign SEMI condition SEMI ID . inc_dec RPAREN statement
    (77) inc_dec -> . INCREMENT
    (78) inc_dec -> . DECREMENT

    INCREMENT       shift and go to state 72
    DECREMENT       shift and go to state 73

    inc_dec                        shift and go to state 253

state 248

    (114) if -> K_IF LPAREN bool RPAREN K_THEN LCURLY statements . RCURLY else_if
    (25) statements -> statements . statements
    (25) statements -> . statements statements
    (26) statements -> . declare SEMI
    (27) statements -> . declare_assign SEMI
    (28) statements -> . assign SEMI
    (29) statements -> . print
    (30) statements -> . while
    (31) statements -> . do
    (32) statements -> . if
    (33) statements -> . read
    (34) statements -> . function_call SEMI
    (35) statements -> . return SEMI
    (43) statements -> . epsilon
    (44) declare -> . type ID
    (45) declare -> . type ID LBRACKET ID RBRACKET
    (46) declare -> . type ID LBRACKET ICONSTANT RBRACKET
    (47) declare -> . type factor COMMA factor COMMA factor
    (48) declare -> . type factor COMMA factor
    (49) declare -> . declare COMMA ID
    (50) declare -> . declare COMMA assign
    (63) declare_assign -> . type ID ASSIGN value
    (64) declare_assign -> . declare_assign COMMA ID
    (51) assign -> . ID ASSIGN value
    (52) assign -> . ID inc_dec
    (53) assign -> . ID ASSIGN math
    (54) assign -> . ID LBRACKET math RBRACKET ASSIGN math
    (55) assign -> . ID LBRACKET math RBRACKET ASSIGN SCONSTANT
    (56) assign -> . ID ASSIGN function_call
    (57) assign -> . ID ASSIGN_PLUS math
    (58) assign -> . ID ASSIGN_MINUS math
    (59) assign -> . ID ASSIGN_MULTIPLY math
    (60) assign -> . ID ASSIGN_DIVIDE math
    (61) assign -> . ID ASSIGN_MOD math
    (62) assign -> . assign ASSIGN value
    (65) print -> . K_PRINT_INTEGER LPAREN value RPAREN SEMI
    (66) print -> . K_PRINT_STRING LPAREN value RPAREN SEMI
    (67) print -> . K_PRINT_DOUBLE LPAREN value RPAREN SEMI
    (109) while -> . K_WHILE LPAREN bool RPAREN statement
    (110) while -> . K_WHILE LPAREN bool RPAREN LCURLY statements RCURLY
    (112) do -> . K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN LCURLY statements RCURLY
    (113) do -> . K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN statement
    (114) if -> . K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else_if
    (115) if -> . K_IF LPAREN bool RPAREN K_THEN statement else_if
    (68) read -> . K_READ_INTEGER LPAREN ID RPAREN SEMI
    (72) function_call -> . ID LPAREN arguments RPAREN
    (73) return -> . K_RETURN value
    (74) return -> . epsilon
    (75) return -> . K_RETURN function_call
    (76) return -> . K_RETURN assign
    (122) epsilon -> .
    (6) type -> . K_INTEGER
    (7) type -> . K_DOUBLE
    (8) type -> . K_STRING

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for K_PRINT_INTEGER resolved as shift
  ! shift/reduce conflict for K_PRINT_STRING resolved as shift
  ! shift/reduce conflict for K_PRINT_DOUBLE resolved as shift
  ! shift/reduce conflict for K_WHILE resolved as shift
  ! shift/reduce conflict for K_DO resolved as shift
  ! shift/reduce conflict for K_IF resolved as shift
  ! shift/reduce conflict for K_READ_INTEGER resolved as shift
  ! shift/reduce conflict for K_RETURN resolved as shift
  ! shift/reduce conflict for RCURLY resolved as shift
  ! shift/reduce conflict for K_INTEGER resolved as shift
  ! shift/reduce conflict for K_DOUBLE resolved as shift
  ! shift/reduce conflict for K_STRING resolved as shift
    RCURLY          shift and go to state 254
    ID              shift and go to state 37
    K_PRINT_INTEGER shift and go to state 51
    K_PRINT_STRING  shift and go to state 52
    K_PRINT_DOUBLE  shift and go to state 53
    K_WHILE         shift and go to state 54
    K_DO            shift and go to state 55
    K_IF            shift and go to state 56
    K_READ_INTEGER  shift and go to state 57
    K_RETURN        shift and go to state 58
    SEMI            reduce using rule 122 (epsilon -> .)
    K_INTEGER       shift and go to state 17
    K_DOUBLE        shift and go to state 18
    K_STRING        shift and go to state 19

  ! ID              [ reduce using rule 122 (epsilon -> .) ]
  ! K_PRINT_INTEGER [ reduce using rule 122 (epsilon -> .) ]
  ! K_PRINT_STRING  [ reduce using rule 122 (epsilon -> .) ]
  ! K_PRINT_DOUBLE  [ reduce using rule 122 (epsilon -> .) ]
  ! K_WHILE         [ reduce using rule 122 (epsilon -> .) ]
  ! K_DO            [ reduce using rule 122 (epsilon -> .) ]
  ! K_IF            [ reduce using rule 122 (epsilon -> .) ]
  ! K_READ_INTEGER  [ reduce using rule 122 (epsilon -> .) ]
  ! K_RETURN        [ reduce using rule 122 (epsilon -> .) ]
  ! K_INTEGER       [ reduce using rule 122 (epsilon -> .) ]
  ! K_DOUBLE        [ reduce using rule 122 (epsilon -> .) ]
  ! K_STRING        [ reduce using rule 122 (epsilon -> .) ]
  ! RCURLY          [ reduce using rule 122 (epsilon -> .) ]

    statements                     shift and go to state 74
    declare                        shift and go to state 39
    declare_assign                 shift and go to state 40
    assign                         shift and go to state 41
    print                          shift and go to state 42
    while                          shift and go to state 43
    do                             shift and go to state 44
    if                             shift and go to state 45
    read                           shift and go to state 46
    function_call                  shift and go to state 47
    return                         shift and go to state 48
    epsilon                        shift and go to state 49
    type                           shift and go to state 50

state 249

    (115) if -> K_IF LPAREN bool RPAREN K_THEN statement else_if .

    RCURLY          reduce using rule 115 (if -> K_IF LPAREN bool RPAREN K_THEN statement else_if .)
    ID              reduce using rule 115 (if -> K_IF LPAREN bool RPAREN K_THEN statement else_if .)
    K_PRINT_INTEGER reduce using rule 115 (if -> K_IF LPAREN bool RPAREN K_THEN statement else_if .)
    K_PRINT_STRING  reduce using rule 115 (if -> K_IF LPAREN bool RPAREN K_THEN statement else_if .)
    K_PRINT_DOUBLE  reduce using rule 115 (if -> K_IF LPAREN bool RPAREN K_THEN statement else_if .)
    K_WHILE         reduce using rule 115 (if -> K_IF LPAREN bool RPAREN K_THEN statement else_if .)
    K_DO            reduce using rule 115 (if -> K_IF LPAREN bool RPAREN K_THEN statement else_if .)
    K_IF            reduce using rule 115 (if -> K_IF LPAREN bool RPAREN K_THEN statement else_if .)
    K_READ_INTEGER  reduce using rule 115 (if -> K_IF LPAREN bool RPAREN K_THEN statement else_if .)
    K_RETURN        reduce using rule 115 (if -> K_IF LPAREN bool RPAREN K_THEN statement else_if .)
    K_INTEGER       reduce using rule 115 (if -> K_IF LPAREN bool RPAREN K_THEN statement else_if .)
    K_DOUBLE        reduce using rule 115 (if -> K_IF LPAREN bool RPAREN K_THEN statement else_if .)
    K_STRING        reduce using rule 115 (if -> K_IF LPAREN bool RPAREN K_THEN statement else_if .)
    SEMI            reduce using rule 115 (if -> K_IF LPAREN bool RPAREN K_THEN statement else_if .)
    K_PROCEDURE     reduce using rule 115 (if -> K_IF LPAREN bool RPAREN K_THEN statement else_if .)


state 250

    (116) else_if -> K_ELSE . K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else
    (117) else_if -> K_ELSE . K_IF LPAREN bool RPAREN K_THEN statement else
    (119) else -> K_ELSE . LCURLY statements RCURLY
    (120) else -> K_ELSE . statement
    (36) statement -> . declare SEMI
    (37) statement -> . declare_assign SEMI
    (38) statement -> . assign SEMI
    (39) statement -> . print
    (40) statement -> . function_call SEMI
    (41) statement -> . read
    (42) statement -> . return SEMI
    (44) declare -> . type ID
    (45) declare -> . type ID LBRACKET ID RBRACKET
    (46) declare -> . type ID LBRACKET ICONSTANT RBRACKET
    (47) declare -> . type factor COMMA factor COMMA factor
    (48) declare -> . type factor COMMA factor
    (49) declare -> . declare COMMA ID
    (50) declare -> . declare COMMA assign
    (63) declare_assign -> . type ID ASSIGN value
    (64) declare_assign -> . declare_assign COMMA ID
    (51) assign -> . ID ASSIGN value
    (52) assign -> . ID inc_dec
    (53) assign -> . ID ASSIGN math
    (54) assign -> . ID LBRACKET math RBRACKET ASSIGN math
    (55) assign -> . ID LBRACKET math RBRACKET ASSIGN SCONSTANT
    (56) assign -> . ID ASSIGN function_call
    (57) assign -> . ID ASSIGN_PLUS math
    (58) assign -> . ID ASSIGN_MINUS math
    (59) assign -> . ID ASSIGN_MULTIPLY math
    (60) assign -> . ID ASSIGN_DIVIDE math
    (61) assign -> . ID ASSIGN_MOD math
    (62) assign -> . assign ASSIGN value
    (65) print -> . K_PRINT_INTEGER LPAREN value RPAREN SEMI
    (66) print -> . K_PRINT_STRING LPAREN value RPAREN SEMI
    (67) print -> . K_PRINT_DOUBLE LPAREN value RPAREN SEMI
    (72) function_call -> . ID LPAREN arguments RPAREN
    (68) read -> . K_READ_INTEGER LPAREN ID RPAREN SEMI
    (73) return -> . K_RETURN value
    (74) return -> . epsilon
    (75) return -> . K_RETURN function_call
    (76) return -> . K_RETURN assign
    (6) type -> . K_INTEGER
    (7) type -> . K_DOUBLE
    (8) type -> . K_STRING
    (122) epsilon -> .

    K_IF            shift and go to state 255
    LCURLY          shift and go to state 256
    ID              shift and go to state 37
    K_PRINT_INTEGER shift and go to state 51
    K_PRINT_STRING  shift and go to state 52
    K_PRINT_DOUBLE  shift and go to state 53
    K_READ_INTEGER  shift and go to state 57
    K_RETURN        shift and go to state 58
    K_INTEGER       shift and go to state 17
    K_DOUBLE        shift and go to state 18
    K_STRING        shift and go to state 19
    SEMI            reduce using rule 122 (epsilon -> .)

    statement                      shift and go to state 257
    declare                        shift and go to state 215
    declare_assign                 shift and go to state 216
    assign                         shift and go to state 217
    print                          shift and go to state 218
    function_call                  shift and go to state 219
    read                           shift and go to state 220
    return                         shift and go to state 221
    type                           shift and go to state 50
    epsilon                        shift and go to state 222

state 251

    (118) else_if -> else .

    RCURLY          reduce using rule 118 (else_if -> else .)
    ID              reduce using rule 118 (else_if -> else .)
    K_PRINT_INTEGER reduce using rule 118 (else_if -> else .)
    K_PRINT_STRING  reduce using rule 118 (else_if -> else .)
    K_PRINT_DOUBLE  reduce using rule 118 (else_if -> else .)
    K_WHILE         reduce using rule 118 (else_if -> else .)
    K_DO            reduce using rule 118 (else_if -> else .)
    K_IF            reduce using rule 118 (else_if -> else .)
    K_READ_INTEGER  reduce using rule 118 (else_if -> else .)
    K_RETURN        reduce using rule 118 (else_if -> else .)
    K_INTEGER       reduce using rule 118 (else_if -> else .)
    K_DOUBLE        reduce using rule 118 (else_if -> else .)
    K_STRING        reduce using rule 118 (else_if -> else .)
    SEMI            reduce using rule 118 (else_if -> else .)
    K_PROCEDURE     reduce using rule 118 (else_if -> else .)


state 252

    (121) else -> epsilon .

    RCURLY          reduce using rule 121 (else -> epsilon .)
    ID              reduce using rule 121 (else -> epsilon .)
    K_PRINT_INTEGER reduce using rule 121 (else -> epsilon .)
    K_PRINT_STRING  reduce using rule 121 (else -> epsilon .)
    K_PRINT_DOUBLE  reduce using rule 121 (else -> epsilon .)
    K_WHILE         reduce using rule 121 (else -> epsilon .)
    K_DO            reduce using rule 121 (else -> epsilon .)
    K_IF            reduce using rule 121 (else -> epsilon .)
    K_READ_INTEGER  reduce using rule 121 (else -> epsilon .)
    K_RETURN        reduce using rule 121 (else -> epsilon .)
    K_INTEGER       reduce using rule 121 (else -> epsilon .)
    K_DOUBLE        reduce using rule 121 (else -> epsilon .)
    K_STRING        reduce using rule 121 (else -> epsilon .)
    SEMI            reduce using rule 121 (else -> epsilon .)
    K_PROCEDURE     reduce using rule 121 (else -> epsilon .)


state 253

    (112) do -> K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec . RPAREN LCURLY statements RCURLY
    (113) do -> K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec . RPAREN statement

    RPAREN          shift and go to state 258


state 254

    (114) if -> K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY . else_if
    (116) else_if -> . K_ELSE K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else
    (117) else_if -> . K_ELSE K_IF LPAREN bool RPAREN K_THEN statement else
    (118) else_if -> . else
    (119) else -> . K_ELSE LCURLY statements RCURLY
    (120) else -> . K_ELSE statement
    (121) else -> . epsilon
    (122) epsilon -> .

    K_ELSE          shift and go to state 250
    RCURLY          reduce using rule 122 (epsilon -> .)
    ID              reduce using rule 122 (epsilon -> .)
    K_PRINT_INTEGER reduce using rule 122 (epsilon -> .)
    K_PRINT_STRING  reduce using rule 122 (epsilon -> .)
    K_PRINT_DOUBLE  reduce using rule 122 (epsilon -> .)
    K_WHILE         reduce using rule 122 (epsilon -> .)
    K_DO            reduce using rule 122 (epsilon -> .)
    K_IF            reduce using rule 122 (epsilon -> .)
    K_READ_INTEGER  reduce using rule 122 (epsilon -> .)
    K_RETURN        reduce using rule 122 (epsilon -> .)
    K_INTEGER       reduce using rule 122 (epsilon -> .)
    K_DOUBLE        reduce using rule 122 (epsilon -> .)
    K_STRING        reduce using rule 122 (epsilon -> .)
    SEMI            reduce using rule 122 (epsilon -> .)
    K_PROCEDURE     reduce using rule 122 (epsilon -> .)

    else_if                        shift and go to state 259
    else                           shift and go to state 251
    epsilon                        shift and go to state 252

state 255

    (116) else_if -> K_ELSE K_IF . LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else
    (117) else_if -> K_ELSE K_IF . LPAREN bool RPAREN K_THEN statement else

    LPAREN          shift and go to state 260


state 256

    (119) else -> K_ELSE LCURLY . statements RCURLY
    (25) statements -> . statements statements
    (26) statements -> . declare SEMI
    (27) statements -> . declare_assign SEMI
    (28) statements -> . assign SEMI
    (29) statements -> . print
    (30) statements -> . while
    (31) statements -> . do
    (32) statements -> . if
    (33) statements -> . read
    (34) statements -> . function_call SEMI
    (35) statements -> . return SEMI
    (43) statements -> . epsilon
    (44) declare -> . type ID
    (45) declare -> . type ID LBRACKET ID RBRACKET
    (46) declare -> . type ID LBRACKET ICONSTANT RBRACKET
    (47) declare -> . type factor COMMA factor COMMA factor
    (48) declare -> . type factor COMMA factor
    (49) declare -> . declare COMMA ID
    (50) declare -> . declare COMMA assign
    (63) declare_assign -> . type ID ASSIGN value
    (64) declare_assign -> . declare_assign COMMA ID
    (51) assign -> . ID ASSIGN value
    (52) assign -> . ID inc_dec
    (53) assign -> . ID ASSIGN math
    (54) assign -> . ID LBRACKET math RBRACKET ASSIGN math
    (55) assign -> . ID LBRACKET math RBRACKET ASSIGN SCONSTANT
    (56) assign -> . ID ASSIGN function_call
    (57) assign -> . ID ASSIGN_PLUS math
    (58) assign -> . ID ASSIGN_MINUS math
    (59) assign -> . ID ASSIGN_MULTIPLY math
    (60) assign -> . ID ASSIGN_DIVIDE math
    (61) assign -> . ID ASSIGN_MOD math
    (62) assign -> . assign ASSIGN value
    (65) print -> . K_PRINT_INTEGER LPAREN value RPAREN SEMI
    (66) print -> . K_PRINT_STRING LPAREN value RPAREN SEMI
    (67) print -> . K_PRINT_DOUBLE LPAREN value RPAREN SEMI
    (109) while -> . K_WHILE LPAREN bool RPAREN statement
    (110) while -> . K_WHILE LPAREN bool RPAREN LCURLY statements RCURLY
    (112) do -> . K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN LCURLY statements RCURLY
    (113) do -> . K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN statement
    (114) if -> . K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else_if
    (115) if -> . K_IF LPAREN bool RPAREN K_THEN statement else_if
    (68) read -> . K_READ_INTEGER LPAREN ID RPAREN SEMI
    (72) function_call -> . ID LPAREN arguments RPAREN
    (73) return -> . K_RETURN value
    (74) return -> . epsilon
    (75) return -> . K_RETURN function_call
    (76) return -> . K_RETURN assign
    (122) epsilon -> .
    (6) type -> . K_INTEGER
    (7) type -> . K_DOUBLE
    (8) type -> . K_STRING

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for K_PRINT_INTEGER resolved as shift
  ! shift/reduce conflict for K_PRINT_STRING resolved as shift
  ! shift/reduce conflict for K_PRINT_DOUBLE resolved as shift
  ! shift/reduce conflict for K_WHILE resolved as shift
  ! shift/reduce conflict for K_DO resolved as shift
  ! shift/reduce conflict for K_IF resolved as shift
  ! shift/reduce conflict for K_READ_INTEGER resolved as shift
  ! shift/reduce conflict for K_RETURN resolved as shift
  ! shift/reduce conflict for K_INTEGER resolved as shift
  ! shift/reduce conflict for K_DOUBLE resolved as shift
  ! shift/reduce conflict for K_STRING resolved as shift
    ID              shift and go to state 37
    K_PRINT_INTEGER shift and go to state 51
    K_PRINT_STRING  shift and go to state 52
    K_PRINT_DOUBLE  shift and go to state 53
    K_WHILE         shift and go to state 54
    K_DO            shift and go to state 55
    K_IF            shift and go to state 56
    K_READ_INTEGER  shift and go to state 57
    K_RETURN        shift and go to state 58
    RCURLY          reduce using rule 122 (epsilon -> .)
    SEMI            reduce using rule 122 (epsilon -> .)
    K_INTEGER       shift and go to state 17
    K_DOUBLE        shift and go to state 18
    K_STRING        shift and go to state 19

  ! ID              [ reduce using rule 122 (epsilon -> .) ]
  ! K_PRINT_INTEGER [ reduce using rule 122 (epsilon -> .) ]
  ! K_PRINT_STRING  [ reduce using rule 122 (epsilon -> .) ]
  ! K_PRINT_DOUBLE  [ reduce using rule 122 (epsilon -> .) ]
  ! K_WHILE         [ reduce using rule 122 (epsilon -> .) ]
  ! K_DO            [ reduce using rule 122 (epsilon -> .) ]
  ! K_IF            [ reduce using rule 122 (epsilon -> .) ]
  ! K_READ_INTEGER  [ reduce using rule 122 (epsilon -> .) ]
  ! K_RETURN        [ reduce using rule 122 (epsilon -> .) ]
  ! K_INTEGER       [ reduce using rule 122 (epsilon -> .) ]
  ! K_DOUBLE        [ reduce using rule 122 (epsilon -> .) ]
  ! K_STRING        [ reduce using rule 122 (epsilon -> .) ]

    statements                     shift and go to state 261
    declare                        shift and go to state 39
    declare_assign                 shift and go to state 40
    assign                         shift and go to state 41
    print                          shift and go to state 42
    while                          shift and go to state 43
    do                             shift and go to state 44
    if                             shift and go to state 45
    read                           shift and go to state 46
    function_call                  shift and go to state 47
    return                         shift and go to state 48
    epsilon                        shift and go to state 49
    type                           shift and go to state 50

state 257

    (120) else -> K_ELSE statement .

    RCURLY          reduce using rule 120 (else -> K_ELSE statement .)
    ID              reduce using rule 120 (else -> K_ELSE statement .)
    K_PRINT_INTEGER reduce using rule 120 (else -> K_ELSE statement .)
    K_PRINT_STRING  reduce using rule 120 (else -> K_ELSE statement .)
    K_PRINT_DOUBLE  reduce using rule 120 (else -> K_ELSE statement .)
    K_WHILE         reduce using rule 120 (else -> K_ELSE statement .)
    K_DO            reduce using rule 120 (else -> K_ELSE statement .)
    K_IF            reduce using rule 120 (else -> K_ELSE statement .)
    K_READ_INTEGER  reduce using rule 120 (else -> K_ELSE statement .)
    K_RETURN        reduce using rule 120 (else -> K_ELSE statement .)
    K_INTEGER       reduce using rule 120 (else -> K_ELSE statement .)
    K_DOUBLE        reduce using rule 120 (else -> K_ELSE statement .)
    K_STRING        reduce using rule 120 (else -> K_ELSE statement .)
    SEMI            reduce using rule 120 (else -> K_ELSE statement .)
    K_PROCEDURE     reduce using rule 120 (else -> K_ELSE statement .)


state 258

    (112) do -> K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN . LCURLY statements RCURLY
    (113) do -> K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN . statement
    (36) statement -> . declare SEMI
    (37) statement -> . declare_assign SEMI
    (38) statement -> . assign SEMI
    (39) statement -> . print
    (40) statement -> . function_call SEMI
    (41) statement -> . read
    (42) statement -> . return SEMI
    (44) declare -> . type ID
    (45) declare -> . type ID LBRACKET ID RBRACKET
    (46) declare -> . type ID LBRACKET ICONSTANT RBRACKET
    (47) declare -> . type factor COMMA factor COMMA factor
    (48) declare -> . type factor COMMA factor
    (49) declare -> . declare COMMA ID
    (50) declare -> . declare COMMA assign
    (63) declare_assign -> . type ID ASSIGN value
    (64) declare_assign -> . declare_assign COMMA ID
    (51) assign -> . ID ASSIGN value
    (52) assign -> . ID inc_dec
    (53) assign -> . ID ASSIGN math
    (54) assign -> . ID LBRACKET math RBRACKET ASSIGN math
    (55) assign -> . ID LBRACKET math RBRACKET ASSIGN SCONSTANT
    (56) assign -> . ID ASSIGN function_call
    (57) assign -> . ID ASSIGN_PLUS math
    (58) assign -> . ID ASSIGN_MINUS math
    (59) assign -> . ID ASSIGN_MULTIPLY math
    (60) assign -> . ID ASSIGN_DIVIDE math
    (61) assign -> . ID ASSIGN_MOD math
    (62) assign -> . assign ASSIGN value
    (65) print -> . K_PRINT_INTEGER LPAREN value RPAREN SEMI
    (66) print -> . K_PRINT_STRING LPAREN value RPAREN SEMI
    (67) print -> . K_PRINT_DOUBLE LPAREN value RPAREN SEMI
    (72) function_call -> . ID LPAREN arguments RPAREN
    (68) read -> . K_READ_INTEGER LPAREN ID RPAREN SEMI
    (73) return -> . K_RETURN value
    (74) return -> . epsilon
    (75) return -> . K_RETURN function_call
    (76) return -> . K_RETURN assign
    (6) type -> . K_INTEGER
    (7) type -> . K_DOUBLE
    (8) type -> . K_STRING
    (122) epsilon -> .

    LCURLY          shift and go to state 262
    ID              shift and go to state 37
    K_PRINT_INTEGER shift and go to state 51
    K_PRINT_STRING  shift and go to state 52
    K_PRINT_DOUBLE  shift and go to state 53
    K_READ_INTEGER  shift and go to state 57
    K_RETURN        shift and go to state 58
    K_INTEGER       shift and go to state 17
    K_DOUBLE        shift and go to state 18
    K_STRING        shift and go to state 19
    SEMI            reduce using rule 122 (epsilon -> .)

    statement                      shift and go to state 263
    declare                        shift and go to state 215
    declare_assign                 shift and go to state 216
    assign                         shift and go to state 217
    print                          shift and go to state 218
    function_call                  shift and go to state 219
    read                           shift and go to state 220
    return                         shift and go to state 221
    type                           shift and go to state 50
    epsilon                        shift and go to state 222

state 259

    (114) if -> K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else_if .

    RCURLY          reduce using rule 114 (if -> K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else_if .)
    ID              reduce using rule 114 (if -> K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else_if .)
    K_PRINT_INTEGER reduce using rule 114 (if -> K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else_if .)
    K_PRINT_STRING  reduce using rule 114 (if -> K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else_if .)
    K_PRINT_DOUBLE  reduce using rule 114 (if -> K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else_if .)
    K_WHILE         reduce using rule 114 (if -> K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else_if .)
    K_DO            reduce using rule 114 (if -> K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else_if .)
    K_IF            reduce using rule 114 (if -> K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else_if .)
    K_READ_INTEGER  reduce using rule 114 (if -> K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else_if .)
    K_RETURN        reduce using rule 114 (if -> K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else_if .)
    K_INTEGER       reduce using rule 114 (if -> K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else_if .)
    K_DOUBLE        reduce using rule 114 (if -> K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else_if .)
    K_STRING        reduce using rule 114 (if -> K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else_if .)
    SEMI            reduce using rule 114 (if -> K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else_if .)
    K_PROCEDURE     reduce using rule 114 (if -> K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else_if .)


state 260

    (116) else_if -> K_ELSE K_IF LPAREN . bool RPAREN K_THEN LCURLY statements RCURLY else
    (117) else_if -> K_ELSE K_IF LPAREN . bool RPAREN K_THEN statement else
    (107) bool -> . condition bool_op condition
    (108) bool -> . condition
    (105) condition -> . math bool_op math
    (106) condition -> . function_call bool_op math
    (79) math -> . expression
    (80) math -> . factor inc_dec
    (72) function_call -> . ID LPAREN arguments RPAREN
    (81) expression -> . expression PLUS term
    (82) expression -> . expression MINUS term
    (83) expression -> . term
    (89) factor -> . LPAREN expression RPAREN
    (90) factor -> . MINUS LPAREN expression RPAREN
    (91) factor -> . ICONSTANT
    (92) factor -> . DCONSTANT
    (93) factor -> . ID
    (94) factor -> . ID LBRACKET value RBRACKET
    (95) factor -> . ID LBRACKET ID ICONSTANT RBRACKET
    (84) term -> . term TIMES factor
    (85) term -> . term DIVIDE factor
    (86) term -> . term MOD factor
    (87) term -> . factor
    (88) term -> . MINUS factor

    ID              shift and go to state 145
    LPAREN          shift and go to state 87
    MINUS           shift and go to state 115
    ICONSTANT       shift and go to state 85
    DCONSTANT       shift and go to state 89

    bool                           shift and go to state 264
    condition                      shift and go to state 142
    math                           shift and go to state 143
    function_call                  shift and go to state 144
    expression                     shift and go to state 112
    factor                         shift and go to state 113
    term                           shift and go to state 114

state 261

    (119) else -> K_ELSE LCURLY statements . RCURLY
    (25) statements -> statements . statements
    (25) statements -> . statements statements
    (26) statements -> . declare SEMI
    (27) statements -> . declare_assign SEMI
    (28) statements -> . assign SEMI
    (29) statements -> . print
    (30) statements -> . while
    (31) statements -> . do
    (32) statements -> . if
    (33) statements -> . read
    (34) statements -> . function_call SEMI
    (35) statements -> . return SEMI
    (43) statements -> . epsilon
    (44) declare -> . type ID
    (45) declare -> . type ID LBRACKET ID RBRACKET
    (46) declare -> . type ID LBRACKET ICONSTANT RBRACKET
    (47) declare -> . type factor COMMA factor COMMA factor
    (48) declare -> . type factor COMMA factor
    (49) declare -> . declare COMMA ID
    (50) declare -> . declare COMMA assign
    (63) declare_assign -> . type ID ASSIGN value
    (64) declare_assign -> . declare_assign COMMA ID
    (51) assign -> . ID ASSIGN value
    (52) assign -> . ID inc_dec
    (53) assign -> . ID ASSIGN math
    (54) assign -> . ID LBRACKET math RBRACKET ASSIGN math
    (55) assign -> . ID LBRACKET math RBRACKET ASSIGN SCONSTANT
    (56) assign -> . ID ASSIGN function_call
    (57) assign -> . ID ASSIGN_PLUS math
    (58) assign -> . ID ASSIGN_MINUS math
    (59) assign -> . ID ASSIGN_MULTIPLY math
    (60) assign -> . ID ASSIGN_DIVIDE math
    (61) assign -> . ID ASSIGN_MOD math
    (62) assign -> . assign ASSIGN value
    (65) print -> . K_PRINT_INTEGER LPAREN value RPAREN SEMI
    (66) print -> . K_PRINT_STRING LPAREN value RPAREN SEMI
    (67) print -> . K_PRINT_DOUBLE LPAREN value RPAREN SEMI
    (109) while -> . K_WHILE LPAREN bool RPAREN statement
    (110) while -> . K_WHILE LPAREN bool RPAREN LCURLY statements RCURLY
    (112) do -> . K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN LCURLY statements RCURLY
    (113) do -> . K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN statement
    (114) if -> . K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else_if
    (115) if -> . K_IF LPAREN bool RPAREN K_THEN statement else_if
    (68) read -> . K_READ_INTEGER LPAREN ID RPAREN SEMI
    (72) function_call -> . ID LPAREN arguments RPAREN
    (73) return -> . K_RETURN value
    (74) return -> . epsilon
    (75) return -> . K_RETURN function_call
    (76) return -> . K_RETURN assign
    (122) epsilon -> .
    (6) type -> . K_INTEGER
    (7) type -> . K_DOUBLE
    (8) type -> . K_STRING

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for K_PRINT_INTEGER resolved as shift
  ! shift/reduce conflict for K_PRINT_STRING resolved as shift
  ! shift/reduce conflict for K_PRINT_DOUBLE resolved as shift
  ! shift/reduce conflict for K_WHILE resolved as shift
  ! shift/reduce conflict for K_DO resolved as shift
  ! shift/reduce conflict for K_IF resolved as shift
  ! shift/reduce conflict for K_READ_INTEGER resolved as shift
  ! shift/reduce conflict for K_RETURN resolved as shift
  ! shift/reduce conflict for RCURLY resolved as shift
  ! shift/reduce conflict for K_INTEGER resolved as shift
  ! shift/reduce conflict for K_DOUBLE resolved as shift
  ! shift/reduce conflict for K_STRING resolved as shift
    RCURLY          shift and go to state 265
    ID              shift and go to state 37
    K_PRINT_INTEGER shift and go to state 51
    K_PRINT_STRING  shift and go to state 52
    K_PRINT_DOUBLE  shift and go to state 53
    K_WHILE         shift and go to state 54
    K_DO            shift and go to state 55
    K_IF            shift and go to state 56
    K_READ_INTEGER  shift and go to state 57
    K_RETURN        shift and go to state 58
    SEMI            reduce using rule 122 (epsilon -> .)
    K_INTEGER       shift and go to state 17
    K_DOUBLE        shift and go to state 18
    K_STRING        shift and go to state 19

  ! ID              [ reduce using rule 122 (epsilon -> .) ]
  ! K_PRINT_INTEGER [ reduce using rule 122 (epsilon -> .) ]
  ! K_PRINT_STRING  [ reduce using rule 122 (epsilon -> .) ]
  ! K_PRINT_DOUBLE  [ reduce using rule 122 (epsilon -> .) ]
  ! K_WHILE         [ reduce using rule 122 (epsilon -> .) ]
  ! K_DO            [ reduce using rule 122 (epsilon -> .) ]
  ! K_IF            [ reduce using rule 122 (epsilon -> .) ]
  ! K_READ_INTEGER  [ reduce using rule 122 (epsilon -> .) ]
  ! K_RETURN        [ reduce using rule 122 (epsilon -> .) ]
  ! K_INTEGER       [ reduce using rule 122 (epsilon -> .) ]
  ! K_DOUBLE        [ reduce using rule 122 (epsilon -> .) ]
  ! K_STRING        [ reduce using rule 122 (epsilon -> .) ]
  ! RCURLY          [ reduce using rule 122 (epsilon -> .) ]

    statements                     shift and go to state 74
    declare                        shift and go to state 39
    declare_assign                 shift and go to state 40
    assign                         shift and go to state 41
    print                          shift and go to state 42
    while                          shift and go to state 43
    do                             shift and go to state 44
    if                             shift and go to state 45
    read                           shift and go to state 46
    function_call                  shift and go to state 47
    return                         shift and go to state 48
    epsilon                        shift and go to state 49
    type                           shift and go to state 50

state 262

    (112) do -> K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN LCURLY . statements RCURLY
    (25) statements -> . statements statements
    (26) statements -> . declare SEMI
    (27) statements -> . declare_assign SEMI
    (28) statements -> . assign SEMI
    (29) statements -> . print
    (30) statements -> . while
    (31) statements -> . do
    (32) statements -> . if
    (33) statements -> . read
    (34) statements -> . function_call SEMI
    (35) statements -> . return SEMI
    (43) statements -> . epsilon
    (44) declare -> . type ID
    (45) declare -> . type ID LBRACKET ID RBRACKET
    (46) declare -> . type ID LBRACKET ICONSTANT RBRACKET
    (47) declare -> . type factor COMMA factor COMMA factor
    (48) declare -> . type factor COMMA factor
    (49) declare -> . declare COMMA ID
    (50) declare -> . declare COMMA assign
    (63) declare_assign -> . type ID ASSIGN value
    (64) declare_assign -> . declare_assign COMMA ID
    (51) assign -> . ID ASSIGN value
    (52) assign -> . ID inc_dec
    (53) assign -> . ID ASSIGN math
    (54) assign -> . ID LBRACKET math RBRACKET ASSIGN math
    (55) assign -> . ID LBRACKET math RBRACKET ASSIGN SCONSTANT
    (56) assign -> . ID ASSIGN function_call
    (57) assign -> . ID ASSIGN_PLUS math
    (58) assign -> . ID ASSIGN_MINUS math
    (59) assign -> . ID ASSIGN_MULTIPLY math
    (60) assign -> . ID ASSIGN_DIVIDE math
    (61) assign -> . ID ASSIGN_MOD math
    (62) assign -> . assign ASSIGN value
    (65) print -> . K_PRINT_INTEGER LPAREN value RPAREN SEMI
    (66) print -> . K_PRINT_STRING LPAREN value RPAREN SEMI
    (67) print -> . K_PRINT_DOUBLE LPAREN value RPAREN SEMI
    (109) while -> . K_WHILE LPAREN bool RPAREN statement
    (110) while -> . K_WHILE LPAREN bool RPAREN LCURLY statements RCURLY
    (112) do -> . K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN LCURLY statements RCURLY
    (113) do -> . K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN statement
    (114) if -> . K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else_if
    (115) if -> . K_IF LPAREN bool RPAREN K_THEN statement else_if
    (68) read -> . K_READ_INTEGER LPAREN ID RPAREN SEMI
    (72) function_call -> . ID LPAREN arguments RPAREN
    (73) return -> . K_RETURN value
    (74) return -> . epsilon
    (75) return -> . K_RETURN function_call
    (76) return -> . K_RETURN assign
    (122) epsilon -> .
    (6) type -> . K_INTEGER
    (7) type -> . K_DOUBLE
    (8) type -> . K_STRING

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for K_PRINT_INTEGER resolved as shift
  ! shift/reduce conflict for K_PRINT_STRING resolved as shift
  ! shift/reduce conflict for K_PRINT_DOUBLE resolved as shift
  ! shift/reduce conflict for K_WHILE resolved as shift
  ! shift/reduce conflict for K_DO resolved as shift
  ! shift/reduce conflict for K_IF resolved as shift
  ! shift/reduce conflict for K_READ_INTEGER resolved as shift
  ! shift/reduce conflict for K_RETURN resolved as shift
  ! shift/reduce conflict for K_INTEGER resolved as shift
  ! shift/reduce conflict for K_DOUBLE resolved as shift
  ! shift/reduce conflict for K_STRING resolved as shift
    ID              shift and go to state 37
    K_PRINT_INTEGER shift and go to state 51
    K_PRINT_STRING  shift and go to state 52
    K_PRINT_DOUBLE  shift and go to state 53
    K_WHILE         shift and go to state 54
    K_DO            shift and go to state 55
    K_IF            shift and go to state 56
    K_READ_INTEGER  shift and go to state 57
    K_RETURN        shift and go to state 58
    RCURLY          reduce using rule 122 (epsilon -> .)
    SEMI            reduce using rule 122 (epsilon -> .)
    K_INTEGER       shift and go to state 17
    K_DOUBLE        shift and go to state 18
    K_STRING        shift and go to state 19

  ! ID              [ reduce using rule 122 (epsilon -> .) ]
  ! K_PRINT_INTEGER [ reduce using rule 122 (epsilon -> .) ]
  ! K_PRINT_STRING  [ reduce using rule 122 (epsilon -> .) ]
  ! K_PRINT_DOUBLE  [ reduce using rule 122 (epsilon -> .) ]
  ! K_WHILE         [ reduce using rule 122 (epsilon -> .) ]
  ! K_DO            [ reduce using rule 122 (epsilon -> .) ]
  ! K_IF            [ reduce using rule 122 (epsilon -> .) ]
  ! K_READ_INTEGER  [ reduce using rule 122 (epsilon -> .) ]
  ! K_RETURN        [ reduce using rule 122 (epsilon -> .) ]
  ! K_INTEGER       [ reduce using rule 122 (epsilon -> .) ]
  ! K_DOUBLE        [ reduce using rule 122 (epsilon -> .) ]
  ! K_STRING        [ reduce using rule 122 (epsilon -> .) ]

    statements                     shift and go to state 266
    declare                        shift and go to state 39
    declare_assign                 shift and go to state 40
    assign                         shift and go to state 41
    print                          shift and go to state 42
    while                          shift and go to state 43
    do                             shift and go to state 44
    if                             shift and go to state 45
    read                           shift and go to state 46
    function_call                  shift and go to state 47
    return                         shift and go to state 48
    epsilon                        shift and go to state 49
    type                           shift and go to state 50

state 263

    (113) do -> K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN statement .

    RCURLY          reduce using rule 113 (do -> K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN statement .)
    ID              reduce using rule 113 (do -> K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN statement .)
    K_PRINT_INTEGER reduce using rule 113 (do -> K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN statement .)
    K_PRINT_STRING  reduce using rule 113 (do -> K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN statement .)
    K_PRINT_DOUBLE  reduce using rule 113 (do -> K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN statement .)
    K_WHILE         reduce using rule 113 (do -> K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN statement .)
    K_DO            reduce using rule 113 (do -> K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN statement .)
    K_IF            reduce using rule 113 (do -> K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN statement .)
    K_READ_INTEGER  reduce using rule 113 (do -> K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN statement .)
    K_RETURN        reduce using rule 113 (do -> K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN statement .)
    K_INTEGER       reduce using rule 113 (do -> K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN statement .)
    K_DOUBLE        reduce using rule 113 (do -> K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN statement .)
    K_STRING        reduce using rule 113 (do -> K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN statement .)
    SEMI            reduce using rule 113 (do -> K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN statement .)
    K_PROCEDURE     reduce using rule 113 (do -> K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN statement .)


state 264

    (116) else_if -> K_ELSE K_IF LPAREN bool . RPAREN K_THEN LCURLY statements RCURLY else
    (117) else_if -> K_ELSE K_IF LPAREN bool . RPAREN K_THEN statement else

    RPAREN          shift and go to state 267


state 265

    (119) else -> K_ELSE LCURLY statements RCURLY .

    RCURLY          reduce using rule 119 (else -> K_ELSE LCURLY statements RCURLY .)
    ID              reduce using rule 119 (else -> K_ELSE LCURLY statements RCURLY .)
    K_PRINT_INTEGER reduce using rule 119 (else -> K_ELSE LCURLY statements RCURLY .)
    K_PRINT_STRING  reduce using rule 119 (else -> K_ELSE LCURLY statements RCURLY .)
    K_PRINT_DOUBLE  reduce using rule 119 (else -> K_ELSE LCURLY statements RCURLY .)
    K_WHILE         reduce using rule 119 (else -> K_ELSE LCURLY statements RCURLY .)
    K_DO            reduce using rule 119 (else -> K_ELSE LCURLY statements RCURLY .)
    K_IF            reduce using rule 119 (else -> K_ELSE LCURLY statements RCURLY .)
    K_READ_INTEGER  reduce using rule 119 (else -> K_ELSE LCURLY statements RCURLY .)
    K_RETURN        reduce using rule 119 (else -> K_ELSE LCURLY statements RCURLY .)
    K_INTEGER       reduce using rule 119 (else -> K_ELSE LCURLY statements RCURLY .)
    K_DOUBLE        reduce using rule 119 (else -> K_ELSE LCURLY statements RCURLY .)
    K_STRING        reduce using rule 119 (else -> K_ELSE LCURLY statements RCURLY .)
    SEMI            reduce using rule 119 (else -> K_ELSE LCURLY statements RCURLY .)
    K_PROCEDURE     reduce using rule 119 (else -> K_ELSE LCURLY statements RCURLY .)


state 266

    (112) do -> K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN LCURLY statements . RCURLY
    (25) statements -> statements . statements
    (25) statements -> . statements statements
    (26) statements -> . declare SEMI
    (27) statements -> . declare_assign SEMI
    (28) statements -> . assign SEMI
    (29) statements -> . print
    (30) statements -> . while
    (31) statements -> . do
    (32) statements -> . if
    (33) statements -> . read
    (34) statements -> . function_call SEMI
    (35) statements -> . return SEMI
    (43) statements -> . epsilon
    (44) declare -> . type ID
    (45) declare -> . type ID LBRACKET ID RBRACKET
    (46) declare -> . type ID LBRACKET ICONSTANT RBRACKET
    (47) declare -> . type factor COMMA factor COMMA factor
    (48) declare -> . type factor COMMA factor
    (49) declare -> . declare COMMA ID
    (50) declare -> . declare COMMA assign
    (63) declare_assign -> . type ID ASSIGN value
    (64) declare_assign -> . declare_assign COMMA ID
    (51) assign -> . ID ASSIGN value
    (52) assign -> . ID inc_dec
    (53) assign -> . ID ASSIGN math
    (54) assign -> . ID LBRACKET math RBRACKET ASSIGN math
    (55) assign -> . ID LBRACKET math RBRACKET ASSIGN SCONSTANT
    (56) assign -> . ID ASSIGN function_call
    (57) assign -> . ID ASSIGN_PLUS math
    (58) assign -> . ID ASSIGN_MINUS math
    (59) assign -> . ID ASSIGN_MULTIPLY math
    (60) assign -> . ID ASSIGN_DIVIDE math
    (61) assign -> . ID ASSIGN_MOD math
    (62) assign -> . assign ASSIGN value
    (65) print -> . K_PRINT_INTEGER LPAREN value RPAREN SEMI
    (66) print -> . K_PRINT_STRING LPAREN value RPAREN SEMI
    (67) print -> . K_PRINT_DOUBLE LPAREN value RPAREN SEMI
    (109) while -> . K_WHILE LPAREN bool RPAREN statement
    (110) while -> . K_WHILE LPAREN bool RPAREN LCURLY statements RCURLY
    (112) do -> . K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN LCURLY statements RCURLY
    (113) do -> . K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN statement
    (114) if -> . K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else_if
    (115) if -> . K_IF LPAREN bool RPAREN K_THEN statement else_if
    (68) read -> . K_READ_INTEGER LPAREN ID RPAREN SEMI
    (72) function_call -> . ID LPAREN arguments RPAREN
    (73) return -> . K_RETURN value
    (74) return -> . epsilon
    (75) return -> . K_RETURN function_call
    (76) return -> . K_RETURN assign
    (122) epsilon -> .
    (6) type -> . K_INTEGER
    (7) type -> . K_DOUBLE
    (8) type -> . K_STRING

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for K_PRINT_INTEGER resolved as shift
  ! shift/reduce conflict for K_PRINT_STRING resolved as shift
  ! shift/reduce conflict for K_PRINT_DOUBLE resolved as shift
  ! shift/reduce conflict for K_WHILE resolved as shift
  ! shift/reduce conflict for K_DO resolved as shift
  ! shift/reduce conflict for K_IF resolved as shift
  ! shift/reduce conflict for K_READ_INTEGER resolved as shift
  ! shift/reduce conflict for K_RETURN resolved as shift
  ! shift/reduce conflict for RCURLY resolved as shift
  ! shift/reduce conflict for K_INTEGER resolved as shift
  ! shift/reduce conflict for K_DOUBLE resolved as shift
  ! shift/reduce conflict for K_STRING resolved as shift
    RCURLY          shift and go to state 268
    ID              shift and go to state 37
    K_PRINT_INTEGER shift and go to state 51
    K_PRINT_STRING  shift and go to state 52
    K_PRINT_DOUBLE  shift and go to state 53
    K_WHILE         shift and go to state 54
    K_DO            shift and go to state 55
    K_IF            shift and go to state 56
    K_READ_INTEGER  shift and go to state 57
    K_RETURN        shift and go to state 58
    SEMI            reduce using rule 122 (epsilon -> .)
    K_INTEGER       shift and go to state 17
    K_DOUBLE        shift and go to state 18
    K_STRING        shift and go to state 19

  ! ID              [ reduce using rule 122 (epsilon -> .) ]
  ! K_PRINT_INTEGER [ reduce using rule 122 (epsilon -> .) ]
  ! K_PRINT_STRING  [ reduce using rule 122 (epsilon -> .) ]
  ! K_PRINT_DOUBLE  [ reduce using rule 122 (epsilon -> .) ]
  ! K_WHILE         [ reduce using rule 122 (epsilon -> .) ]
  ! K_DO            [ reduce using rule 122 (epsilon -> .) ]
  ! K_IF            [ reduce using rule 122 (epsilon -> .) ]
  ! K_READ_INTEGER  [ reduce using rule 122 (epsilon -> .) ]
  ! K_RETURN        [ reduce using rule 122 (epsilon -> .) ]
  ! K_INTEGER       [ reduce using rule 122 (epsilon -> .) ]
  ! K_DOUBLE        [ reduce using rule 122 (epsilon -> .) ]
  ! K_STRING        [ reduce using rule 122 (epsilon -> .) ]
  ! RCURLY          [ reduce using rule 122 (epsilon -> .) ]

    statements                     shift and go to state 74
    declare                        shift and go to state 39
    declare_assign                 shift and go to state 40
    assign                         shift and go to state 41
    print                          shift and go to state 42
    while                          shift and go to state 43
    do                             shift and go to state 44
    if                             shift and go to state 45
    read                           shift and go to state 46
    function_call                  shift and go to state 47
    return                         shift and go to state 48
    epsilon                        shift and go to state 49
    type                           shift and go to state 50

state 267

    (116) else_if -> K_ELSE K_IF LPAREN bool RPAREN . K_THEN LCURLY statements RCURLY else
    (117) else_if -> K_ELSE K_IF LPAREN bool RPAREN . K_THEN statement else

    K_THEN          shift and go to state 269


state 268

    (112) do -> K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN LCURLY statements RCURLY .

    RCURLY          reduce using rule 112 (do -> K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN LCURLY statements RCURLY .)
    ID              reduce using rule 112 (do -> K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN LCURLY statements RCURLY .)
    K_PRINT_INTEGER reduce using rule 112 (do -> K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN LCURLY statements RCURLY .)
    K_PRINT_STRING  reduce using rule 112 (do -> K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN LCURLY statements RCURLY .)
    K_PRINT_DOUBLE  reduce using rule 112 (do -> K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN LCURLY statements RCURLY .)
    K_WHILE         reduce using rule 112 (do -> K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN LCURLY statements RCURLY .)
    K_DO            reduce using rule 112 (do -> K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN LCURLY statements RCURLY .)
    K_IF            reduce using rule 112 (do -> K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN LCURLY statements RCURLY .)
    K_READ_INTEGER  reduce using rule 112 (do -> K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN LCURLY statements RCURLY .)
    K_RETURN        reduce using rule 112 (do -> K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN LCURLY statements RCURLY .)
    K_INTEGER       reduce using rule 112 (do -> K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN LCURLY statements RCURLY .)
    K_DOUBLE        reduce using rule 112 (do -> K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN LCURLY statements RCURLY .)
    K_STRING        reduce using rule 112 (do -> K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN LCURLY statements RCURLY .)
    SEMI            reduce using rule 112 (do -> K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN LCURLY statements RCURLY .)
    K_PROCEDURE     reduce using rule 112 (do -> K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN LCURLY statements RCURLY .)


state 269

    (116) else_if -> K_ELSE K_IF LPAREN bool RPAREN K_THEN . LCURLY statements RCURLY else
    (117) else_if -> K_ELSE K_IF LPAREN bool RPAREN K_THEN . statement else
    (36) statement -> . declare SEMI
    (37) statement -> . declare_assign SEMI
    (38) statement -> . assign SEMI
    (39) statement -> . print
    (40) statement -> . function_call SEMI
    (41) statement -> . read
    (42) statement -> . return SEMI
    (44) declare -> . type ID
    (45) declare -> . type ID LBRACKET ID RBRACKET
    (46) declare -> . type ID LBRACKET ICONSTANT RBRACKET
    (47) declare -> . type factor COMMA factor COMMA factor
    (48) declare -> . type factor COMMA factor
    (49) declare -> . declare COMMA ID
    (50) declare -> . declare COMMA assign
    (63) declare_assign -> . type ID ASSIGN value
    (64) declare_assign -> . declare_assign COMMA ID
    (51) assign -> . ID ASSIGN value
    (52) assign -> . ID inc_dec
    (53) assign -> . ID ASSIGN math
    (54) assign -> . ID LBRACKET math RBRACKET ASSIGN math
    (55) assign -> . ID LBRACKET math RBRACKET ASSIGN SCONSTANT
    (56) assign -> . ID ASSIGN function_call
    (57) assign -> . ID ASSIGN_PLUS math
    (58) assign -> . ID ASSIGN_MINUS math
    (59) assign -> . ID ASSIGN_MULTIPLY math
    (60) assign -> . ID ASSIGN_DIVIDE math
    (61) assign -> . ID ASSIGN_MOD math
    (62) assign -> . assign ASSIGN value
    (65) print -> . K_PRINT_INTEGER LPAREN value RPAREN SEMI
    (66) print -> . K_PRINT_STRING LPAREN value RPAREN SEMI
    (67) print -> . K_PRINT_DOUBLE LPAREN value RPAREN SEMI
    (72) function_call -> . ID LPAREN arguments RPAREN
    (68) read -> . K_READ_INTEGER LPAREN ID RPAREN SEMI
    (73) return -> . K_RETURN value
    (74) return -> . epsilon
    (75) return -> . K_RETURN function_call
    (76) return -> . K_RETURN assign
    (6) type -> . K_INTEGER
    (7) type -> . K_DOUBLE
    (8) type -> . K_STRING
    (122) epsilon -> .

    LCURLY          shift and go to state 270
    ID              shift and go to state 37
    K_PRINT_INTEGER shift and go to state 51
    K_PRINT_STRING  shift and go to state 52
    K_PRINT_DOUBLE  shift and go to state 53
    K_READ_INTEGER  shift and go to state 57
    K_RETURN        shift and go to state 58
    K_INTEGER       shift and go to state 17
    K_DOUBLE        shift and go to state 18
    K_STRING        shift and go to state 19
    SEMI            reduce using rule 122 (epsilon -> .)

    statement                      shift and go to state 271
    declare                        shift and go to state 215
    declare_assign                 shift and go to state 216
    assign                         shift and go to state 217
    print                          shift and go to state 218
    function_call                  shift and go to state 219
    read                           shift and go to state 220
    return                         shift and go to state 221
    type                           shift and go to state 50
    epsilon                        shift and go to state 222

state 270

    (116) else_if -> K_ELSE K_IF LPAREN bool RPAREN K_THEN LCURLY . statements RCURLY else
    (25) statements -> . statements statements
    (26) statements -> . declare SEMI
    (27) statements -> . declare_assign SEMI
    (28) statements -> . assign SEMI
    (29) statements -> . print
    (30) statements -> . while
    (31) statements -> . do
    (32) statements -> . if
    (33) statements -> . read
    (34) statements -> . function_call SEMI
    (35) statements -> . return SEMI
    (43) statements -> . epsilon
    (44) declare -> . type ID
    (45) declare -> . type ID LBRACKET ID RBRACKET
    (46) declare -> . type ID LBRACKET ICONSTANT RBRACKET
    (47) declare -> . type factor COMMA factor COMMA factor
    (48) declare -> . type factor COMMA factor
    (49) declare -> . declare COMMA ID
    (50) declare -> . declare COMMA assign
    (63) declare_assign -> . type ID ASSIGN value
    (64) declare_assign -> . declare_assign COMMA ID
    (51) assign -> . ID ASSIGN value
    (52) assign -> . ID inc_dec
    (53) assign -> . ID ASSIGN math
    (54) assign -> . ID LBRACKET math RBRACKET ASSIGN math
    (55) assign -> . ID LBRACKET math RBRACKET ASSIGN SCONSTANT
    (56) assign -> . ID ASSIGN function_call
    (57) assign -> . ID ASSIGN_PLUS math
    (58) assign -> . ID ASSIGN_MINUS math
    (59) assign -> . ID ASSIGN_MULTIPLY math
    (60) assign -> . ID ASSIGN_DIVIDE math
    (61) assign -> . ID ASSIGN_MOD math
    (62) assign -> . assign ASSIGN value
    (65) print -> . K_PRINT_INTEGER LPAREN value RPAREN SEMI
    (66) print -> . K_PRINT_STRING LPAREN value RPAREN SEMI
    (67) print -> . K_PRINT_DOUBLE LPAREN value RPAREN SEMI
    (109) while -> . K_WHILE LPAREN bool RPAREN statement
    (110) while -> . K_WHILE LPAREN bool RPAREN LCURLY statements RCURLY
    (112) do -> . K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN LCURLY statements RCURLY
    (113) do -> . K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN statement
    (114) if -> . K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else_if
    (115) if -> . K_IF LPAREN bool RPAREN K_THEN statement else_if
    (68) read -> . K_READ_INTEGER LPAREN ID RPAREN SEMI
    (72) function_call -> . ID LPAREN arguments RPAREN
    (73) return -> . K_RETURN value
    (74) return -> . epsilon
    (75) return -> . K_RETURN function_call
    (76) return -> . K_RETURN assign
    (122) epsilon -> .
    (6) type -> . K_INTEGER
    (7) type -> . K_DOUBLE
    (8) type -> . K_STRING

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for K_PRINT_INTEGER resolved as shift
  ! shift/reduce conflict for K_PRINT_STRING resolved as shift
  ! shift/reduce conflict for K_PRINT_DOUBLE resolved as shift
  ! shift/reduce conflict for K_WHILE resolved as shift
  ! shift/reduce conflict for K_DO resolved as shift
  ! shift/reduce conflict for K_IF resolved as shift
  ! shift/reduce conflict for K_READ_INTEGER resolved as shift
  ! shift/reduce conflict for K_RETURN resolved as shift
  ! shift/reduce conflict for K_INTEGER resolved as shift
  ! shift/reduce conflict for K_DOUBLE resolved as shift
  ! shift/reduce conflict for K_STRING resolved as shift
    ID              shift and go to state 37
    K_PRINT_INTEGER shift and go to state 51
    K_PRINT_STRING  shift and go to state 52
    K_PRINT_DOUBLE  shift and go to state 53
    K_WHILE         shift and go to state 54
    K_DO            shift and go to state 55
    K_IF            shift and go to state 56
    K_READ_INTEGER  shift and go to state 57
    K_RETURN        shift and go to state 58
    RCURLY          reduce using rule 122 (epsilon -> .)
    SEMI            reduce using rule 122 (epsilon -> .)
    K_INTEGER       shift and go to state 17
    K_DOUBLE        shift and go to state 18
    K_STRING        shift and go to state 19

  ! ID              [ reduce using rule 122 (epsilon -> .) ]
  ! K_PRINT_INTEGER [ reduce using rule 122 (epsilon -> .) ]
  ! K_PRINT_STRING  [ reduce using rule 122 (epsilon -> .) ]
  ! K_PRINT_DOUBLE  [ reduce using rule 122 (epsilon -> .) ]
  ! K_WHILE         [ reduce using rule 122 (epsilon -> .) ]
  ! K_DO            [ reduce using rule 122 (epsilon -> .) ]
  ! K_IF            [ reduce using rule 122 (epsilon -> .) ]
  ! K_READ_INTEGER  [ reduce using rule 122 (epsilon -> .) ]
  ! K_RETURN        [ reduce using rule 122 (epsilon -> .) ]
  ! K_INTEGER       [ reduce using rule 122 (epsilon -> .) ]
  ! K_DOUBLE        [ reduce using rule 122 (epsilon -> .) ]
  ! K_STRING        [ reduce using rule 122 (epsilon -> .) ]

    statements                     shift and go to state 272
    declare                        shift and go to state 39
    declare_assign                 shift and go to state 40
    assign                         shift and go to state 41
    print                          shift and go to state 42
    while                          shift and go to state 43
    do                             shift and go to state 44
    if                             shift and go to state 45
    read                           shift and go to state 46
    function_call                  shift and go to state 47
    return                         shift and go to state 48
    epsilon                        shift and go to state 49
    type                           shift and go to state 50

state 271

    (117) else_if -> K_ELSE K_IF LPAREN bool RPAREN K_THEN statement . else
    (119) else -> . K_ELSE LCURLY statements RCURLY
    (120) else -> . K_ELSE statement
    (121) else -> . epsilon
    (122) epsilon -> .

    K_ELSE          shift and go to state 273
    RCURLY          reduce using rule 122 (epsilon -> .)
    ID              reduce using rule 122 (epsilon -> .)
    K_PRINT_INTEGER reduce using rule 122 (epsilon -> .)
    K_PRINT_STRING  reduce using rule 122 (epsilon -> .)
    K_PRINT_DOUBLE  reduce using rule 122 (epsilon -> .)
    K_WHILE         reduce using rule 122 (epsilon -> .)
    K_DO            reduce using rule 122 (epsilon -> .)
    K_IF            reduce using rule 122 (epsilon -> .)
    K_READ_INTEGER  reduce using rule 122 (epsilon -> .)
    K_RETURN        reduce using rule 122 (epsilon -> .)
    K_INTEGER       reduce using rule 122 (epsilon -> .)
    K_DOUBLE        reduce using rule 122 (epsilon -> .)
    K_STRING        reduce using rule 122 (epsilon -> .)
    SEMI            reduce using rule 122 (epsilon -> .)
    K_PROCEDURE     reduce using rule 122 (epsilon -> .)

    else                           shift and go to state 274
    epsilon                        shift and go to state 252

state 272

    (116) else_if -> K_ELSE K_IF LPAREN bool RPAREN K_THEN LCURLY statements . RCURLY else
    (25) statements -> statements . statements
    (25) statements -> . statements statements
    (26) statements -> . declare SEMI
    (27) statements -> . declare_assign SEMI
    (28) statements -> . assign SEMI
    (29) statements -> . print
    (30) statements -> . while
    (31) statements -> . do
    (32) statements -> . if
    (33) statements -> . read
    (34) statements -> . function_call SEMI
    (35) statements -> . return SEMI
    (43) statements -> . epsilon
    (44) declare -> . type ID
    (45) declare -> . type ID LBRACKET ID RBRACKET
    (46) declare -> . type ID LBRACKET ICONSTANT RBRACKET
    (47) declare -> . type factor COMMA factor COMMA factor
    (48) declare -> . type factor COMMA factor
    (49) declare -> . declare COMMA ID
    (50) declare -> . declare COMMA assign
    (63) declare_assign -> . type ID ASSIGN value
    (64) declare_assign -> . declare_assign COMMA ID
    (51) assign -> . ID ASSIGN value
    (52) assign -> . ID inc_dec
    (53) assign -> . ID ASSIGN math
    (54) assign -> . ID LBRACKET math RBRACKET ASSIGN math
    (55) assign -> . ID LBRACKET math RBRACKET ASSIGN SCONSTANT
    (56) assign -> . ID ASSIGN function_call
    (57) assign -> . ID ASSIGN_PLUS math
    (58) assign -> . ID ASSIGN_MINUS math
    (59) assign -> . ID ASSIGN_MULTIPLY math
    (60) assign -> . ID ASSIGN_DIVIDE math
    (61) assign -> . ID ASSIGN_MOD math
    (62) assign -> . assign ASSIGN value
    (65) print -> . K_PRINT_INTEGER LPAREN value RPAREN SEMI
    (66) print -> . K_PRINT_STRING LPAREN value RPAREN SEMI
    (67) print -> . K_PRINT_DOUBLE LPAREN value RPAREN SEMI
    (109) while -> . K_WHILE LPAREN bool RPAREN statement
    (110) while -> . K_WHILE LPAREN bool RPAREN LCURLY statements RCURLY
    (112) do -> . K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN LCURLY statements RCURLY
    (113) do -> . K_DO LPAREN do_assign SEMI condition SEMI ID inc_dec RPAREN statement
    (114) if -> . K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else_if
    (115) if -> . K_IF LPAREN bool RPAREN K_THEN statement else_if
    (68) read -> . K_READ_INTEGER LPAREN ID RPAREN SEMI
    (72) function_call -> . ID LPAREN arguments RPAREN
    (73) return -> . K_RETURN value
    (74) return -> . epsilon
    (75) return -> . K_RETURN function_call
    (76) return -> . K_RETURN assign
    (122) epsilon -> .
    (6) type -> . K_INTEGER
    (7) type -> . K_DOUBLE
    (8) type -> . K_STRING

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for K_PRINT_INTEGER resolved as shift
  ! shift/reduce conflict for K_PRINT_STRING resolved as shift
  ! shift/reduce conflict for K_PRINT_DOUBLE resolved as shift
  ! shift/reduce conflict for K_WHILE resolved as shift
  ! shift/reduce conflict for K_DO resolved as shift
  ! shift/reduce conflict for K_IF resolved as shift
  ! shift/reduce conflict for K_READ_INTEGER resolved as shift
  ! shift/reduce conflict for K_RETURN resolved as shift
  ! shift/reduce conflict for RCURLY resolved as shift
  ! shift/reduce conflict for K_INTEGER resolved as shift
  ! shift/reduce conflict for K_DOUBLE resolved as shift
  ! shift/reduce conflict for K_STRING resolved as shift
    RCURLY          shift and go to state 275
    ID              shift and go to state 37
    K_PRINT_INTEGER shift and go to state 51
    K_PRINT_STRING  shift and go to state 52
    K_PRINT_DOUBLE  shift and go to state 53
    K_WHILE         shift and go to state 54
    K_DO            shift and go to state 55
    K_IF            shift and go to state 56
    K_READ_INTEGER  shift and go to state 57
    K_RETURN        shift and go to state 58
    SEMI            reduce using rule 122 (epsilon -> .)
    K_INTEGER       shift and go to state 17
    K_DOUBLE        shift and go to state 18
    K_STRING        shift and go to state 19

  ! ID              [ reduce using rule 122 (epsilon -> .) ]
  ! K_PRINT_INTEGER [ reduce using rule 122 (epsilon -> .) ]
  ! K_PRINT_STRING  [ reduce using rule 122 (epsilon -> .) ]
  ! K_PRINT_DOUBLE  [ reduce using rule 122 (epsilon -> .) ]
  ! K_WHILE         [ reduce using rule 122 (epsilon -> .) ]
  ! K_DO            [ reduce using rule 122 (epsilon -> .) ]
  ! K_IF            [ reduce using rule 122 (epsilon -> .) ]
  ! K_READ_INTEGER  [ reduce using rule 122 (epsilon -> .) ]
  ! K_RETURN        [ reduce using rule 122 (epsilon -> .) ]
  ! K_INTEGER       [ reduce using rule 122 (epsilon -> .) ]
  ! K_DOUBLE        [ reduce using rule 122 (epsilon -> .) ]
  ! K_STRING        [ reduce using rule 122 (epsilon -> .) ]
  ! RCURLY          [ reduce using rule 122 (epsilon -> .) ]

    statements                     shift and go to state 74
    declare                        shift and go to state 39
    declare_assign                 shift and go to state 40
    assign                         shift and go to state 41
    print                          shift and go to state 42
    while                          shift and go to state 43
    do                             shift and go to state 44
    if                             shift and go to state 45
    read                           shift and go to state 46
    function_call                  shift and go to state 47
    return                         shift and go to state 48
    epsilon                        shift and go to state 49
    type                           shift and go to state 50

state 273

    (119) else -> K_ELSE . LCURLY statements RCURLY
    (120) else -> K_ELSE . statement
    (36) statement -> . declare SEMI
    (37) statement -> . declare_assign SEMI
    (38) statement -> . assign SEMI
    (39) statement -> . print
    (40) statement -> . function_call SEMI
    (41) statement -> . read
    (42) statement -> . return SEMI
    (44) declare -> . type ID
    (45) declare -> . type ID LBRACKET ID RBRACKET
    (46) declare -> . type ID LBRACKET ICONSTANT RBRACKET
    (47) declare -> . type factor COMMA factor COMMA factor
    (48) declare -> . type factor COMMA factor
    (49) declare -> . declare COMMA ID
    (50) declare -> . declare COMMA assign
    (63) declare_assign -> . type ID ASSIGN value
    (64) declare_assign -> . declare_assign COMMA ID
    (51) assign -> . ID ASSIGN value
    (52) assign -> . ID inc_dec
    (53) assign -> . ID ASSIGN math
    (54) assign -> . ID LBRACKET math RBRACKET ASSIGN math
    (55) assign -> . ID LBRACKET math RBRACKET ASSIGN SCONSTANT
    (56) assign -> . ID ASSIGN function_call
    (57) assign -> . ID ASSIGN_PLUS math
    (58) assign -> . ID ASSIGN_MINUS math
    (59) assign -> . ID ASSIGN_MULTIPLY math
    (60) assign -> . ID ASSIGN_DIVIDE math
    (61) assign -> . ID ASSIGN_MOD math
    (62) assign -> . assign ASSIGN value
    (65) print -> . K_PRINT_INTEGER LPAREN value RPAREN SEMI
    (66) print -> . K_PRINT_STRING LPAREN value RPAREN SEMI
    (67) print -> . K_PRINT_DOUBLE LPAREN value RPAREN SEMI
    (72) function_call -> . ID LPAREN arguments RPAREN
    (68) read -> . K_READ_INTEGER LPAREN ID RPAREN SEMI
    (73) return -> . K_RETURN value
    (74) return -> . epsilon
    (75) return -> . K_RETURN function_call
    (76) return -> . K_RETURN assign
    (6) type -> . K_INTEGER
    (7) type -> . K_DOUBLE
    (8) type -> . K_STRING
    (122) epsilon -> .

    LCURLY          shift and go to state 256
    ID              shift and go to state 37
    K_PRINT_INTEGER shift and go to state 51
    K_PRINT_STRING  shift and go to state 52
    K_PRINT_DOUBLE  shift and go to state 53
    K_READ_INTEGER  shift and go to state 57
    K_RETURN        shift and go to state 58
    K_INTEGER       shift and go to state 17
    K_DOUBLE        shift and go to state 18
    K_STRING        shift and go to state 19
    SEMI            reduce using rule 122 (epsilon -> .)

    statement                      shift and go to state 257
    declare                        shift and go to state 215
    declare_assign                 shift and go to state 216
    assign                         shift and go to state 217
    print                          shift and go to state 218
    function_call                  shift and go to state 219
    read                           shift and go to state 220
    return                         shift and go to state 221
    type                           shift and go to state 50
    epsilon                        shift and go to state 222

state 274

    (117) else_if -> K_ELSE K_IF LPAREN bool RPAREN K_THEN statement else .

    RCURLY          reduce using rule 117 (else_if -> K_ELSE K_IF LPAREN bool RPAREN K_THEN statement else .)
    ID              reduce using rule 117 (else_if -> K_ELSE K_IF LPAREN bool RPAREN K_THEN statement else .)
    K_PRINT_INTEGER reduce using rule 117 (else_if -> K_ELSE K_IF LPAREN bool RPAREN K_THEN statement else .)
    K_PRINT_STRING  reduce using rule 117 (else_if -> K_ELSE K_IF LPAREN bool RPAREN K_THEN statement else .)
    K_PRINT_DOUBLE  reduce using rule 117 (else_if -> K_ELSE K_IF LPAREN bool RPAREN K_THEN statement else .)
    K_WHILE         reduce using rule 117 (else_if -> K_ELSE K_IF LPAREN bool RPAREN K_THEN statement else .)
    K_DO            reduce using rule 117 (else_if -> K_ELSE K_IF LPAREN bool RPAREN K_THEN statement else .)
    K_IF            reduce using rule 117 (else_if -> K_ELSE K_IF LPAREN bool RPAREN K_THEN statement else .)
    K_READ_INTEGER  reduce using rule 117 (else_if -> K_ELSE K_IF LPAREN bool RPAREN K_THEN statement else .)
    K_RETURN        reduce using rule 117 (else_if -> K_ELSE K_IF LPAREN bool RPAREN K_THEN statement else .)
    K_INTEGER       reduce using rule 117 (else_if -> K_ELSE K_IF LPAREN bool RPAREN K_THEN statement else .)
    K_DOUBLE        reduce using rule 117 (else_if -> K_ELSE K_IF LPAREN bool RPAREN K_THEN statement else .)
    K_STRING        reduce using rule 117 (else_if -> K_ELSE K_IF LPAREN bool RPAREN K_THEN statement else .)
    SEMI            reduce using rule 117 (else_if -> K_ELSE K_IF LPAREN bool RPAREN K_THEN statement else .)
    K_PROCEDURE     reduce using rule 117 (else_if -> K_ELSE K_IF LPAREN bool RPAREN K_THEN statement else .)


state 275

    (116) else_if -> K_ELSE K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY . else
    (119) else -> . K_ELSE LCURLY statements RCURLY
    (120) else -> . K_ELSE statement
    (121) else -> . epsilon
    (122) epsilon -> .

    K_ELSE          shift and go to state 273
    RCURLY          reduce using rule 122 (epsilon -> .)
    ID              reduce using rule 122 (epsilon -> .)
    K_PRINT_INTEGER reduce using rule 122 (epsilon -> .)
    K_PRINT_STRING  reduce using rule 122 (epsilon -> .)
    K_PRINT_DOUBLE  reduce using rule 122 (epsilon -> .)
    K_WHILE         reduce using rule 122 (epsilon -> .)
    K_DO            reduce using rule 122 (epsilon -> .)
    K_IF            reduce using rule 122 (epsilon -> .)
    K_READ_INTEGER  reduce using rule 122 (epsilon -> .)
    K_RETURN        reduce using rule 122 (epsilon -> .)
    K_INTEGER       reduce using rule 122 (epsilon -> .)
    K_DOUBLE        reduce using rule 122 (epsilon -> .)
    K_STRING        reduce using rule 122 (epsilon -> .)
    SEMI            reduce using rule 122 (epsilon -> .)
    K_PROCEDURE     reduce using rule 122 (epsilon -> .)

    else                           shift and go to state 276
    epsilon                        shift and go to state 252

state 276

    (116) else_if -> K_ELSE K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else .

    RCURLY          reduce using rule 116 (else_if -> K_ELSE K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else .)
    ID              reduce using rule 116 (else_if -> K_ELSE K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else .)
    K_PRINT_INTEGER reduce using rule 116 (else_if -> K_ELSE K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else .)
    K_PRINT_STRING  reduce using rule 116 (else_if -> K_ELSE K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else .)
    K_PRINT_DOUBLE  reduce using rule 116 (else_if -> K_ELSE K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else .)
    K_WHILE         reduce using rule 116 (else_if -> K_ELSE K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else .)
    K_DO            reduce using rule 116 (else_if -> K_ELSE K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else .)
    K_IF            reduce using rule 116 (else_if -> K_ELSE K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else .)
    K_READ_INTEGER  reduce using rule 116 (else_if -> K_ELSE K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else .)
    K_RETURN        reduce using rule 116 (else_if -> K_ELSE K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else .)
    K_INTEGER       reduce using rule 116 (else_if -> K_ELSE K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else .)
    K_DOUBLE        reduce using rule 116 (else_if -> K_ELSE K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else .)
    K_STRING        reduce using rule 116 (else_if -> K_ELSE K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else .)
    SEMI            reduce using rule 116 (else_if -> K_ELSE K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else .)
    K_PROCEDURE     reduce using rule 116 (else_if -> K_ELSE K_IF LPAREN bool RPAREN K_THEN LCURLY statements RCURLY else .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for K_FUNCTION in state 4 resolved as shift
WARNING: shift/reduce conflict for K_PROCEDURE in state 4 resolved as shift
WARNING: shift/reduce conflict for K_FUNCTION in state 5 resolved as shift
WARNING: shift/reduce conflict for K_PROCEDURE in state 5 resolved as shift
WARNING: shift/reduce conflict for RCURLY in state 5 resolved as shift
WARNING: shift/reduce conflict for K_FUNCTION in state 11 resolved as shift
WARNING: shift/reduce conflict for K_PROCEDURE in state 11 resolved as shift
WARNING: shift/reduce conflict for K_FUNCTION in state 11 resolved as shift
WARNING: shift/reduce conflict for K_PROCEDURE in state 11 resolved as shift
WARNING: shift/reduce conflict for ID in state 33 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_INTEGER in state 33 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_STRING in state 33 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_DOUBLE in state 33 resolved as shift
WARNING: shift/reduce conflict for K_WHILE in state 33 resolved as shift
WARNING: shift/reduce conflict for K_DO in state 33 resolved as shift
WARNING: shift/reduce conflict for K_IF in state 33 resolved as shift
WARNING: shift/reduce conflict for K_READ_INTEGER in state 33 resolved as shift
WARNING: shift/reduce conflict for K_RETURN in state 33 resolved as shift
WARNING: shift/reduce conflict for K_INTEGER in state 33 resolved as shift
WARNING: shift/reduce conflict for K_DOUBLE in state 33 resolved as shift
WARNING: shift/reduce conflict for K_STRING in state 33 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 34 resolved as shift
WARNING: shift/reduce conflict for ID in state 36 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_INTEGER in state 36 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_STRING in state 36 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_DOUBLE in state 36 resolved as shift
WARNING: shift/reduce conflict for K_WHILE in state 36 resolved as shift
WARNING: shift/reduce conflict for K_DO in state 36 resolved as shift
WARNING: shift/reduce conflict for K_IF in state 36 resolved as shift
WARNING: shift/reduce conflict for K_READ_INTEGER in state 36 resolved as shift
WARNING: shift/reduce conflict for K_RETURN in state 36 resolved as shift
WARNING: shift/reduce conflict for K_PROCEDURE in state 36 resolved as shift
WARNING: shift/reduce conflict for K_INTEGER in state 36 resolved as shift
WARNING: shift/reduce conflict for K_DOUBLE in state 36 resolved as shift
WARNING: shift/reduce conflict for K_STRING in state 36 resolved as shift
WARNING: shift/reduce conflict for ID in state 38 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_INTEGER in state 38 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_STRING in state 38 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_DOUBLE in state 38 resolved as shift
WARNING: shift/reduce conflict for K_WHILE in state 38 resolved as shift
WARNING: shift/reduce conflict for K_DO in state 38 resolved as shift
WARNING: shift/reduce conflict for K_IF in state 38 resolved as shift
WARNING: shift/reduce conflict for K_READ_INTEGER in state 38 resolved as shift
WARNING: shift/reduce conflict for K_RETURN in state 38 resolved as shift
WARNING: shift/reduce conflict for RCURLY in state 38 resolved as shift
WARNING: shift/reduce conflict for K_INTEGER in state 38 resolved as shift
WARNING: shift/reduce conflict for K_DOUBLE in state 38 resolved as shift
WARNING: shift/reduce conflict for K_STRING in state 38 resolved as shift
WARNING: shift/reduce conflict for ID in state 60 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_INTEGER in state 60 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_STRING in state 60 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_DOUBLE in state 60 resolved as shift
WARNING: shift/reduce conflict for K_WHILE in state 60 resolved as shift
WARNING: shift/reduce conflict for K_DO in state 60 resolved as shift
WARNING: shift/reduce conflict for K_IF in state 60 resolved as shift
WARNING: shift/reduce conflict for K_READ_INTEGER in state 60 resolved as shift
WARNING: shift/reduce conflict for K_RETURN in state 60 resolved as shift
WARNING: shift/reduce conflict for K_PROCEDURE in state 60 resolved as shift
WARNING: shift/reduce conflict for RCURLY in state 60 resolved as shift
WARNING: shift/reduce conflict for K_INTEGER in state 60 resolved as shift
WARNING: shift/reduce conflict for K_DOUBLE in state 60 resolved as shift
WARNING: shift/reduce conflict for K_STRING in state 60 resolved as shift
WARNING: shift/reduce conflict for ID in state 61 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_INTEGER in state 61 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_STRING in state 61 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_DOUBLE in state 61 resolved as shift
WARNING: shift/reduce conflict for K_WHILE in state 61 resolved as shift
WARNING: shift/reduce conflict for K_DO in state 61 resolved as shift
WARNING: shift/reduce conflict for K_IF in state 61 resolved as shift
WARNING: shift/reduce conflict for K_READ_INTEGER in state 61 resolved as shift
WARNING: shift/reduce conflict for K_RETURN in state 61 resolved as shift
WARNING: shift/reduce conflict for ID in state 61 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_INTEGER in state 61 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_STRING in state 61 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_DOUBLE in state 61 resolved as shift
WARNING: shift/reduce conflict for K_WHILE in state 61 resolved as shift
WARNING: shift/reduce conflict for K_DO in state 61 resolved as shift
WARNING: shift/reduce conflict for K_IF in state 61 resolved as shift
WARNING: shift/reduce conflict for K_READ_INTEGER in state 61 resolved as shift
WARNING: shift/reduce conflict for K_RETURN in state 61 resolved as shift
WARNING: shift/reduce conflict for K_INTEGER in state 61 resolved as shift
WARNING: shift/reduce conflict for K_DOUBLE in state 61 resolved as shift
WARNING: shift/reduce conflict for K_STRING in state 61 resolved as shift
WARNING: shift/reduce conflict for ID in state 74 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_INTEGER in state 74 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_STRING in state 74 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_DOUBLE in state 74 resolved as shift
WARNING: shift/reduce conflict for K_WHILE in state 74 resolved as shift
WARNING: shift/reduce conflict for K_DO in state 74 resolved as shift
WARNING: shift/reduce conflict for K_IF in state 74 resolved as shift
WARNING: shift/reduce conflict for K_READ_INTEGER in state 74 resolved as shift
WARNING: shift/reduce conflict for K_RETURN in state 74 resolved as shift
WARNING: shift/reduce conflict for ID in state 74 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_INTEGER in state 74 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_STRING in state 74 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_DOUBLE in state 74 resolved as shift
WARNING: shift/reduce conflict for K_WHILE in state 74 resolved as shift
WARNING: shift/reduce conflict for K_DO in state 74 resolved as shift
WARNING: shift/reduce conflict for K_IF in state 74 resolved as shift
WARNING: shift/reduce conflict for K_READ_INTEGER in state 74 resolved as shift
WARNING: shift/reduce conflict for K_RETURN in state 74 resolved as shift
WARNING: shift/reduce conflict for K_INTEGER in state 74 resolved as shift
WARNING: shift/reduce conflict for K_DOUBLE in state 74 resolved as shift
WARNING: shift/reduce conflict for K_STRING in state 74 resolved as shift
WARNING: shift/reduce conflict for K_PROCEDURE in state 104 resolved as shift
WARNING: shift/reduce conflict for ID in state 104 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_INTEGER in state 104 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_STRING in state 104 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_DOUBLE in state 104 resolved as shift
WARNING: shift/reduce conflict for K_WHILE in state 104 resolved as shift
WARNING: shift/reduce conflict for K_DO in state 104 resolved as shift
WARNING: shift/reduce conflict for K_IF in state 104 resolved as shift
WARNING: shift/reduce conflict for K_READ_INTEGER in state 104 resolved as shift
WARNING: shift/reduce conflict for K_RETURN in state 104 resolved as shift
WARNING: shift/reduce conflict for ID in state 104 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_INTEGER in state 104 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_STRING in state 104 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_DOUBLE in state 104 resolved as shift
WARNING: shift/reduce conflict for K_WHILE in state 104 resolved as shift
WARNING: shift/reduce conflict for K_DO in state 104 resolved as shift
WARNING: shift/reduce conflict for K_IF in state 104 resolved as shift
WARNING: shift/reduce conflict for K_READ_INTEGER in state 104 resolved as shift
WARNING: shift/reduce conflict for K_RETURN in state 104 resolved as shift
WARNING: shift/reduce conflict for K_PROCEDURE in state 104 resolved as shift
WARNING: shift/reduce conflict for K_INTEGER in state 104 resolved as shift
WARNING: shift/reduce conflict for K_DOUBLE in state 104 resolved as shift
WARNING: shift/reduce conflict for K_STRING in state 104 resolved as shift
WARNING: shift/reduce conflict for RBRACKET in state 165 resolved as shift
WARNING: shift/reduce conflict for RBRACKET in state 166 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 169 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 203 resolved as shift
WARNING: shift/reduce conflict for ID in state 214 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_INTEGER in state 214 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_STRING in state 214 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_DOUBLE in state 214 resolved as shift
WARNING: shift/reduce conflict for K_WHILE in state 214 resolved as shift
WARNING: shift/reduce conflict for K_DO in state 214 resolved as shift
WARNING: shift/reduce conflict for K_IF in state 214 resolved as shift
WARNING: shift/reduce conflict for K_READ_INTEGER in state 214 resolved as shift
WARNING: shift/reduce conflict for K_RETURN in state 214 resolved as shift
WARNING: shift/reduce conflict for K_INTEGER in state 214 resolved as shift
WARNING: shift/reduce conflict for K_DOUBLE in state 214 resolved as shift
WARNING: shift/reduce conflict for K_STRING in state 214 resolved as shift
WARNING: shift/reduce conflict for ID in state 237 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_INTEGER in state 237 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_STRING in state 237 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_DOUBLE in state 237 resolved as shift
WARNING: shift/reduce conflict for K_WHILE in state 237 resolved as shift
WARNING: shift/reduce conflict for K_DO in state 237 resolved as shift
WARNING: shift/reduce conflict for K_IF in state 237 resolved as shift
WARNING: shift/reduce conflict for K_READ_INTEGER in state 237 resolved as shift
WARNING: shift/reduce conflict for K_RETURN in state 237 resolved as shift
WARNING: shift/reduce conflict for RCURLY in state 237 resolved as shift
WARNING: shift/reduce conflict for K_INTEGER in state 237 resolved as shift
WARNING: shift/reduce conflict for K_DOUBLE in state 237 resolved as shift
WARNING: shift/reduce conflict for K_STRING in state 237 resolved as shift
WARNING: shift/reduce conflict for ID in state 244 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_INTEGER in state 244 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_STRING in state 244 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_DOUBLE in state 244 resolved as shift
WARNING: shift/reduce conflict for K_WHILE in state 244 resolved as shift
WARNING: shift/reduce conflict for K_DO in state 244 resolved as shift
WARNING: shift/reduce conflict for K_IF in state 244 resolved as shift
WARNING: shift/reduce conflict for K_READ_INTEGER in state 244 resolved as shift
WARNING: shift/reduce conflict for K_RETURN in state 244 resolved as shift
WARNING: shift/reduce conflict for K_INTEGER in state 244 resolved as shift
WARNING: shift/reduce conflict for K_DOUBLE in state 244 resolved as shift
WARNING: shift/reduce conflict for K_STRING in state 244 resolved as shift
WARNING: shift/reduce conflict for ID in state 248 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_INTEGER in state 248 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_STRING in state 248 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_DOUBLE in state 248 resolved as shift
WARNING: shift/reduce conflict for K_WHILE in state 248 resolved as shift
WARNING: shift/reduce conflict for K_DO in state 248 resolved as shift
WARNING: shift/reduce conflict for K_IF in state 248 resolved as shift
WARNING: shift/reduce conflict for K_READ_INTEGER in state 248 resolved as shift
WARNING: shift/reduce conflict for K_RETURN in state 248 resolved as shift
WARNING: shift/reduce conflict for RCURLY in state 248 resolved as shift
WARNING: shift/reduce conflict for K_INTEGER in state 248 resolved as shift
WARNING: shift/reduce conflict for K_DOUBLE in state 248 resolved as shift
WARNING: shift/reduce conflict for K_STRING in state 248 resolved as shift
WARNING: shift/reduce conflict for ID in state 256 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_INTEGER in state 256 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_STRING in state 256 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_DOUBLE in state 256 resolved as shift
WARNING: shift/reduce conflict for K_WHILE in state 256 resolved as shift
WARNING: shift/reduce conflict for K_DO in state 256 resolved as shift
WARNING: shift/reduce conflict for K_IF in state 256 resolved as shift
WARNING: shift/reduce conflict for K_READ_INTEGER in state 256 resolved as shift
WARNING: shift/reduce conflict for K_RETURN in state 256 resolved as shift
WARNING: shift/reduce conflict for K_INTEGER in state 256 resolved as shift
WARNING: shift/reduce conflict for K_DOUBLE in state 256 resolved as shift
WARNING: shift/reduce conflict for K_STRING in state 256 resolved as shift
WARNING: shift/reduce conflict for ID in state 261 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_INTEGER in state 261 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_STRING in state 261 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_DOUBLE in state 261 resolved as shift
WARNING: shift/reduce conflict for K_WHILE in state 261 resolved as shift
WARNING: shift/reduce conflict for K_DO in state 261 resolved as shift
WARNING: shift/reduce conflict for K_IF in state 261 resolved as shift
WARNING: shift/reduce conflict for K_READ_INTEGER in state 261 resolved as shift
WARNING: shift/reduce conflict for K_RETURN in state 261 resolved as shift
WARNING: shift/reduce conflict for RCURLY in state 261 resolved as shift
WARNING: shift/reduce conflict for K_INTEGER in state 261 resolved as shift
WARNING: shift/reduce conflict for K_DOUBLE in state 261 resolved as shift
WARNING: shift/reduce conflict for K_STRING in state 261 resolved as shift
WARNING: shift/reduce conflict for ID in state 262 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_INTEGER in state 262 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_STRING in state 262 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_DOUBLE in state 262 resolved as shift
WARNING: shift/reduce conflict for K_WHILE in state 262 resolved as shift
WARNING: shift/reduce conflict for K_DO in state 262 resolved as shift
WARNING: shift/reduce conflict for K_IF in state 262 resolved as shift
WARNING: shift/reduce conflict for K_READ_INTEGER in state 262 resolved as shift
WARNING: shift/reduce conflict for K_RETURN in state 262 resolved as shift
WARNING: shift/reduce conflict for K_INTEGER in state 262 resolved as shift
WARNING: shift/reduce conflict for K_DOUBLE in state 262 resolved as shift
WARNING: shift/reduce conflict for K_STRING in state 262 resolved as shift
WARNING: shift/reduce conflict for ID in state 266 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_INTEGER in state 266 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_STRING in state 266 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_DOUBLE in state 266 resolved as shift
WARNING: shift/reduce conflict for K_WHILE in state 266 resolved as shift
WARNING: shift/reduce conflict for K_DO in state 266 resolved as shift
WARNING: shift/reduce conflict for K_IF in state 266 resolved as shift
WARNING: shift/reduce conflict for K_READ_INTEGER in state 266 resolved as shift
WARNING: shift/reduce conflict for K_RETURN in state 266 resolved as shift
WARNING: shift/reduce conflict for RCURLY in state 266 resolved as shift
WARNING: shift/reduce conflict for K_INTEGER in state 266 resolved as shift
WARNING: shift/reduce conflict for K_DOUBLE in state 266 resolved as shift
WARNING: shift/reduce conflict for K_STRING in state 266 resolved as shift
WARNING: shift/reduce conflict for ID in state 270 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_INTEGER in state 270 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_STRING in state 270 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_DOUBLE in state 270 resolved as shift
WARNING: shift/reduce conflict for K_WHILE in state 270 resolved as shift
WARNING: shift/reduce conflict for K_DO in state 270 resolved as shift
WARNING: shift/reduce conflict for K_IF in state 270 resolved as shift
WARNING: shift/reduce conflict for K_READ_INTEGER in state 270 resolved as shift
WARNING: shift/reduce conflict for K_RETURN in state 270 resolved as shift
WARNING: shift/reduce conflict for K_INTEGER in state 270 resolved as shift
WARNING: shift/reduce conflict for K_DOUBLE in state 270 resolved as shift
WARNING: shift/reduce conflict for K_STRING in state 270 resolved as shift
WARNING: shift/reduce conflict for ID in state 272 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_INTEGER in state 272 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_STRING in state 272 resolved as shift
WARNING: shift/reduce conflict for K_PRINT_DOUBLE in state 272 resolved as shift
WARNING: shift/reduce conflict for K_WHILE in state 272 resolved as shift
WARNING: shift/reduce conflict for K_DO in state 272 resolved as shift
WARNING: shift/reduce conflict for K_IF in state 272 resolved as shift
WARNING: shift/reduce conflict for K_READ_INTEGER in state 272 resolved as shift
WARNING: shift/reduce conflict for K_RETURN in state 272 resolved as shift
WARNING: shift/reduce conflict for RCURLY in state 272 resolved as shift
WARNING: shift/reduce conflict for K_INTEGER in state 272 resolved as shift
WARNING: shift/reduce conflict for K_DOUBLE in state 272 resolved as shift
WARNING: shift/reduce conflict for K_STRING in state 272 resolved as shift
WARNING: reduce/reduce conflict in state 11 resolved using rule (program_body -> program_body program_body)
WARNING: rejected rule (epsilon -> <empty>) in state 11
WARNING: reduce/reduce conflict in state 49 resolved using rule (statements -> epsilon)
WARNING: rejected rule (return -> epsilon) in state 49
WARNING: reduce/reduce conflict in state 61 resolved using rule (function_statements -> statements)
WARNING: rejected rule (epsilon -> <empty>) in state 61
WARNING: reduce/reduce conflict in state 74 resolved using rule (statements -> statements statements)
WARNING: rejected rule (epsilon -> <empty>) in state 74
WARNING: reduce/reduce conflict in state 84 resolved using rule (declare -> type ID)
WARNING: rejected rule (factor -> ID) in state 84
WARNING: reduce/reduce conflict in state 104 resolved using rule (function_statements -> function_statements function_statements)
WARNING: rejected rule (epsilon -> <empty>) in state 104
WARNING: reduce/reduce conflict in state 106 resolved using rule (value -> ID)
WARNING: rejected rule (factor -> ID) in state 106
WARNING: reduce/reduce conflict in state 110 resolved using rule (value -> ICONSTANT)
WARNING: rejected rule (factor -> ICONSTANT) in state 110
WARNING: reduce/reduce conflict in state 111 resolved using rule (value -> DCONSTANT)
WARNING: rejected rule (factor -> DCONSTANT) in state 111
WARNING: reduce/reduce conflict in state 192 resolved using rule (value -> ID)
WARNING: rejected rule (factor -> ID) in state 192
WARNING: reduce/reduce conflict in state 231 resolved using rule (value -> ID LBRACKET value RBRACKET)
WARNING: rejected rule (factor -> ID LBRACKET value RBRACKET) in state 231
WARNING: reduce/reduce conflict in state 232 resolved using rule (factor -> LPAREN expression RPAREN)
WARNING: rejected rule (factor -> MINUS LPAREN expression RPAREN) in state 232
